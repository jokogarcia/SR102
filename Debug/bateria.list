
bateria.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009868  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a14  08009a14  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009a14  08009a14  00019a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a1c  08009a1c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  20000090  08009ab4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  08009ab4  00020a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cce7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e3d  00000000  00000000  0003cda7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  00040be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001320  00000000  00000000  000420b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d28  00000000  00000000  000433d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014626  00000000  00000000  000680f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1b1b  00000000  00000000  0007c71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e239  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f8  00000000  00000000  0014e2b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080099d8 	.word	0x080099d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080099d8 	.word	0x080099d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <application_init>:
#include "main.h"
#include "application.h"


void application_init(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	c=0;
 80004ce:	4b32      	ldr	r3, [pc, #200]	; (8000598 <application_init+0xd0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
	status=0;
 80004d4:	4b31      	ldr	r3, [pc, #196]	; (800059c <application_init+0xd4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
	for (int i=0;i<ARRAYSIZE;i++){
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	e012      	b.n	8000506 <application_init+0x3e>
		ADC_values[i]=33+i;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	3321      	adds	r3, #33	; 0x21
 80004e6:	b299      	uxth	r1, r3
 80004e8:	4a2d      	ldr	r2, [pc, #180]	; (80005a0 <application_init+0xd8>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_Work_Buffer[i]=33+i;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	3321      	adds	r3, #33	; 0x21
 80004f6:	b299      	uxth	r1, r3
 80004f8:	4a2a      	ldr	r2, [pc, #168]	; (80005a4 <application_init+0xdc>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0;i<ARRAYSIZE;i++){
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3301      	adds	r3, #1
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b08      	cmp	r3, #8
 800050a:	dde9      	ble.n	80004e0 <application_init+0x18>
	}


	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_values, ARRAYSIZE); //Start the conversion
 800050c:	2209      	movs	r2, #9
 800050e:	4924      	ldr	r1, [pc, #144]	; (80005a0 <application_init+0xd8>)
 8000510:	4825      	ldr	r0, [pc, #148]	; (80005a8 <application_init+0xe0>)
 8000512:	f001 f85f 	bl	80015d4 <HAL_ADC_Start_DMA>
	channels[0] = 10;
 8000516:	4b25      	ldr	r3, [pc, #148]	; (80005ac <application_init+0xe4>)
 8000518:	220a      	movs	r2, #10
 800051a:	701a      	strb	r2, [r3, #0]
	channels[1] = 10;
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <application_init+0xe4>)
 800051e:	220a      	movs	r2, #10
 8000520:	705a      	strb	r2, [r3, #1]
	channels[2] = 10;
 8000522:	4b22      	ldr	r3, [pc, #136]	; (80005ac <application_init+0xe4>)
 8000524:	220a      	movs	r2, #10
 8000526:	709a      	strb	r2, [r3, #2]
	channels[3] = 10;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <application_init+0xe4>)
 800052a:	220a      	movs	r2, #10
 800052c:	70da      	strb	r2, [r3, #3]
	channels[4] = 10;
 800052e:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <application_init+0xe4>)
 8000530:	220a      	movs	r2, #10
 8000532:	711a      	strb	r2, [r3, #4]
	channels[5] = 10;
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <application_init+0xe4>)
 8000536:	220a      	movs	r2, #10
 8000538:	715a      	strb	r2, [r3, #5]
	channels[6] = 10;
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <application_init+0xe4>)
 800053c:	220a      	movs	r2, #10
 800053e:	719a      	strb	r2, [r3, #6]
	channels[7] = 10;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <application_init+0xe4>)
 8000542:	220a      	movs	r2, #10
 8000544:	71da      	strb	r2, [r3, #7]
	channels[8] = 10;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <application_init+0xe4>)
 8000548:	220a      	movs	r2, #10
 800054a:	721a      	strb	r2, [r3, #8]
	channels[9] = 10;
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <application_init+0xe4>)
 800054e:	220a      	movs	r2, #10
 8000550:	725a      	strb	r2, [r3, #9]

	keys[0] = 38; //Snare
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <application_init+0xe8>)
 8000554:	2226      	movs	r2, #38	; 0x26
 8000556:	701a      	strb	r2, [r3, #0]
	keys[1] = 50; //Hi-Tom
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <application_init+0xe8>)
 800055a:	2232      	movs	r2, #50	; 0x32
 800055c:	705a      	strb	r2, [r3, #1]
	keys[2] = 48; //Hi mid tom
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <application_init+0xe8>)
 8000560:	2230      	movs	r2, #48	; 0x30
 8000562:	709a      	strb	r2, [r3, #2]
	keys[3] = 47; //Lo mid tom
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <application_init+0xe8>)
 8000566:	222f      	movs	r2, #47	; 0x2f
 8000568:	70da      	strb	r2, [r3, #3]
	keys[4] = 45; //lo tom
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <application_init+0xe8>)
 800056c:	222d      	movs	r2, #45	; 0x2d
 800056e:	711a      	strb	r2, [r3, #4]
	keys[5] = 43; //hi floor tom
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <application_init+0xe8>)
 8000572:	222b      	movs	r2, #43	; 0x2b
 8000574:	715a      	strb	r2, [r3, #5]
	keys[6] = 41; //lo floor tom
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <application_init+0xe8>)
 8000578:	2229      	movs	r2, #41	; 0x29
 800057a:	719a      	strb	r2, [r3, #6]
	keys[7] = 49; //crash cymb 1
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <application_init+0xe8>)
 800057e:	2231      	movs	r2, #49	; 0x31
 8000580:	71da      	strb	r2, [r3, #7]
	keys[8] = 51; //ride cynb 1
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <application_init+0xe8>)
 8000584:	2233      	movs	r2, #51	; 0x33
 8000586:	721a      	strb	r2, [r3, #8]
	keys[9] = 57; //crash cymb 2
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <application_init+0xe8>)
 800058a:	2239      	movs	r2, #57	; 0x39
 800058c:	725a      	strb	r2, [r3, #9]
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000100 	.word	0x20000100
 800059c:	20000130 	.word	0x20000130
 80005a0:	20000104 	.word	0x20000104
 80005a4:	200000ec 	.word	0x200000ec
 80005a8:	20000228 	.word	0x20000228
 80005ac:	20000118 	.word	0x20000118
 80005b0:	20000124 	.word	0x20000124

080005b4 <application_loop>:
void application_loop(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	if(status==1){
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <application_loop+0x1c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d104      	bne.n	80005ca <application_loop+0x16>
		ADC_process();
 80005c0:	f000 f82c 	bl	800061c <ADC_process>
		status=0;
 80005c4:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <application_loop+0x1c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
	}
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000130 	.word	0x20000130

080005d4 <application_DMA_IRQ_Callback>:
void application_DMA_IRQ_Callback(){
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
	for(int i=0;i<ARRAYSIZE;i++){
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	e00a      	b.n	80005f6 <application_DMA_IRQ_Callback+0x22>
		ADC_Work_Buffer[i] = ADC_values[i];
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <application_DMA_IRQ_Callback+0x3c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <application_DMA_IRQ_Callback+0x40>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<ARRAYSIZE;i++){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3301      	adds	r3, #1
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b08      	cmp	r3, #8
 80005fa:	ddf1      	ble.n	80005e0 <application_DMA_IRQ_Callback+0xc>
	}
	status=1;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <application_DMA_IRQ_Callback+0x44>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000104 	.word	0x20000104
 8000614:	200000ec 	.word	0x200000ec
 8000618:	20000130 	.word	0x20000130

0800061c <ADC_process>:
void ADC_process(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	static uint16_t c[ARRAYSIZE], ADC_oldvalues[ARRAYSIZE];
	for (int i = 0; i < ARRAYSIZE; i++) {
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	e03e      	b.n	80006a6 <ADC_process+0x8a>
		if (c[i] > 0) {
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <ADC_process+0x98>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00a      	beq.n	800064a <ADC_process+0x2e>
			c[i]--;
 8000634:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <ADC_process+0x98>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063c:	3b01      	subs	r3, #1
 800063e:	b299      	uxth	r1, r3
 8000640:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <ADC_process+0x98>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			continue;
 8000648:	e02a      	b.n	80006a0 <ADC_process+0x84>
		}
		if (ADC_Work_Buffer[i] > TRIG && ADC_Work_Buffer[i] < ADC_oldvalues[i]) {
 800064a:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <ADC_process+0x9c>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000652:	2bc8      	cmp	r3, #200	; 0xc8
 8000654:	d91c      	bls.n	8000690 <ADC_process+0x74>
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <ADC_process+0x9c>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800065e:	4917      	ldr	r1, [pc, #92]	; (80006bc <ADC_process+0xa0>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000666:	429a      	cmp	r2, r3
 8000668:	d212      	bcs.n	8000690 <ADC_process+0x74>
			trigger(i, ADC_Work_Buffer[i]);
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <ADC_process+0x9c>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000672:	4619      	mov	r1, r3
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f823 	bl	80006c0 <trigger>
			c[i] = 10;
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <ADC_process+0x98>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	210a      	movs	r1, #10
 8000680:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ADC_oldvalues[i] = 0;
 8000684:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <ADC_process+0xa0>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2100      	movs	r1, #0
 800068a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			continue;
 800068e:	e007      	b.n	80006a0 <ADC_process+0x84>
		}
		else
			ADC_oldvalues[i] = ADC_Work_Buffer[i];
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <ADC_process+0x9c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000698:	4a08      	ldr	r2, [pc, #32]	; (80006bc <ADC_process+0xa0>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < ARRAYSIZE; i++) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3301      	adds	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	ddbd      	ble.n	8000628 <ADC_process+0xc>
	}
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000ac 	.word	0x200000ac
 80006b8:	200000ec 	.word	0x200000ec
 80006bc:	200000c0 	.word	0x200000c0

080006c0 <trigger>:


void trigger(int cuerpo, int veloc) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]

	static uint8_t fullCommand[3];//={0x90|channels[cuerpo], 0x7f & keys[cuerpo],0x7f & veloc};
	fullCommand[0] = channels[cuerpo] 	| 0x90;
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <trigger+0x50>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <trigger+0x54>)
 80006da:	701a      	strb	r2, [r3, #0]
	fullCommand[1] = keys[cuerpo] 		& 0x7f;
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <trigger+0x58>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <trigger+0x54>)
 80006ec:	705a      	strb	r2, [r3, #1]
	fullCommand[2] = veloc 				& 0x7f;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <trigger+0x54>)
 80006fa:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit_DMA(&huart3, fullCommand, sizeof(fullCommand));
 80006fc:	2203      	movs	r2, #3
 80006fe:	4905      	ldr	r1, [pc, #20]	; (8000714 <trigger+0x54>)
 8000700:	4806      	ldr	r0, [pc, #24]	; (800071c <trigger+0x5c>)
 8000702:	f005 fa65 	bl	8005bd0 <HAL_UART_Transmit_DMA>
	return;
 8000706:	bf00      	nop
}
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000118 	.word	0x20000118
 8000714:	200000d4 	.word	0x200000d4
 8000718:	20000124 	.word	0x20000124
 800071c:	20000134 	.word	0x20000134

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 fe7e 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f818 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 fa4e 	bl	8000bcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f000 fa16 	bl	8000b60 <MX_DMA_Init>
  MX_I2C1_Init();
 8000734:	f000 f956 	bl	80009e4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000738:	f000 f982 	bl	8000a40 <MX_I2S3_Init>
  MX_SPI1_Init();
 800073c:	f000 f9b0 	bl	8000aa0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000740:	f008 fd46 	bl	80091d0 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000744:	f000 f88c 	bl	8000860 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000748:	f000 f9e0 	bl	8000b0c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  application_init();
 800074c:	f7ff febc 	bl	80004c8 <application_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000750:	f008 fd64 	bl	800921c <MX_USB_HOST_Process>
    application_loop();
 8000754:	f7ff ff2e 	bl	80005b4 <application_loop>
    MX_USB_HOST_Process();
 8000758:	e7fa      	b.n	8000750 <main+0x30>
	...

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b098      	sub	sp, #96	; 0x60
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000766:	2230      	movs	r2, #48	; 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f009 f872 	bl	8009854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <SystemClock_Config+0xfc>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a30      	ldr	r2, [pc, #192]	; (8000858 <SystemClock_Config+0xfc>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <SystemClock_Config+0xfc>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <SystemClock_Config+0x100>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a2a      	ldr	r2, [pc, #168]	; (800085c <SystemClock_Config+0x100>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <SystemClock_Config+0x100>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007da:	2308      	movs	r3, #8
 80007dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007de:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fb9b 	bl	8004f2c <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007fc:	f000 fae4 	bl	8000dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	2105      	movs	r1, #5
 800081e:	4618      	mov	r0, r3
 8000820:	f004 fdf4 	bl	800540c <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800082a:	f000 facd 	bl	8000dc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800082e:	2301      	movs	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000832:	23c0      	movs	r3, #192	; 0xc0
 8000834:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4618      	mov	r0, r3
 8000840:	f004 ffd6 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800084a:	f000 fabd 	bl	8000dc8 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3760      	adds	r7, #96	; 0x60
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000872:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <MX_ADC1_Init+0x178>)
 8000874:	4a59      	ldr	r2, [pc, #356]	; (80009dc <MX_ADC1_Init+0x17c>)
 8000876:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000878:	4b57      	ldr	r3, [pc, #348]	; (80009d8 <MX_ADC1_Init+0x178>)
 800087a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000880:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <MX_ADC1_Init+0x178>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000886:	4b54      	ldr	r3, [pc, #336]	; (80009d8 <MX_ADC1_Init+0x178>)
 8000888:	2201      	movs	r2, #1
 800088a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800088c:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <MX_ADC1_Init+0x178>)
 800088e:	2201      	movs	r2, #1
 8000890:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000892:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <MX_ADC1_Init+0x178>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <MX_ADC1_Init+0x178>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a0:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <MX_ADC1_Init+0x178>)
 80008a2:	4a4f      	ldr	r2, [pc, #316]	; (80009e0 <MX_ADC1_Init+0x180>)
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a6:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <MX_ADC1_Init+0x178>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 80008ac:	4b4a      	ldr	r3, [pc, #296]	; (80009d8 <MX_ADC1_Init+0x178>)
 80008ae:	2209      	movs	r2, #9
 80008b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008b2:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <MX_ADC1_Init+0x178>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008ba:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <MX_ADC1_Init+0x178>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	4845      	ldr	r0, [pc, #276]	; (80009d8 <MX_ADC1_Init+0x178>)
 80008c2:	f000 fe43 	bl	800154c <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008cc:	f000 fa7c 	bl	8000dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008d8:	2302      	movs	r3, #2
 80008da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	483d      	ldr	r0, [pc, #244]	; (80009d8 <MX_ADC1_Init+0x178>)
 80008e2:	f000 ff87 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008ec:	f000 fa6c 	bl	8000dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	4836      	ldr	r0, [pc, #216]	; (80009d8 <MX_ADC1_Init+0x178>)
 80008fe:	f000 ff79 	bl	80017f4 <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000908:	f000 fa5e 	bl	8000dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800090c:	2303      	movs	r3, #3
 800090e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000910:	2303      	movs	r3, #3
 8000912:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	482f      	ldr	r0, [pc, #188]	; (80009d8 <MX_ADC1_Init+0x178>)
 800091a:	f000 ff6b 	bl	80017f4 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000924:	f000 fa50 	bl	8000dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000928:	2308      	movs	r3, #8
 800092a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800092c:	2304      	movs	r3, #4
 800092e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4828      	ldr	r0, [pc, #160]	; (80009d8 <MX_ADC1_Init+0x178>)
 8000936:	f000 ff5d 	bl	80017f4 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000940:	f000 fa42 	bl	8000dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000944:	2309      	movs	r3, #9
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000948:	2305      	movs	r3, #5
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <MX_ADC1_Init+0x178>)
 8000952:	f000 ff4f 	bl	80017f4 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800095c:	f000 fa34 	bl	8000dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000960:	230b      	movs	r3, #11
 8000962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000964:	2306      	movs	r3, #6
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	481a      	ldr	r0, [pc, #104]	; (80009d8 <MX_ADC1_Init+0x178>)
 800096e:	f000 ff41 	bl	80017f4 <HAL_ADC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000978:	f000 fa26 	bl	8000dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800097c:	230c      	movs	r3, #12
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000980:	2307      	movs	r3, #7
 8000982:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <MX_ADC1_Init+0x178>)
 800098a:	f000 ff33 	bl	80017f4 <HAL_ADC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000994:	f000 fa18 	bl	8000dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000998:	230e      	movs	r3, #14
 800099a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800099c:	2308      	movs	r3, #8
 800099e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_ADC1_Init+0x178>)
 80009a6:	f000 ff25 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80009b0:	f000 fa0a 	bl	8000dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009b4:	2310      	movs	r3, #16
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80009b8:	2309      	movs	r3, #9
 80009ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_ADC1_Init+0x178>)
 80009c2:	f000 ff17 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80009cc:	f000 f9fc 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000228 	.word	0x20000228
 80009dc:	40012000 	.word	0x40012000
 80009e0:	0f000001 	.word	0x0f000001

080009e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <MX_I2C1_Init+0x54>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_I2C1_Init+0x58>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a22:	f003 fcab 	bl	800437c <HAL_I2C_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f000 f9cc 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000174 	.word	0x20000174
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	000186a0 	.word	0x000186a0

08000a40 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <MX_I2S3_Init+0x58>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a50:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <MX_I2S3_Init+0x5c>)
 8000a6a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a80:	f003 fdb4 	bl	80045ec <HAL_I2S_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a8a:	f000 f99d 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000328 	.word	0x20000328
 8000a98:	40003c00 	.word	0x40003c00
 8000a9c:	00017700 	.word	0x00017700

08000aa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <MX_SPI1_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aec:	220a      	movs	r2, #10
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000af2:	f004 ffbb 	bl	8005a6c <HAL_SPI_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000afc:	f000 f964 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200002d0 	.word	0x200002d0
 8000b08:	40013000 	.word	0x40013000

08000b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART3_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 32250;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b18:	f647 52fa 	movw	r2, #32250	; 0x7dfa
 8000b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b44:	f004 fff6 	bl	8005b34 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f93b 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000134 	.word	0x20000134
 8000b5c:	40004800 	.word	0x40004800

08000b60 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_DMA_Init+0x68>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <MX_DMA_Init+0x68>)
 8000b70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_DMA_Init+0x68>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_DMA_Init+0x68>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <MX_DMA_Init+0x68>)
 8000b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_DMA_Init+0x68>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200e      	movs	r0, #14
 8000ba4:	f001 f9a1 	bl	8001eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ba8:	200e      	movs	r0, #14
 8000baa:	f001 f9ba 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2038      	movs	r0, #56	; 0x38
 8000bb4:	f001 f999 	bl	8001eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bb8:	2038      	movs	r0, #56	; 0x38
 8000bba:	f001 f9b2 	bl	8001f22 <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	4b71      	ldr	r3, [pc, #452]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a70      	ldr	r2, [pc, #448]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b6e      	ldr	r3, [pc, #440]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	4b6a      	ldr	r3, [pc, #424]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a69      	ldr	r2, [pc, #420]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b67      	ldr	r3, [pc, #412]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b63      	ldr	r3, [pc, #396]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a62      	ldr	r2, [pc, #392]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b60      	ldr	r3, [pc, #384]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a5b      	ldr	r2, [pc, #364]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b59      	ldr	r3, [pc, #356]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b55      	ldr	r3, [pc, #340]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a54      	ldr	r2, [pc, #336]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b52      	ldr	r3, [pc, #328]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a4d      	ldr	r2, [pc, #308]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <MX_GPIO_Init+0x1e0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	4848      	ldr	r0, [pc, #288]	; (8000db0 <MX_GPIO_Init+0x1e4>)
 8000c90:	f001 fe6a 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2101      	movs	r1, #1
 8000c98:	4846      	ldr	r0, [pc, #280]	; (8000db4 <MX_GPIO_Init+0x1e8>)
 8000c9a:	f001 fe65 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ca4:	4844      	ldr	r0, [pc, #272]	; (8000db8 <MX_GPIO_Init+0x1ec>)
 8000ca6:	f001 fe5f 	bl	8002968 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000caa:	2308      	movs	r3, #8
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	483b      	ldr	r0, [pc, #236]	; (8000db0 <MX_GPIO_Init+0x1e4>)
 8000cc2:	f001 fcb7 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4835      	ldr	r0, [pc, #212]	; (8000db4 <MX_GPIO_Init+0x1e8>)
 8000cde:	f001 fca9 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	482d      	ldr	r0, [pc, #180]	; (8000db4 <MX_GPIO_Init+0x1e8>)
 8000cfe:	f001 fc99 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d02:	2301      	movs	r3, #1
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_GPIO_Init+0x1f0>)
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	482a      	ldr	r0, [pc, #168]	; (8000dc0 <MX_GPIO_Init+0x1f4>)
 8000d16:	f001 fc8d 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4825      	ldr	r0, [pc, #148]	; (8000dc4 <MX_GPIO_Init+0x1f8>)
 8000d2e:	f001 fc81 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d44:	2305      	movs	r3, #5
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <MX_GPIO_Init+0x1f8>)
 8000d50:	f001 fc70 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000d54:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d58:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <MX_GPIO_Init+0x1ec>)
 8000d6e:	f001 fc61 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d72:	2320      	movs	r3, #32
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <MX_GPIO_Init+0x1ec>)
 8000d86:	f001 fc55 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_GPIO_Init+0x1f0>)
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_GPIO_Init+0x1e4>)
 8000d9e:	f001 fc49 	bl	8002634 <HAL_GPIO_Init>

}
 8000da2:	bf00      	nop
 8000da4:	3730      	adds	r7, #48	; 0x30
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020c00 	.word	0x40020c00
 8000dbc:	10120000 	.word	0x10120000
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e16:	2007      	movs	r0, #7
 8000e18:	f001 f85c 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a49      	ldr	r2, [pc, #292]	; (8000f6c <HAL_ADC_MspInit+0x144>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	f040 808c 	bne.w	8000f64 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	4a46      	ldr	r2, [pc, #280]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5c:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a3f      	ldr	r2, [pc, #252]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a38      	ldr	r2, [pc, #224]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8000ebc:	2336      	movs	r3, #54	; 0x36
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4829      	ldr	r0, [pc, #164]	; (8000f74 <HAL_ADC_MspInit+0x14c>)
 8000ed0:	f001 fbb0 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ed4:	230e      	movs	r3, #14
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4824      	ldr	r0, [pc, #144]	; (8000f78 <HAL_ADC_MspInit+0x150>)
 8000ee8:	f001 fba4 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eec:	2303      	movs	r3, #3
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	481f      	ldr	r0, [pc, #124]	; (8000f7c <HAL_ADC_MspInit+0x154>)
 8000f00:	f001 fb98 	bl	8002634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f06:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <HAL_ADC_MspInit+0x15c>)
 8000f08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f4a:	f001 f805 	bl	8001f58 <HAL_DMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000f54:	f7ff ff38 	bl	8000dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_ADC_MspInit+0x158>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3730      	adds	r7, #48	; 0x30
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40012000 	.word	0x40012000
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	20000270 	.word	0x20000270
 8000f84:	40026410 	.word	0x40026410

08000f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_I2C_MspInit+0x84>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12c      	bne.n	8001004 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_I2C_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_I2C_MspInit+0x88>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_I2C_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <HAL_I2C_MspInit+0x8c>)
 8000fe4:	f001 fb26 	bl	8002634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_I2C_MspInit+0x88>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_I2C_MspInit+0x88>)
 8000ff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_I2C_MspInit+0x88>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40005400 	.word	0x40005400
 8001010:	40023800 	.word	0x40023800
 8001014:	40020400 	.word	0x40020400

08001018 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <HAL_I2S_MspInit+0xc0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d14a      	bne.n	80010d0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_I2S_MspInit+0xc4>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_I2S_MspInit+0xc4>)
 8001044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_I2S_MspInit+0xc4>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_I2S_MspInit+0xc4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <HAL_I2S_MspInit+0xc4>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_I2S_MspInit+0xc4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_I2S_MspInit+0xc4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_I2S_MspInit+0xc4>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_I2S_MspInit+0xc4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800108e:	2310      	movs	r3, #16
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800109e:	2306      	movs	r3, #6
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <HAL_I2S_MspInit+0xc8>)
 80010aa:	f001 fac3 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010ae:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010c0:	2306      	movs	r3, #6
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <HAL_I2S_MspInit+0xcc>)
 80010cc:	f001 fab2 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40003c00 	.word	0x40003c00
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020800 	.word	0x40020800

080010e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_SPI_MspInit+0x84>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12b      	bne.n	8001162 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_SPI_MspInit+0x88>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_SPI_MspInit+0x88>)
 8001114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_SPI_MspInit+0x88>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_SPI_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_SPI_MspInit+0x88>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_SPI_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001142:	23e0      	movs	r3, #224	; 0xe0
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001152:	2305      	movs	r3, #5
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_SPI_MspInit+0x8c>)
 800115e:	f001 fa69 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40013000 	.word	0x40013000
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000

08001178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a40      	ldr	r2, [pc, #256]	; (8001298 <HAL_UART_MspInit+0x120>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d179      	bne.n	800128e <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b3f      	ldr	r3, [pc, #252]	; (800129c <HAL_UART_MspInit+0x124>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a3e      	ldr	r2, [pc, #248]	; (800129c <HAL_UART_MspInit+0x124>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <HAL_UART_MspInit+0x124>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <HAL_UART_MspInit+0x124>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a37      	ldr	r2, [pc, #220]	; (800129c <HAL_UART_MspInit+0x124>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <HAL_UART_MspInit+0x124>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_UART_MspInit+0x124>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a30      	ldr	r2, [pc, #192]	; (800129c <HAL_UART_MspInit+0x124>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <HAL_UART_MspInit+0x124>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001200:	2307      	movs	r3, #7
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4825      	ldr	r0, [pc, #148]	; (80012a0 <HAL_UART_MspInit+0x128>)
 800120c:	f001 fa12 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001222:	2307      	movs	r3, #7
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	481d      	ldr	r0, [pc, #116]	; (80012a4 <HAL_UART_MspInit+0x12c>)
 800122e:	f001 fa01 	bl	8002634 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_UART_MspInit+0x130>)
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_UART_MspInit+0x134>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_UART_MspInit+0x130>)
 800123a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800123e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_UART_MspInit+0x130>)
 8001242:	2240      	movs	r2, #64	; 0x40
 8001244:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_UART_MspInit+0x130>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_UART_MspInit+0x130>)
 800124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001252:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_UART_MspInit+0x130>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <HAL_UART_MspInit+0x130>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0x130>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_UART_MspInit+0x130>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_UART_MspInit+0x130>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <HAL_UART_MspInit+0x130>)
 8001274:	f000 fe70 	bl	8001f58 <HAL_DMA_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800127e:	f7ff fda3 	bl	8000dc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_UART_MspInit+0x130>)
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_UART_MspInit+0x130>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40004800 	.word	0x40004800
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	200001c8 	.word	0x200001c8
 80012ac:	40026058 	.word	0x40026058

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 f8e0 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <DMA1_Stream3_IRQHandler+0x10>)
 8001312:	f000 ff27 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200001c8 	.word	0x200001c8

08001320 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <DMA2_Stream0_IRQHandler+0x14>)
 8001326:	f000 ff1d 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  application_DMA_IRQ_Callback();
 800132a:	f7ff f953 	bl	80005d4 <application_DMA_IRQ_Callback>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000270 	.word	0x20000270

08001338 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <OTG_FS_IRQHandler+0x10>)
 800133e:	f001 fdbb 	bl	8002eb8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000074c 	.word	0x2000074c

0800134c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x50>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <_sbrk+0x16>
		heap_end = &end;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <_sbrk+0x50>)
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <_sbrk+0x54>)
 8001360:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <_sbrk+0x50>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <_sbrk+0x50>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	466a      	mov	r2, sp
 8001372:	4293      	cmp	r3, r2
 8001374:	d907      	bls.n	8001386 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001376:	f008 fa33 	bl	80097e0 <__errno>
 800137a:	4602      	mov	r2, r0
 800137c:	230c      	movs	r3, #12
 800137e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	e006      	b.n	8001394 <_sbrk+0x48>
	}

	heap_end += incr;
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <_sbrk+0x50>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a03      	ldr	r2, [pc, #12]	; (800139c <_sbrk+0x50>)
 8001390:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200000d8 	.word	0x200000d8
 80013a0:	20000a18 	.word	0x20000a18

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <SystemInit+0x28>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a07      	ldr	r2, [pc, #28]	; (80013cc <SystemInit+0x28>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SystemInit+0x28>)
 80013ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013be:	609a      	str	r2, [r3, #8]
#endif
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013d6:	e003      	b.n	80013e0 <LoopCopyDataInit>

080013d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013de:	3104      	adds	r1, #4

080013e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013e8:	d3f6      	bcc.n	80013d8 <CopyDataInit>
  ldr  r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013ec:	e002      	b.n	80013f4 <LoopFillZerobss>

080013ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013f0:	f842 3b04 	str.w	r3, [r2], #4

080013f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013f8:	d3f9      	bcc.n	80013ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013fa:	f7ff ffd3 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f008 f9f5 	bl	80097ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff f98d 	bl	8000720 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800140c:	08009a24 	.word	0x08009a24
  ldr  r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001414:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001418:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800141c:	20000a14 	.word	0x20000a14

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <HAL_Init+0x40>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_Init+0x40>)
 800143a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_Init+0x40>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 fd41 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fcbe 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023c00 	.word	0x40023c00

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fd59 	bl	8001f3e <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 fd21 	bl	8001eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000004 	.word	0x20000004

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000008 	.word	0x20000008
 80014ec:	20000370 	.word	0x20000370

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000370 	.word	0x20000370

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_Delay+0x40>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e033      	b.n	80015ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fc5c 	bl	8000e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d118      	bne.n	80015bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001592:	f023 0302 	bic.w	r3, r3, #2
 8001596:	f043 0202 	orr.w	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fa4a 	bl	8001a38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
 80015ba:	e001      	b.n	80015c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_Start_DMA+0x1e>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e0cc      	b.n	800178c <HAL_ADC_Start_DMA+0x1b8>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d018      	beq.n	800163a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001618:	4b5e      	ldr	r3, [pc, #376]	; (8001794 <HAL_ADC_Start_DMA+0x1c0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a5e      	ldr	r2, [pc, #376]	; (8001798 <HAL_ADC_Start_DMA+0x1c4>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0c9a      	lsrs	r2, r3, #18
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800162c:	e002      	b.n	8001634 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	3b01      	subs	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	f040 80a0 	bne.w	800178a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001674:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001688:	d106      	bne.n	8001698 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f023 0206 	bic.w	r2, r3, #6
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	645a      	str	r2, [r3, #68]	; 0x44
 8001696:	e002      	b.n	800169e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_ADC_Start_DMA+0x1c8>)
 80016a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	4a3c      	ldr	r2, [pc, #240]	; (80017a0 <HAL_ADC_Start_DMA+0x1cc>)
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b6:	4a3b      	ldr	r2, [pc, #236]	; (80017a4 <HAL_ADC_Start_DMA+0x1d0>)
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016be:	4a3a      	ldr	r2, [pc, #232]	; (80017a8 <HAL_ADC_Start_DMA+0x1d4>)
 80016c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	334c      	adds	r3, #76	; 0x4c
 80016f6:	4619      	mov	r1, r3
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f000 fcda 	bl	80020b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2b00      	cmp	r3, #0
 800170a:	d12a      	bne.n	8001762 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_ADC_Start_DMA+0x1d8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d015      	beq.n	8001742 <HAL_ADC_Start_DMA+0x16e>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a25      	ldr	r2, [pc, #148]	; (80017b0 <HAL_ADC_Start_DMA+0x1dc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d105      	bne.n	800172c <HAL_ADC_Start_DMA+0x158>
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_ADC_Start_DMA+0x1c8>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00a      	beq.n	8001742 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <HAL_ADC_Start_DMA+0x1e0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d129      	bne.n	800178a <HAL_ADC_Start_DMA+0x1b6>
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_ADC_Start_DMA+0x1c8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	2b0f      	cmp	r3, #15
 8001740:	d823      	bhi.n	800178a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11c      	bne.n	800178a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	e013      	b.n	800178a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_ADC_Start_DMA+0x1d8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d10e      	bne.n	800178a <HAL_ADC_Start_DMA+0x1b6>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001788:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000000 	.word	0x20000000
 8001798:	431bde83 	.word	0x431bde83
 800179c:	40012300 	.word	0x40012300
 80017a0:	08001c31 	.word	0x08001c31
 80017a4:	08001ceb 	.word	0x08001ceb
 80017a8:	08001d07 	.word	0x08001d07
 80017ac:	40012000 	.word	0x40012000
 80017b0:	40012100 	.word	0x40012100
 80017b4:	40012200 	.word	0x40012200

080017b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1c>
 800180c:	2302      	movs	r3, #2
 800180e:	e105      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x228>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b09      	cmp	r3, #9
 800181e:	d925      	bls.n	800186c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68d9      	ldr	r1, [r3, #12]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	3b1e      	subs	r3, #30
 8001836:	2207      	movs	r2, #7
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43da      	mvns	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	400a      	ands	r2, r1
 8001844:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68d9      	ldr	r1, [r3, #12]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	4603      	mov	r3, r0
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4403      	add	r3, r0
 800185e:	3b1e      	subs	r3, #30
 8001860:	409a      	lsls	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	e022      	b.n	80018b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	2207      	movs	r2, #7
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	400a      	ands	r2, r1
 800188e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6919      	ldr	r1, [r3, #16]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4403      	add	r3, r0
 80018a8:	409a      	lsls	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d824      	bhi.n	8001904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b05      	subs	r3, #5
 80018cc:	221f      	movs	r2, #31
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	400a      	ands	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b05      	subs	r3, #5
 80018f6:	fa00 f203 	lsl.w	r2, r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
 8001902:	e04c      	b.n	800199e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d824      	bhi.n	8001956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	3b23      	subs	r3, #35	; 0x23
 800191e:	221f      	movs	r2, #31
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43da      	mvns	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	400a      	ands	r2, r1
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b23      	subs	r3, #35	; 0x23
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
 8001954:	e023      	b.n	800199e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	3b41      	subs	r3, #65	; 0x41
 8001968:	221f      	movs	r2, #31
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	400a      	ands	r2, r1
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b41      	subs	r3, #65	; 0x41
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_ADC_ConfigChannel+0x234>)
 80019a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <HAL_ADC_ConfigChannel+0x238>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d109      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1cc>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b12      	cmp	r3, #18
 80019b2:	d105      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <HAL_ADC_ConfigChannel+0x238>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d123      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x21e>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d003      	beq.n	80019da <HAL_ADC_ConfigChannel+0x1e6>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b11      	cmp	r3, #17
 80019d8:	d11b      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b10      	cmp	r3, #16
 80019ec:	d111      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_ADC_ConfigChannel+0x23c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_ADC_ConfigChannel+0x240>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	0c9a      	lsrs	r2, r3, #18
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a04:	e002      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f9      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40012300 	.word	0x40012300
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	20000000 	.word	0x20000000
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a40:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <ADC_Init+0x1f0>)
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	021a      	lsls	r2, r3, #8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <ADC_Init+0x1f4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ade:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	e00f      	b.n	8001b36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0202 	bic.w	r2, r2, #2
 8001b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6899      	ldr	r1, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7e1b      	ldrb	r3, [r3, #24]
 8001b50:	005a      	lsls	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01b      	beq.n	8001b9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	035a      	lsls	r2, r3, #13
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	e007      	b.n	8001bac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001baa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	051a      	lsls	r2, r3, #20
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bee:	025a      	lsls	r2, r3, #9
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6899      	ldr	r1, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	029a      	lsls	r2, r3, #10
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	609a      	str	r2, [r3, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40012300 	.word	0x40012300
 8001c2c:	0f000001 	.word	0x0f000001

08001c30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d13c      	bne.n	8001cc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d12b      	bne.n	8001cbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d127      	bne.n	8001cbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d119      	bne.n	8001cbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0220 	bic.w	r2, r2, #32
 8001c96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f7ff fd7b 	bl	80017b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001cc2:	e00e      	b.n	8001ce2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff fd85 	bl	80017e0 <HAL_ADC_ErrorCallback>
}
 8001cd6:	e004      	b.n	8001ce2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff fd67 	bl	80017cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2240      	movs	r2, #64	; 0x40
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f043 0204 	orr.w	r2, r3, #4
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff fd5a 	bl	80017e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0b      	blt.n	8001dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	4907      	ldr	r1, [pc, #28]	; (8001dd0 <__NVIC_EnableIRQ+0x38>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f202 	lsl.w	r2, r0, r2
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea0:	d301      	bcc.n	8001ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <SysTick_Config+0x40>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f7ff ff8e 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <SysTick_Config+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <SysTick_Config+0x40>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff29 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff3e 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff8e 	bl	8001e28 <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff31 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffa2 	bl	8001e90 <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff fac4 	bl	80014f0 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e099      	b.n	80020a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f94:	e00f      	b.n	8001fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f96:	f7ff faab 	bl	80014f0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d908      	bls.n	8001fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e078      	b.n	80020a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e8      	bne.n	8001f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <HAL_DMA_Init+0x158>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4313      	orrs	r3, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f023 0307 	bic.w	r3, r3, #7
 8002036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2b04      	cmp	r3, #4
 8002048:	d117      	bne.n	800207a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00e      	beq.n	800207a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fa6f 	bl	8002540 <DMA_CheckFifoParam>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2240      	movs	r2, #64	; 0x40
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002076:	2301      	movs	r3, #1
 8002078:	e016      	b.n	80020a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fa26 	bl	80024d4 <DMA_CalcBaseAndBitshift>
 8002088:	4603      	mov	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	223f      	movs	r2, #63	; 0x3f
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	f010803f 	.word	0xf010803f

080020b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_DMA_Start_IT+0x26>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e040      	b.n	800215c <HAL_DMA_Start_IT+0xa8>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d12f      	bne.n	800214e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f9b8 	bl	8002478 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	223f      	movs	r2, #63	; 0x3f
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0216 	orr.w	r2, r2, #22
 8002122:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0208 	orr.w	r2, r2, #8
 800213a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e005      	b.n	800215a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800215a:	7dfb      	ldrb	r3, [r7, #23]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002170:	4b92      	ldr	r3, [pc, #584]	; (80023bc <HAL_DMA_IRQHandler+0x258>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a92      	ldr	r2, [pc, #584]	; (80023c0 <HAL_DMA_IRQHandler+0x25c>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a9b      	lsrs	r3, r3, #10
 800217c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	2208      	movs	r2, #8
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	2208      	movs	r2, #8
 80021be:	409a      	lsls	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2201      	movs	r2, #1
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2201      	movs	r2, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f043 0202 	orr.w	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	2204      	movs	r2, #4
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2210      	movs	r2, #16
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d043      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03c      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2210      	movs	r2, #16
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d108      	bne.n	8002294 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d024      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
 8002292:	e01f      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01b      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0208 	bic.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2220      	movs	r2, #32
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 808e 	beq.w	8002402 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8086 	beq.w	8002402 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	2220      	movs	r2, #32
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d136      	bne.n	800237c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0216 	bic.w	r2, r2, #22
 800231c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800232c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_DMA_IRQHandler+0x1da>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	223f      	movs	r2, #63	; 0x3f
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d07d      	beq.n	800246e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
        }
        return;
 800237a:	e078      	b.n	800246e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01c      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d108      	bne.n	80023aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	2b00      	cmp	r3, #0
 800239e:	d030      	beq.n	8002402 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e02b      	b.n	8002402 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d027      	beq.n	8002402 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
 80023ba:	e022      	b.n	8002402 <HAL_DMA_IRQHandler+0x29e>
 80023bc:	20000000 	.word	0x20000000
 80023c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10f      	bne.n	80023f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0210 	bic.w	r2, r2, #16
 80023e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	2b00      	cmp	r3, #0
 8002408:	d032      	beq.n	8002470 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d022      	beq.n	800245c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2205      	movs	r2, #5
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0201 	bic.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	429a      	cmp	r2, r3
 8002438:	d307      	bcc.n	800244a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f2      	bne.n	800242e <HAL_DMA_IRQHandler+0x2ca>
 8002448:	e000      	b.n	800244c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800244a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
 800246c:	e000      	b.n	8002470 <HAL_DMA_IRQHandler+0x30c>
        return;
 800246e:	bf00      	nop
    }
  }
}
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop

08002478 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002494:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b40      	cmp	r3, #64	; 0x40
 80024a4:	d108      	bne.n	80024b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024b6:	e007      	b.n	80024c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	60da      	str	r2, [r3, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3b10      	subs	r3, #16
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <DMA_CalcBaseAndBitshift+0x64>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <DMA_CalcBaseAndBitshift+0x68>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d909      	bls.n	8002516 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	1d1a      	adds	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	; 0x58
 8002514:	e007      	b.n	8002526 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	aaaaaaab 	.word	0xaaaaaaab
 800253c:	08009a0c 	.word	0x08009a0c

08002540 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11f      	bne.n	800259a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d855      	bhi.n	800260c <DMA_CheckFifoParam+0xcc>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <DMA_CheckFifoParam+0x28>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	08002579 	.word	0x08002579
 800256c:	0800258b 	.word	0x0800258b
 8002570:	08002579 	.word	0x08002579
 8002574:	0800260d 	.word	0x0800260d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d045      	beq.n	8002610 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002588:	e042      	b.n	8002610 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002592:	d13f      	bne.n	8002614 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e03c      	b.n	8002614 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a2:	d121      	bne.n	80025e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d836      	bhi.n	8002618 <DMA_CheckFifoParam+0xd8>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <DMA_CheckFifoParam+0x70>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	080025c7 	.word	0x080025c7
 80025b8:	080025c1 	.word	0x080025c1
 80025bc:	080025d9 	.word	0x080025d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e02f      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d024      	beq.n	800261c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d6:	e021      	b.n	800261c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025e0:	d11e      	bne.n	8002620 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025e6:	e01b      	b.n	8002620 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <DMA_CheckFifoParam+0xb4>
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d003      	beq.n	80025fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025f2:	e018      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e015      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      break;
 800260a:	e00b      	b.n	8002624 <DMA_CheckFifoParam+0xe4>
      break;
 800260c:	bf00      	nop
 800260e:	e00a      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 8002610:	bf00      	nop
 8002612:	e008      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 8002614:	bf00      	nop
 8002616:	e006      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 8002618:	bf00      	nop
 800261a:	e004      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 800261c:	bf00      	nop
 800261e:	e002      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;   
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 8002624:	bf00      	nop
    }
  } 
  
  return status; 
 8002626:	7bfb      	ldrb	r3, [r7, #15]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e16b      	b.n	8002928 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	f040 815a 	bne.w	8002922 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d00b      	beq.n	800268e <HAL_GPIO_Init+0x5a>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d007      	beq.n	800268e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002682:	2b11      	cmp	r3, #17
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b12      	cmp	r3, #18
 800268c:	d130      	bne.n	80026f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0201 	and.w	r2, r3, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0xfc>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b12      	cmp	r3, #18
 800272e:	d123      	bne.n	8002778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	08da      	lsrs	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3208      	adds	r2, #8
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80b4 	beq.w	8002922 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b5f      	ldr	r3, [pc, #380]	; (800293c <HAL_GPIO_Init+0x308>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a5e      	ldr	r2, [pc, #376]	; (800293c <HAL_GPIO_Init+0x308>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b5c      	ldr	r3, [pc, #368]	; (800293c <HAL_GPIO_Init+0x308>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d6:	4a5a      	ldr	r2, [pc, #360]	; (8002940 <HAL_GPIO_Init+0x30c>)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	220f      	movs	r2, #15
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a51      	ldr	r2, [pc, #324]	; (8002944 <HAL_GPIO_Init+0x310>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d02b      	beq.n	800285a <HAL_GPIO_Init+0x226>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a50      	ldr	r2, [pc, #320]	; (8002948 <HAL_GPIO_Init+0x314>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d025      	beq.n	8002856 <HAL_GPIO_Init+0x222>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4f      	ldr	r2, [pc, #316]	; (800294c <HAL_GPIO_Init+0x318>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01f      	beq.n	8002852 <HAL_GPIO_Init+0x21e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4e      	ldr	r2, [pc, #312]	; (8002950 <HAL_GPIO_Init+0x31c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d019      	beq.n	800284e <HAL_GPIO_Init+0x21a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4d      	ldr	r2, [pc, #308]	; (8002954 <HAL_GPIO_Init+0x320>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_Init+0x216>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4c      	ldr	r2, [pc, #304]	; (8002958 <HAL_GPIO_Init+0x324>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_GPIO_Init+0x212>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4b      	ldr	r2, [pc, #300]	; (800295c <HAL_GPIO_Init+0x328>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_Init+0x20e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4a      	ldr	r2, [pc, #296]	; (8002960 <HAL_GPIO_Init+0x32c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_GPIO_Init+0x20a>
 800283a:	2307      	movs	r3, #7
 800283c:	e00e      	b.n	800285c <HAL_GPIO_Init+0x228>
 800283e:	2308      	movs	r3, #8
 8002840:	e00c      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002842:	2306      	movs	r3, #6
 8002844:	e00a      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002846:	2305      	movs	r3, #5
 8002848:	e008      	b.n	800285c <HAL_GPIO_Init+0x228>
 800284a:	2304      	movs	r3, #4
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x228>
 800284e:	2303      	movs	r3, #3
 8002850:	e004      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002852:	2302      	movs	r3, #2
 8002854:	e002      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_GPIO_Init+0x228>
 800285a:	2300      	movs	r3, #0
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f002 0203 	and.w	r2, r2, #3
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	4093      	lsls	r3, r2
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800286c:	4934      	ldr	r1, [pc, #208]	; (8002940 <HAL_GPIO_Init+0x30c>)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	3302      	adds	r3, #2
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287a:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <HAL_GPIO_Init+0x330>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289e:	4a31      	ldr	r2, [pc, #196]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c8:	4a26      	ldr	r2, [pc, #152]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ce:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <HAL_GPIO_Init+0x330>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3301      	adds	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	f67f ae90 	bls.w	8002650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002930:	bf00      	nop
 8002932:	3724      	adds	r7, #36	; 0x24
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	40023800 	.word	0x40023800
 8002940:	40013800 	.word	0x40013800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	40021400 	.word	0x40021400
 800295c:	40021800 	.word	0x40021800
 8002960:	40021c00 	.word	0x40021c00
 8002964:	40013c00 	.word	0x40013c00

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002984:	e003      	b.n	800298e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002986:	887b      	ldrh	r3, [r7, #2]
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800299a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299c:	b08f      	sub	sp, #60	; 0x3c
 800299e:	af0a      	add	r7, sp, #40	; 0x28
 80029a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e054      	b.n	8002a56 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f006 fc60 	bl	800928c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2203      	movs	r2, #3
 80029d0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 fe1e 	bl	800662c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	687e      	ldr	r6, [r7, #4]
 80029f8:	466d      	mov	r5, sp
 80029fa:	f106 0410 	add.w	r4, r6, #16
 80029fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a0e:	1d33      	adds	r3, r6, #4
 8002a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a12:	6838      	ldr	r0, [r7, #0]
 8002a14:	f003 fd98 	bl	8006548 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 fe15 	bl	800664e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	687e      	ldr	r6, [r7, #4]
 8002a2c:	466d      	mov	r5, sp
 8002a2e:	f106 0410 	add.w	r4, r6, #16
 8002a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a42:	1d33      	adds	r3, r6, #4
 8002a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a46:	6838      	ldr	r0, [r7, #0]
 8002a48:	f003 ff28 	bl	800689c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a5e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002a5e:	b590      	push	{r4, r7, lr}
 8002a60:	b089      	sub	sp, #36	; 0x24
 8002a62:	af04      	add	r7, sp, #16
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	4608      	mov	r0, r1
 8002a68:	4611      	mov	r1, r2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	70fb      	strb	r3, [r7, #3]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70bb      	strb	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_HCD_HC_Init+0x28>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e07f      	b.n	8002b86 <HAL_HCD_HC_Init+0x128>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	333d      	adds	r3, #61	; 0x3d
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	3338      	adds	r3, #56	; 0x38
 8002ab2:	787a      	ldrb	r2, [r7, #1]
 8002ab4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3340      	adds	r3, #64	; 0x40
 8002ac6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ac8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3339      	adds	r3, #57	; 0x39
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	333f      	adds	r3, #63	; 0x3f
 8002aee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002af2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	78bb      	ldrb	r3, [r7, #2]
 8002af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002afc:	b2d8      	uxtb	r0, r3
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	333a      	adds	r3, #58	; 0x3a
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002b10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	da0a      	bge.n	8002b2e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	333b      	adds	r3, #59	; 0x3b
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e009      	b.n	8002b42 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	333b      	adds	r3, #59	; 0x3b
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	333c      	adds	r3, #60	; 0x3c
 8002b52:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b56:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	787c      	ldrb	r4, [r7, #1]
 8002b5e:	78ba      	ldrb	r2, [r7, #2]
 8002b60:	78f9      	ldrb	r1, [r7, #3]
 8002b62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b64:	9302      	str	r3, [sp, #8]
 8002b66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	4623      	mov	r3, r4
 8002b74:	f004 f814 	bl	8006ba0 <USB_HC_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}

08002b8e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_HCD_HC_Halt+0x1e>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e00f      	b.n	8002bcc <HAL_HCD_HC_Halt+0x3e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f004 fa4e 	bl	800705e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	4608      	mov	r0, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	461a      	mov	r2, r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	70fb      	strb	r3, [r7, #3]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70bb      	strb	r3, [r7, #2]
 8002bea:	4613      	mov	r3, r2
 8002bec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	333b      	adds	r3, #59	; 0x3b
 8002bfe:	78ba      	ldrb	r2, [r7, #2]
 8002c00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	333f      	adds	r3, #63	; 0x3f
 8002c12:	787a      	ldrb	r2, [r7, #1]
 8002c14:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c16:	7c3b      	ldrb	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d114      	bne.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3342      	adds	r3, #66	; 0x42
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	333d      	adds	r3, #61	; 0x3d
 8002c40:	7f3a      	ldrb	r2, [r7, #28]
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e009      	b.n	8002c5a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	3342      	adds	r3, #66	; 0x42
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c5a:	787b      	ldrb	r3, [r7, #1]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	f200 80d6 	bhi.w	8002e0e <HAL_HCD_HC_SubmitRequest+0x23a>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002df9 	.word	0x08002df9
 8002c70:	08002ce5 	.word	0x08002ce5
 8002c74:	08002d6f 	.word	0x08002d6f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002c78:	7c3b      	ldrb	r3, [r7, #16]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	f040 80c9 	bne.w	8002e12 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002c80:	78bb      	ldrb	r3, [r7, #2]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 80c5 	bne.w	8002e12 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002c88:	8b3b      	ldrh	r3, [r7, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3351      	adds	r3, #81	; 0x51
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	3351      	adds	r3, #81	; 0x51
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3342      	adds	r3, #66	; 0x42
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ccc:	e0a1      	b.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3342      	adds	r3, #66	; 0x42
 8002cde:	2202      	movs	r2, #2
 8002ce0:	701a      	strb	r2, [r3, #0]
      break;
 8002ce2:	e096      	b.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ce4:	78bb      	ldrb	r3, [r7, #2]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d120      	bne.n	8002d2c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3351      	adds	r3, #81	; 0x51
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3342      	adds	r3, #66	; 0x42
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d14:	e07e      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	440b      	add	r3, r1
 8002d24:	3342      	adds	r3, #66	; 0x42
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
      break;
 8002d2a:	e073      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3350      	adds	r3, #80	; 0x50
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	3342      	adds	r3, #66	; 0x42
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
      break;
 8002d56:	e05d      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	3342      	adds	r3, #66	; 0x42
 8002d68:	2202      	movs	r2, #2
 8002d6a:	701a      	strb	r2, [r3, #0]
      break;
 8002d6c:	e052      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d6e:	78bb      	ldrb	r3, [r7, #2]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d120      	bne.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	3351      	adds	r3, #81	; 0x51
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	3342      	adds	r3, #66	; 0x42
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d9e:	e039      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	3342      	adds	r3, #66	; 0x42
 8002db0:	2202      	movs	r2, #2
 8002db2:	701a      	strb	r2, [r3, #0]
      break;
 8002db4:	e02e      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3350      	adds	r3, #80	; 0x50
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	3342      	adds	r3, #66	; 0x42
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
      break;
 8002de0:	e018      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	3342      	adds	r3, #66	; 0x42
 8002df2:	2202      	movs	r2, #2
 8002df4:	701a      	strb	r2, [r3, #0]
      break;
 8002df6:	e00d      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	3342      	adds	r3, #66	; 0x42
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
      break;
 8002e0c:	e002      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002e12:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	3344      	adds	r3, #68	; 0x44
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	8b39      	ldrh	r1, [r7, #24]
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4403      	add	r3, r0
 8002e38:	3348      	adds	r3, #72	; 0x48
 8002e3a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	335c      	adds	r3, #92	; 0x5c
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	334c      	adds	r3, #76	; 0x4c
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3339      	adds	r3, #57	; 0x39
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	335d      	adds	r3, #93	; 0x5d
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	3338      	adds	r3, #56	; 0x38
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	18d1      	adds	r1, r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f003 ff84 	bl	8006db4 <USB_HC_StartXfer>
 8002eac:	4603      	mov	r3, r0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop

08002eb8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fca1 	bl	8006816 <USB_GetMode>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	f040 80ef 	bne.w	80030ba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 fc85 	bl	80067f0 <USB_ReadInterrupts>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80e5 	beq.w	80030b8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fc7c 	bl	80067f0 <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f02:	d104      	bne.n	8002f0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fc6c 	bl	80067f0 <USB_ReadInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f22:	d104      	bne.n	8002f2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 fc5c 	bl	80067f0 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f42:	d104      	bne.n	8002f4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fc4c 	bl	80067f0 <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d103      	bne.n	8002f6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2202      	movs	r2, #2
 8002f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 fc3e 	bl	80067f0 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f7e:	d115      	bne.n	8002fac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d108      	bne.n	8002fac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f006 f9f4 	bl	8009388 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fd34 	bl	8006a14 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f003 fc1d 	bl	80067f0 <USB_ReadInterrupts>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc0:	d102      	bne.n	8002fc8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f001 f966 	bl	8004294 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fc0f 	bl	80067f0 <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d106      	bne.n	8002fea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f006 f9b7 	bl	8009350 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f003 fbfe 	bl	80067f0 <USB_ReadInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ffe:	d138      	bne.n	8003072 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f004 f819 	bl	800703c <USB_HC_ReadInterrupt>
 800300a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e025      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d018      	beq.n	8003058 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303c:	d106      	bne.n	800304c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f8cf 	bl	80031e8 <HCD_HC_IN_IRQHandler>
 800304a:	e005      	b.n	8003058 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fcfd 	bl	8003a52 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3301      	adds	r3, #1
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	429a      	cmp	r2, r3
 8003066:	d3d4      	bcc.n	8003012 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fbba 	bl	80067f0 <USB_ReadInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b10      	cmp	r3, #16
 8003084:	d101      	bne.n	800308a <HAL_HCD_IRQHandler+0x1d2>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_HCD_IRQHandler+0x1d4>
 800308a:	2300      	movs	r3, #0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d014      	beq.n	80030ba <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0210 	bic.w	r2, r2, #16
 800309e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f001 f84b 	bl	800413c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699a      	ldr	r2, [r3, #24]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0210 	orr.w	r2, r2, #16
 80030b4:	619a      	str	r2, [r3, #24]
 80030b6:	e000      	b.n	80030ba <HAL_HCD_IRQHandler+0x202>
      return;
 80030b8:	bf00      	nop
    }
  }
}
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_HCD_Start+0x16>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e013      	b.n	80030fe <HAL_HCD_Start+0x3e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fa91 	bl	800660a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 fcf4 	bl	8006adc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_HCD_Stop+0x16>
 8003118:	2302      	movs	r3, #2
 800311a:	e00d      	b.n	8003138 <HAL_HCD_Stop+0x32>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f004 f8d3 	bl	80072d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f003 fc9b 	bl	8006a88 <USB_ResetPort>
 8003152:	4603      	mov	r3, r0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	335c      	adds	r3, #92	; 0x5c
 8003178:	781b      	ldrb	r3, [r3, #0]
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	334c      	adds	r3, #76	; 0x4c
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 fcdd 	bl	8006b7c <USB_GetCurrentFrame>
 80031c2:	4603      	mov	r3, r0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fcb8 	bl	8006b4e <USB_GetHostSpeed>
 80031de:	4603      	mov	r3, r0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d119      	bne.n	800324c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003224:	461a      	mov	r2, r3
 8003226:	2304      	movs	r3, #4
 8003228:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	0151      	lsls	r1, r2, #5
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	440a      	add	r2, r1
 8003240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	60d3      	str	r3, [r2, #12]
 800324a:	e0ce      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	d12c      	bne.n	80032be <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003270:	461a      	mov	r2, r3
 8003272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003276:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	335d      	adds	r3, #93	; 0x5d
 8003288:	2207      	movs	r2, #7
 800328a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	0151      	lsls	r1, r2, #5
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	440a      	add	r2, r1
 80032a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 fed1 	bl	800705e <USB_HC_Halt>
 80032bc:	e095      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d109      	bne.n	80032e8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	461a      	mov	r2, r3
 80032e2:	2320      	movs	r3, #32
 80032e4:	6093      	str	r3, [r2, #8]
 80032e6:	e080      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d134      	bne.n	8003368 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	0151      	lsls	r1, r2, #5
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	440a      	add	r2, r1
 8003314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	335d      	adds	r3, #93	; 0x5d
 800332e:	2205      	movs	r2, #5
 8003330:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4413      	add	r3, r2
 800333a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333e:	461a      	mov	r2, r3
 8003340:	2310      	movs	r3, #16
 8003342:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	461a      	mov	r2, r3
 8003352:	2308      	movs	r3, #8
 8003354:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f003 fe7c 	bl	800705e <USB_HC_Halt>
 8003366:	e040      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337e:	d134      	bne.n	80033ea <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	0151      	lsls	r1, r2, #5
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	440a      	add	r2, r1
 8003396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fe57 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2310      	movs	r3, #16
 80033c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	335d      	adds	r3, #93	; 0x5d
 80033d2:	2208      	movs	r2, #8
 80033d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e2:	461a      	mov	r2, r3
 80033e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003400:	d122      	bne.n	8003448 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	0151      	lsls	r1, r2, #5
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	440a      	add	r2, r1
 8003418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f003 fe16 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	461a      	mov	r2, r3
 8003440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003444:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003446:	e300      	b.n	8003a4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	f040 80fd 	bne.w	800365a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	3348      	adds	r3, #72	; 0x48
 8003478:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	0159      	lsls	r1, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	440b      	add	r3, r1
 8003482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800348c:	1ad1      	subs	r1, r2, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4403      	add	r3, r0
 800349c:	334c      	adds	r3, #76	; 0x4c
 800349e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	335d      	adds	r3, #93	; 0x5d
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3358      	adds	r3, #88	; 0x58
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	461a      	mov	r2, r3
 80034d6:	2301      	movs	r3, #1
 80034d8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	333f      	adds	r3, #63	; 0x3f
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	333f      	adds	r3, #63	; 0x3f
 8003500:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003502:	2b02      	cmp	r3, #2
 8003504:	d121      	bne.n	800354a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	0151      	lsls	r1, r2, #5
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	440a      	add	r2, r1
 800351c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f003 fd94 	bl	800705e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003542:	461a      	mov	r2, r3
 8003544:	2310      	movs	r3, #16
 8003546:	6093      	str	r3, [r2, #8]
 8003548:	e070      	b.n	800362c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	333f      	adds	r3, #63	; 0x3f
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d12a      	bne.n	80035b6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	440a      	add	r2, r1
 8003576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800357a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800357e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	335c      	adds	r3, #92	; 0x5c
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	b2d8      	uxtb	r0, r3
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	440b      	add	r3, r1
 80035a6:	335c      	adds	r3, #92	; 0x5c
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4601      	mov	r1, r0
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f005 fef8 	bl	80093a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035b4:	e03a      	b.n	800362c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	440b      	add	r3, r1
 80035c4:	333f      	adds	r3, #63	; 0x3f
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d12f      	bne.n	800362c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	440b      	add	r3, r1
 80035da:	335c      	adds	r3, #92	; 0x5c
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	3350      	adds	r3, #80	; 0x50
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	440b      	add	r3, r1
 8003606:	3350      	adds	r3, #80	; 0x50
 8003608:	4602      	mov	r2, r0
 800360a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	b2d8      	uxtb	r0, r3
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	335c      	adds	r3, #92	; 0x5c
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	4601      	mov	r1, r0
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f005 febc 	bl	80093a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	3350      	adds	r3, #80	; 0x50
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	f083 0301 	eor.w	r3, r3, #1
 8003642:	b2d8      	uxtb	r0, r3
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	440b      	add	r3, r1
 8003652:	3350      	adds	r3, #80	; 0x50
 8003654:	4602      	mov	r2, r0
 8003656:	701a      	strb	r2, [r3, #0]
}
 8003658:	e1f7      	b.n	8003a4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4413      	add	r3, r2
 8003662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b02      	cmp	r3, #2
 800366e:	f040 811a 	bne.w	80038a6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	0151      	lsls	r1, r2, #5
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	440a      	add	r2, r1
 8003688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800368c:	f023 0302 	bic.w	r3, r3, #2
 8003690:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	335d      	adds	r3, #93	; 0x5d
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10a      	bne.n	80036be <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	335c      	adds	r3, #92	; 0x5c
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e0d9      	b.n	8003872 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	335d      	adds	r3, #93	; 0x5d
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b05      	cmp	r3, #5
 80036d2:	d10a      	bne.n	80036ea <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	335c      	adds	r3, #92	; 0x5c
 80036e4:	2205      	movs	r2, #5
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e0c3      	b.n	8003872 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	335d      	adds	r3, #93	; 0x5d
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b06      	cmp	r3, #6
 80036fe:	d00a      	beq.n	8003716 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	335d      	adds	r3, #93	; 0x5d
 8003710:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003712:	2b08      	cmp	r3, #8
 8003714:	d156      	bne.n	80037c4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	440b      	add	r3, r1
 8003724:	3358      	adds	r3, #88	; 0x58
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1c59      	adds	r1, r3, #1
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4403      	add	r3, r0
 8003738:	3358      	adds	r3, #88	; 0x58
 800373a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	3358      	adds	r3, #88	; 0x58
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d914      	bls.n	800377c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	440b      	add	r3, r1
 8003760:	3358      	adds	r3, #88	; 0x58
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	335c      	adds	r3, #92	; 0x5c
 8003776:	2204      	movs	r2, #4
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e009      	b.n	8003790 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	335c      	adds	r3, #92	; 0x5c
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e056      	b.n	8003872 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	335d      	adds	r3, #93	; 0x5d
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d123      	bne.n	8003822 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	335c      	adds	r3, #92	; 0x5c
 80037ea:	2202      	movs	r2, #2
 80037ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003804:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800380c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4413      	add	r3, r2
 8003816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381a:	461a      	mov	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e027      	b.n	8003872 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	335d      	adds	r3, #93	; 0x5d
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b07      	cmp	r3, #7
 8003836:	d11c      	bne.n	8003872 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	440b      	add	r3, r1
 8003846:	3358      	adds	r3, #88	; 0x58
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	1c59      	adds	r1, r3, #1
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4403      	add	r3, r0
 800385a:	3358      	adds	r3, #88	; 0x58
 800385c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	335c      	adds	r3, #92	; 0x5c
 800386e:	2204      	movs	r2, #4
 8003870:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	461a      	mov	r2, r3
 8003880:	2302      	movs	r3, #2
 8003882:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	b2d8      	uxtb	r0, r3
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	440b      	add	r3, r1
 8003896:	335c      	adds	r3, #92	; 0x5c
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	4601      	mov	r1, r0
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f005 fd80 	bl	80093a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038a4:	e0d1      	b.n	8003a4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d13e      	bne.n	800393a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	0151      	lsls	r1, r2, #5
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	440a      	add	r2, r1
 80038d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	440b      	add	r3, r1
 80038ea:	3358      	adds	r3, #88	; 0x58
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1c59      	adds	r1, r3, #1
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4403      	add	r3, r0
 80038fe:	3358      	adds	r3, #88	; 0x58
 8003900:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	440b      	add	r3, r1
 8003910:	335d      	adds	r3, #93	; 0x5d
 8003912:	2206      	movs	r2, #6
 8003914:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f003 fb9c 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	461a      	mov	r2, r3
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	6093      	str	r3, [r2, #8]
}
 8003938:	e087      	b.n	8003a4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b10      	cmp	r3, #16
 800394e:	d17c      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	333f      	adds	r3, #63	; 0x3f
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d122      	bne.n	80039ac <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	440b      	add	r3, r1
 8003974:	3358      	adds	r3, #88	; 0x58
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	0151      	lsls	r1, r2, #5
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	440a      	add	r2, r1
 8003990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 fb5a 	bl	800705e <USB_HC_Halt>
 80039aa:	e045      	b.n	8003a38 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	440b      	add	r3, r1
 80039ba:	333f      	adds	r3, #63	; 0x3f
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	440b      	add	r3, r1
 80039d0:	333f      	adds	r3, #63	; 0x3f
 80039d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d12f      	bne.n	8003a38 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	3358      	adds	r3, #88	; 0x58
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d121      	bne.n	8003a38 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	335d      	adds	r3, #93	; 0x5d
 8003a04:	2203      	movs	r2, #3
 8003a06:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 fb13 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	461a      	mov	r2, r3
 8003a46:	2310      	movs	r3, #16
 8003a48:	6093      	str	r3, [r2, #8]
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d119      	bne.n	8003ab6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2304      	movs	r3, #4
 8003a92:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003ab4:	e33e      	b.n	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d141      	bne.n	8003b50 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2320      	movs	r3, #32
 8003adc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	333d      	adds	r3, #61	; 0x3d
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	f040 831f 	bne.w	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	333d      	adds	r3, #61	; 0x3d
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	440b      	add	r3, r1
 8003b18:	335c      	adds	r3, #92	; 0x5c
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	0151      	lsls	r1, r2, #5
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	440a      	add	r2, r1
 8003b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 fa88 	bl	800705e <USB_HC_Halt>
}
 8003b4e:	e2f1      	b.n	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b40      	cmp	r3, #64	; 0x40
 8003b64:	d13f      	bne.n	8003be6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	440b      	add	r3, r1
 8003b74:	335d      	adds	r3, #93	; 0x5d
 8003b76:	2204      	movs	r2, #4
 8003b78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	440b      	add	r3, r1
 8003b88:	333d      	adds	r3, #61	; 0x3d
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3358      	adds	r3, #88	; 0x58
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 fa46 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	461a      	mov	r2, r3
 8003be0:	2340      	movs	r3, #64	; 0x40
 8003be2:	6093      	str	r3, [r2, #8]
}
 8003be4:	e2a6      	b.n	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfc:	d122      	bne.n	8003c44 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c18:	f043 0302 	orr.w	r3, r3, #2
 8003c1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 fa18 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c40:	6093      	str	r3, [r2, #8]
}
 8003c42:	e277      	b.n	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d135      	bne.n	8003cc6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	440b      	add	r3, r1
 8003c68:	3358      	adds	r3, #88	; 0x58
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	0151      	lsls	r1, r2, #5
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	440a      	add	r2, r1
 8003c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f003 f9e0 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	461a      	mov	r2, r3
 8003cac:	2301      	movs	r3, #1
 8003cae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	335d      	adds	r3, #93	; 0x5d
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]
}
 8003cc4:	e236      	b.n	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d12b      	bne.n	8003d34 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2308      	movs	r3, #8
 8003cec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f003 f9a0 	bl	800705e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	440b      	add	r3, r1
 8003d2c:	335d      	adds	r3, #93	; 0x5d
 8003d2e:	2205      	movs	r2, #5
 8003d30:	701a      	strb	r2, [r3, #0]
}
 8003d32:	e1ff      	b.n	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d155      	bne.n	8003df6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	440b      	add	r3, r1
 8003d58:	3358      	adds	r3, #88	; 0x58
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	335d      	adds	r3, #93	; 0x5d
 8003d6e:	2203      	movs	r2, #3
 8003d70:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	333d      	adds	r3, #61	; 0x3d
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d114      	bne.n	8003db2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	440b      	add	r3, r1
 8003d96:	333c      	adds	r3, #60	; 0x3c
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	440b      	add	r3, r1
 8003dac:	333d      	adds	r3, #61	; 0x3d
 8003dae:	2201      	movs	r2, #1
 8003db0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f003 f93e 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dee:	461a      	mov	r2, r3
 8003df0:	2310      	movs	r3, #16
 8003df2:	6093      	str	r3, [r2, #8]
}
 8003df4:	e19e      	b.n	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	d12b      	bne.n	8003e64 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e26:	f043 0302 	orr.w	r3, r3, #2
 8003e2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	4611      	mov	r1, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f003 f911 	bl	800705e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	440b      	add	r3, r1
 8003e4a:	335d      	adds	r3, #93	; 0x5d
 8003e4c:	2206      	movs	r2, #6
 8003e4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	6093      	str	r3, [r2, #8]
}
 8003e62:	e167      	b.n	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7a:	d135      	bne.n	8003ee8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e96:	f043 0302 	orr.w	r3, r3, #2
 8003e9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 f8d9 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2310      	movs	r3, #16
 8003ebc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	440b      	add	r3, r1
 8003ee0:	335d      	adds	r3, #93	; 0x5d
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	701a      	strb	r2, [r3, #0]
}
 8003ee6:	e125      	b.n	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	f040 811a 	bne.w	8004134 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	0151      	lsls	r1, r2, #5
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	440a      	add	r2, r1
 8003f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f1a:	f023 0302 	bic.w	r3, r3, #2
 8003f1e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	440b      	add	r3, r1
 8003f2e:	335d      	adds	r3, #93	; 0x5d
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d137      	bne.n	8003fa6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	440b      	add	r3, r1
 8003f44:	335c      	adds	r3, #92	; 0x5c
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	440b      	add	r3, r1
 8003f58:	333f      	adds	r3, #63	; 0x3f
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d00b      	beq.n	8003f78 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	440b      	add	r3, r1
 8003f6e:	333f      	adds	r3, #63	; 0x3f
 8003f70:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	f040 80c5 	bne.w	8004102 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	440b      	add	r3, r1
 8003f86:	3351      	adds	r3, #81	; 0x51
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	f083 0301 	eor.w	r3, r3, #1
 8003f8e:	b2d8      	uxtb	r0, r3
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3351      	adds	r3, #81	; 0x51
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	e0ad      	b.n	8004102 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	335d      	adds	r3, #93	; 0x5d
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d10a      	bne.n	8003fd2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	440b      	add	r3, r1
 8003fca:	335c      	adds	r3, #92	; 0x5c
 8003fcc:	2202      	movs	r2, #2
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e097      	b.n	8004102 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	440b      	add	r3, r1
 8003fe0:	335d      	adds	r3, #93	; 0x5d
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d10a      	bne.n	8003ffe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	335c      	adds	r3, #92	; 0x5c
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	e081      	b.n	8004102 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	440b      	add	r3, r1
 800400c:	335d      	adds	r3, #93	; 0x5d
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d10a      	bne.n	800402a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	440b      	add	r3, r1
 8004022:	335c      	adds	r3, #92	; 0x5c
 8004024:	2205      	movs	r2, #5
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e06b      	b.n	8004102 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	440b      	add	r3, r1
 8004038:	335d      	adds	r3, #93	; 0x5d
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b06      	cmp	r3, #6
 800403e:	d00a      	beq.n	8004056 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	440b      	add	r3, r1
 800404e:	335d      	adds	r3, #93	; 0x5d
 8004050:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004052:	2b08      	cmp	r3, #8
 8004054:	d155      	bne.n	8004102 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	440b      	add	r3, r1
 8004064:	3358      	adds	r3, #88	; 0x58
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	1c59      	adds	r1, r3, #1
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4403      	add	r3, r0
 8004078:	3358      	adds	r3, #88	; 0x58
 800407a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	3358      	adds	r3, #88	; 0x58
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d914      	bls.n	80040bc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	3358      	adds	r3, #88	; 0x58
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	440b      	add	r3, r1
 80040b4:	335c      	adds	r3, #92	; 0x5c
 80040b6:	2204      	movs	r2, #4
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e009      	b.n	80040d0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	440b      	add	r3, r1
 80040ca:	335c      	adds	r3, #92	; 0x5c
 80040cc:	2202      	movs	r2, #2
 80040ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	461a      	mov	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410e:	461a      	mov	r2, r3
 8004110:	2302      	movs	r3, #2
 8004112:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	b2d8      	uxtb	r0, r3
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	440b      	add	r3, r1
 8004126:	335c      	adds	r3, #92	; 0x5c
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	4601      	mov	r1, r0
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f005 f938 	bl	80093a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004134:	bf00      	nop
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	0c5b      	lsrs	r3, r3, #17
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004170:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d003      	beq.n	8004180 <HCD_RXQLVL_IRQHandler+0x44>
 8004178:	2b05      	cmp	r3, #5
 800417a:	f000 8082 	beq.w	8004282 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800417e:	e083      	b.n	8004288 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d07f      	beq.n	8004286 <HCD_RXQLVL_IRQHandler+0x14a>
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	440b      	add	r3, r1
 8004194:	3344      	adds	r3, #68	; 0x44
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d074      	beq.n	8004286 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	440b      	add	r3, r1
 80041ae:	3344      	adds	r3, #68	; 0x44
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	b292      	uxth	r2, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f002 faf1 	bl	800679e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	440b      	add	r3, r1
 80041ca:	3344      	adds	r3, #68	; 0x44
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	18d1      	adds	r1, r2, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4403      	add	r3, r0
 80041e0:	3344      	adds	r3, #68	; 0x44
 80041e2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	440b      	add	r3, r1
 80041f2:	334c      	adds	r3, #76	; 0x4c
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	18d1      	adds	r1, r2, r3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4403      	add	r3, r0
 8004208:	334c      	adds	r3, #76	; 0x4c
 800420a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <HCD_RXQLVL_IRQHandler+0x154>)
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d031      	beq.n	8004286 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004238:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004240:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	4413      	add	r3, r2
 800424a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424e:	461a      	mov	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	440b      	add	r3, r1
 8004262:	3350      	adds	r3, #80	; 0x50
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	f083 0301 	eor.w	r3, r3, #1
 800426a:	b2d8      	uxtb	r0, r3
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	440b      	add	r3, r1
 800427a:	3350      	adds	r3, #80	; 0x50
 800427c:	4602      	mov	r2, r0
 800427e:	701a      	strb	r2, [r3, #0]
      break;
 8004280:	e001      	b.n	8004286 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004282:	bf00      	nop
 8004284:	e000      	b.n	8004288 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004286:	bf00      	nop
  }
}
 8004288:	bf00      	nop
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	1ff80000 	.word	0x1ff80000

08004294 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d10b      	bne.n	80042e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d102      	bne.n	80042dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f005 f848 	bl	800936c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f043 0302 	orr.w	r3, r3, #2
 80042e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d132      	bne.n	8004354 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f043 0308 	orr.w	r3, r3, #8
 80042f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d126      	bne.n	800434e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d113      	bne.n	8004330 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800430e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004312:	d106      	bne.n	8004322 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2102      	movs	r1, #2
 800431a:	4618      	mov	r0, r3
 800431c:	f002 fb7a 	bl	8006a14 <USB_InitFSLSPClkSel>
 8004320:	e011      	b.n	8004346 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f002 fb73 	bl	8006a14 <USB_InitFSLSPClkSel>
 800432e:	e00a      	b.n	8004346 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800433e:	461a      	mov	r2, r3
 8004340:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004344:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f005 f83a 	bl	80093c0 <HAL_HCD_PortEnabled_Callback>
 800434c:	e002      	b.n	8004354 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f005 f844 	bl	80093dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b20      	cmp	r3, #32
 800435c:	d103      	bne.n	8004366 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f043 0320 	orr.w	r3, r3, #32
 8004364:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6013      	str	r3, [r2, #0]
}
 8004372:	bf00      	nop
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e11f      	b.n	80045ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fdf0 	bl	8000f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2224      	movs	r2, #36	; 0x24
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043e0:	f001 f9de 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 80043e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4a7b      	ldr	r2, [pc, #492]	; (80045d8 <HAL_I2C_Init+0x25c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d807      	bhi.n	8004400 <HAL_I2C_Init+0x84>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a7a      	ldr	r2, [pc, #488]	; (80045dc <HAL_I2C_Init+0x260>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	bf94      	ite	ls
 80043f8:	2301      	movls	r3, #1
 80043fa:	2300      	movhi	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e006      	b.n	800440e <HAL_I2C_Init+0x92>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a77      	ldr	r2, [pc, #476]	; (80045e0 <HAL_I2C_Init+0x264>)
 8004404:	4293      	cmp	r3, r2
 8004406:	bf94      	ite	ls
 8004408:	2301      	movls	r3, #1
 800440a:	2300      	movhi	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e0db      	b.n	80045ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a72      	ldr	r2, [pc, #456]	; (80045e4 <HAL_I2C_Init+0x268>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	0c9b      	lsrs	r3, r3, #18
 8004420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4a64      	ldr	r2, [pc, #400]	; (80045d8 <HAL_I2C_Init+0x25c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d802      	bhi.n	8004450 <HAL_I2C_Init+0xd4>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	3301      	adds	r3, #1
 800444e:	e009      	b.n	8004464 <HAL_I2C_Init+0xe8>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	4a63      	ldr	r2, [pc, #396]	; (80045e8 <HAL_I2C_Init+0x26c>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	099b      	lsrs	r3, r3, #6
 8004462:	3301      	adds	r3, #1
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	430b      	orrs	r3, r1
 800446a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4956      	ldr	r1, [pc, #344]	; (80045d8 <HAL_I2C_Init+0x25c>)
 8004480:	428b      	cmp	r3, r1
 8004482:	d80d      	bhi.n	80044a0 <HAL_I2C_Init+0x124>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1e59      	subs	r1, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004492:	3301      	adds	r3, #1
 8004494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004498:	2b04      	cmp	r3, #4
 800449a:	bf38      	it	cc
 800449c:	2304      	movcc	r3, #4
 800449e:	e04f      	b.n	8004540 <HAL_I2C_Init+0x1c4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d111      	bne.n	80044cc <HAL_I2C_Init+0x150>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1e58      	subs	r0, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	440b      	add	r3, r1
 80044b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ba:	3301      	adds	r3, #1
 80044bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e012      	b.n	80044f2 <HAL_I2C_Init+0x176>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1e58      	subs	r0, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	0099      	lsls	r1, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e2:	3301      	adds	r3, #1
 80044e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Init+0x17e>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e022      	b.n	8004540 <HAL_I2C_Init+0x1c4>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10e      	bne.n	8004520 <HAL_I2C_Init+0x1a4>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1e58      	subs	r0, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6859      	ldr	r1, [r3, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	440b      	add	r3, r1
 8004510:	fbb0 f3f3 	udiv	r3, r0, r3
 8004514:	3301      	adds	r3, #1
 8004516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451e:	e00f      	b.n	8004540 <HAL_I2C_Init+0x1c4>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1e58      	subs	r0, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6859      	ldr	r1, [r3, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	0099      	lsls	r1, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	fbb0 f3f3 	udiv	r3, r0, r3
 8004536:	3301      	adds	r3, #1
 8004538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	6809      	ldr	r1, [r1, #0]
 8004544:	4313      	orrs	r3, r2
 8004546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800456e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6911      	ldr	r1, [r2, #16]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68d2      	ldr	r2, [r2, #12]
 800457a:	4311      	orrs	r1, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	430b      	orrs	r3, r1
 8004582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	000186a0 	.word	0x000186a0
 80045dc:	001e847f 	.word	0x001e847f
 80045e0:	003d08ff 	.word	0x003d08ff
 80045e4:	431bde83 	.word	0x431bde83
 80045e8:	10624dd3 	.word	0x10624dd3

080045ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e128      	b.n	8004850 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a90      	ldr	r2, [pc, #576]	; (8004858 <HAL_I2S_Init+0x26c>)
 8004616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fc fcfd 	bl	8001018 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004634:	f023 030f 	bic.w	r3, r3, #15
 8004638:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2202      	movs	r2, #2
 8004640:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d060      	beq.n	800470c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004652:	2310      	movs	r3, #16
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e001      	b.n	800465c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004658:	2320      	movs	r3, #32
 800465a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b20      	cmp	r3, #32
 8004662:	d802      	bhi.n	800466a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800466a:	2001      	movs	r0, #1
 800466c:	f001 f9a2 	bl	80059b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004670:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467a:	d125      	bne.n	80046c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d010      	beq.n	80046a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	fbb2 f2f3 	udiv	r2, r2, r3
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	3305      	adds	r3, #5
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	e01f      	b.n	80046e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	3305      	adds	r3, #5
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e00e      	b.n	80046e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	461a      	mov	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e2:	3305      	adds	r3, #5
 80046e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4a5c      	ldr	r2, [pc, #368]	; (800485c <HAL_I2S_Init+0x270>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	08db      	lsrs	r3, r3, #3
 80046f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e003      	b.n	8004714 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800470c:	2302      	movs	r3, #2
 800470e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d902      	bls.n	8004720 <HAL_I2S_Init+0x134>
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2bff      	cmp	r3, #255	; 0xff
 800471e:	d907      	bls.n	8004730 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	f043 0210 	orr.w	r2, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e08f      	b.n	8004850 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	ea42 0103 	orr.w	r1, r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	430a      	orrs	r2, r1
 8004742:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800474e:	f023 030f 	bic.w	r3, r3, #15
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6851      	ldr	r1, [r2, #4]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6892      	ldr	r2, [r2, #8]
 800475a:	4311      	orrs	r1, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68d2      	ldr	r2, [r2, #12]
 8004760:	4311      	orrs	r1, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6992      	ldr	r2, [r2, #24]
 8004766:	430a      	orrs	r2, r1
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004772:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d161      	bne.n	8004840 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a38      	ldr	r2, [pc, #224]	; (8004860 <HAL_I2S_Init+0x274>)
 8004780:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a37      	ldr	r2, [pc, #220]	; (8004864 <HAL_I2S_Init+0x278>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <HAL_I2S_Init+0x1a4>
 800478c:	4b36      	ldr	r3, [pc, #216]	; (8004868 <HAL_I2S_Init+0x27c>)
 800478e:	e001      	b.n	8004794 <HAL_I2S_Init+0x1a8>
 8004790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	4932      	ldr	r1, [pc, #200]	; (8004864 <HAL_I2S_Init+0x278>)
 800479c:	428a      	cmp	r2, r1
 800479e:	d101      	bne.n	80047a4 <HAL_I2S_Init+0x1b8>
 80047a0:	4a31      	ldr	r2, [pc, #196]	; (8004868 <HAL_I2S_Init+0x27c>)
 80047a2:	e001      	b.n	80047a8 <HAL_I2S_Init+0x1bc>
 80047a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80047a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047ac:	f023 030f 	bic.w	r3, r3, #15
 80047b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <HAL_I2S_Init+0x278>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_I2S_Init+0x1d4>
 80047bc:	4b2a      	ldr	r3, [pc, #168]	; (8004868 <HAL_I2S_Init+0x27c>)
 80047be:	e001      	b.n	80047c4 <HAL_I2S_Init+0x1d8>
 80047c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c4:	2202      	movs	r2, #2
 80047c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a25      	ldr	r2, [pc, #148]	; (8004864 <HAL_I2S_Init+0x278>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_I2S_Init+0x1ea>
 80047d2:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_I2S_Init+0x27c>)
 80047d4:	e001      	b.n	80047da <HAL_I2S_Init+0x1ee>
 80047d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e6:	d003      	beq.n	80047f0 <HAL_I2S_Init+0x204>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80047f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	e001      	b.n	80047fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	b299      	uxth	r1, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004812:	4303      	orrs	r3, r0
 8004814:	b29b      	uxth	r3, r3
 8004816:	430b      	orrs	r3, r1
 8004818:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800481a:	4313      	orrs	r3, r2
 800481c:	b29a      	uxth	r2, r3
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	4313      	orrs	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004828:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a0d      	ldr	r2, [pc, #52]	; (8004864 <HAL_I2S_Init+0x278>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_I2S_Init+0x24c>
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <HAL_I2S_Init+0x27c>)
 8004836:	e001      	b.n	800483c <HAL_I2S_Init+0x250>
 8004838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800483c:	897a      	ldrh	r2, [r7, #10]
 800483e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	08004963 	.word	0x08004963
 800485c:	cccccccd 	.word	0xcccccccd
 8004860:	08004a79 	.word	0x08004a79
 8004864:	40003800 	.word	0x40003800
 8004868:	40003400 	.word	0x40003400

0800486c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c9a      	adds	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10e      	bne.n	80048fc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff ffb8 	bl	800486c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	b292      	uxth	r2, r2
 8004918:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	1c9a      	adds	r2, r3, #2
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10e      	bne.n	800495a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800494a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ff93 	bl	8004880 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b04      	cmp	r3, #4
 800497c:	d13a      	bne.n	80049f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d109      	bne.n	800499c <I2S_IRQHandler+0x3a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004992:	2b40      	cmp	r3, #64	; 0x40
 8004994:	d102      	bne.n	800499c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff ffb4 	bl	8004904 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b40      	cmp	r3, #64	; 0x40
 80049a4:	d126      	bne.n	80049f4 <I2S_IRQHandler+0x92>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d11f      	bne.n	80049f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f043 0202 	orr.w	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff ff50 	bl	8004894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d136      	bne.n	8004a6e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d109      	bne.n	8004a1e <I2S_IRQHandler+0xbc>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a14:	2b80      	cmp	r3, #128	; 0x80
 8004a16:	d102      	bne.n	8004a1e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff45 	bl	80048a8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d122      	bne.n	8004a6e <I2S_IRQHandler+0x10c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d11b      	bne.n	8004a6e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a44:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	f043 0204 	orr.w	r2, r3, #4
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ff13 	bl	8004894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a6e:	bf00      	nop
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4aa2      	ldr	r2, [pc, #648]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004a92:	4ba2      	ldr	r3, [pc, #648]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a94:	e001      	b.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a9b      	ldr	r2, [pc, #620]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ab0:	4b9a      	ldr	r3, [pc, #616]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ab2:	e001      	b.n	8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac4:	d004      	beq.n	8004ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f040 8099 	bne.w	8004c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d107      	bne.n	8004aea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f925 	bl	8004d34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f9c8 	bl	8004e94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d13a      	bne.n	8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d035      	beq.n	8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a7e      	ldr	r2, [pc, #504]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b22:	4b7e      	ldr	r3, [pc, #504]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b24:	e001      	b.n	8004b2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4979      	ldr	r1, [pc, #484]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b32:	428b      	cmp	r3, r1
 8004b34:	d101      	bne.n	8004b3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b36:	4b79      	ldr	r3, [pc, #484]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b38:	e001      	b.n	8004b3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f043 0202 	orr.w	r2, r3, #2
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fe88 	bl	8004894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	f040 80be 	bne.w	8004d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80b8 	beq.w	8004d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004baa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a59      	ldr	r2, [pc, #356]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d101      	bne.n	8004bba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004bb6:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bb8:	e001      	b.n	8004bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4954      	ldr	r1, [pc, #336]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bc6:	428b      	cmp	r3, r1
 8004bc8:	d101      	bne.n	8004bce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004bca:	4b54      	ldr	r3, [pc, #336]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bcc:	e001      	b.n	8004bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bd6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	f043 0204 	orr.w	r2, r3, #4
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fe4a 	bl	8004894 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c00:	e084      	b.n	8004d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d107      	bne.n	8004c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8be 	bl	8004d98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d107      	bne.n	8004c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8fd 	bl	8004e30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d12f      	bne.n	8004ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02a      	beq.n	8004ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c58:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2e      	ldr	r2, [pc, #184]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c64:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c66:	e001      	b.n	8004c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4929      	ldr	r1, [pc, #164]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c74:	428b      	cmp	r3, r1
 8004c76:	d101      	bne.n	8004c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c78:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c7a:	e001      	b.n	8004c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	f043 0202 	orr.w	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fdfa 	bl	8004894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d131      	bne.n	8004d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d02c      	beq.n	8004d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d101      	bne.n	8004cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cc0:	e001      	b.n	8004cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4912      	ldr	r1, [pc, #72]	; (8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cce:	428b      	cmp	r3, r1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cd4:	e001      	b.n	8004cda <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cde:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cee:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	f043 0204 	orr.w	r2, r3, #4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff fdc5 	bl	8004894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d0a:	e000      	b.n	8004d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d0c:	bf00      	nop
}
 8004d0e:	bf00      	nop
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40003800 	.word	0x40003800
 8004d1c:	40003400 	.word	0x40003400

08004d20 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	1c99      	adds	r1, r3, #2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6251      	str	r1, [r2, #36]	; 0x24
 8004d46:	881a      	ldrh	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d113      	bne.n	8004d8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff ffc9 	bl	8004d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	1c99      	adds	r1, r3, #2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6251      	str	r1, [r2, #36]	; 0x24
 8004daa:	8819      	ldrh	r1, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <I2SEx_TxISR_I2SExt+0x90>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <I2SEx_TxISR_I2SExt+0x22>
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <I2SEx_TxISR_I2SExt+0x94>)
 8004db8:	e001      	b.n	8004dbe <I2SEx_TxISR_I2SExt+0x26>
 8004dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dbe:	460a      	mov	r2, r1
 8004dc0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d121      	bne.n	8004e1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <I2SEx_TxISR_I2SExt+0x90>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <I2SEx_TxISR_I2SExt+0x50>
 8004de4:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <I2SEx_TxISR_I2SExt+0x94>)
 8004de6:	e001      	b.n	8004dec <I2SEx_TxISR_I2SExt+0x54>
 8004de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	490d      	ldr	r1, [pc, #52]	; (8004e28 <I2SEx_TxISR_I2SExt+0x90>)
 8004df4:	428b      	cmp	r3, r1
 8004df6:	d101      	bne.n	8004dfc <I2SEx_TxISR_I2SExt+0x64>
 8004df8:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <I2SEx_TxISR_I2SExt+0x94>)
 8004dfa:	e001      	b.n	8004e00 <I2SEx_TxISR_I2SExt+0x68>
 8004dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff ff81 	bl	8004d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40003800 	.word	0x40003800
 8004e2c:	40003400 	.word	0x40003400

08004e30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68d8      	ldr	r0, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	1c99      	adds	r1, r3, #2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e48:	b282      	uxth	r2, r0
 8004e4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d113      	bne.n	8004e8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff ff4a 	bl	8004d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <I2SEx_RxISR_I2SExt+0x90>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <I2SEx_RxISR_I2SExt+0x16>
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <I2SEx_RxISR_I2SExt+0x94>)
 8004ea8:	e001      	b.n	8004eae <I2SEx_RxISR_I2SExt+0x1a>
 8004eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eae:	68d8      	ldr	r0, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	1c99      	adds	r1, r3, #2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004eba:	b282      	uxth	r2, r0
 8004ebc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d121      	bne.n	8004f1a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <I2SEx_RxISR_I2SExt+0x90>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <I2SEx_RxISR_I2SExt+0x50>
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <I2SEx_RxISR_I2SExt+0x94>)
 8004ee2:	e001      	b.n	8004ee8 <I2SEx_RxISR_I2SExt+0x54>
 8004ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	490d      	ldr	r1, [pc, #52]	; (8004f24 <I2SEx_RxISR_I2SExt+0x90>)
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	d101      	bne.n	8004ef8 <I2SEx_RxISR_I2SExt+0x64>
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <I2SEx_RxISR_I2SExt+0x94>)
 8004ef6:	e001      	b.n	8004efc <I2SEx_RxISR_I2SExt+0x68>
 8004ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004efc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f00:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff03 	bl	8004d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40003800 	.word	0x40003800
 8004f28:	40003400 	.word	0x40003400

08004f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e25b      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d075      	beq.n	8005036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f4a:	4ba3      	ldr	r3, [pc, #652]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d00c      	beq.n	8004f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f56:	4ba0      	ldr	r3, [pc, #640]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d112      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f62:	4b9d      	ldr	r3, [pc, #628]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f6e:	d10b      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f70:	4b99      	ldr	r3, [pc, #612]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d05b      	beq.n	8005034 <HAL_RCC_OscConfig+0x108>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d157      	bne.n	8005034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e236      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f90:	d106      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x74>
 8004f92:	4b91      	ldr	r3, [pc, #580]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a90      	ldr	r2, [pc, #576]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e01d      	b.n	8004fdc <HAL_RCC_OscConfig+0xb0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x98>
 8004faa:	4b8b      	ldr	r3, [pc, #556]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a8a      	ldr	r2, [pc, #552]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4b88      	ldr	r3, [pc, #544]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a87      	ldr	r2, [pc, #540]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0xb0>
 8004fc4:	4b84      	ldr	r3, [pc, #528]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a83      	ldr	r2, [pc, #524]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b81      	ldr	r3, [pc, #516]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a80      	ldr	r2, [pc, #512]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fc fa84 	bl	80014f0 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fec:	f7fc fa80 	bl	80014f0 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	; 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e1fb      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0xc0>
 800500a:	e014      	b.n	8005036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7fc fa70 	bl	80014f0 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005014:	f7fc fa6c 	bl	80014f0 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	; 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e1e7      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	4b6c      	ldr	r3, [pc, #432]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0xe8>
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d063      	beq.n	800510a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005042:	4b65      	ldr	r3, [pc, #404]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504e:	4b62      	ldr	r3, [pc, #392]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005056:	2b08      	cmp	r3, #8
 8005058:	d11c      	bne.n	8005094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800505a:	4b5f      	ldr	r3, [pc, #380]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005066:	4b5c      	ldr	r3, [pc, #368]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_RCC_OscConfig+0x152>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e1bb      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507e:	4b56      	ldr	r3, [pc, #344]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4952      	ldr	r1, [pc, #328]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005092:	e03a      	b.n	800510a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800509c:	4b4f      	ldr	r3, [pc, #316]	; (80051dc <HAL_RCC_OscConfig+0x2b0>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fc fa25 	bl	80014f0 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050aa:	f7fc fa21 	bl	80014f0 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e19c      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	4b46      	ldr	r3, [pc, #280]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4940      	ldr	r1, [pc, #256]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]
 80050dc:	e015      	b.n	800510a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050de:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <HAL_RCC_OscConfig+0x2b0>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc fa04 	bl	80014f0 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ec:	f7fc fa00 	bl	80014f0 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e17b      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	4b36      	ldr	r3, [pc, #216]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d030      	beq.n	8005178 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d016      	beq.n	800514c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511e:	4b30      	ldr	r3, [pc, #192]	; (80051e0 <HAL_RCC_OscConfig+0x2b4>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fc f9e4 	bl	80014f0 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800512c:	f7fc f9e0 	bl	80014f0 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e15b      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	4b26      	ldr	r3, [pc, #152]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 8005140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x200>
 800514a:	e015      	b.n	8005178 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800514c:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <HAL_RCC_OscConfig+0x2b4>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005152:	f7fc f9cd 	bl	80014f0 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800515a:	f7fc f9c9 	bl	80014f0 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e144      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 800516e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80a0 	beq.w	80052c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800518a:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10f      	bne.n	80051b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	4a0e      	ldr	r2, [pc, #56]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	6413      	str	r3, [r2, #64]	; 0x40
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051b2:	2301      	movs	r3, #1
 80051b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_RCC_OscConfig+0x2b8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d121      	bne.n	8005206 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051c2:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <HAL_RCC_OscConfig+0x2b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a07      	ldr	r2, [pc, #28]	; (80051e4 <HAL_RCC_OscConfig+0x2b8>)
 80051c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ce:	f7fc f98f 	bl	80014f0 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d4:	e011      	b.n	80051fa <HAL_RCC_OscConfig+0x2ce>
 80051d6:	bf00      	nop
 80051d8:	40023800 	.word	0x40023800
 80051dc:	42470000 	.word	0x42470000
 80051e0:	42470e80 	.word	0x42470e80
 80051e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e8:	f7fc f982 	bl	80014f0 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e0fd      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fa:	4b81      	ldr	r3, [pc, #516]	; (8005400 <HAL_RCC_OscConfig+0x4d4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x2f0>
 800520e:	4b7d      	ldr	r3, [pc, #500]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	; 0x70
 800521a:	e01c      	b.n	8005256 <HAL_RCC_OscConfig+0x32a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b05      	cmp	r3, #5
 8005222:	d10c      	bne.n	800523e <HAL_RCC_OscConfig+0x312>
 8005224:	4b77      	ldr	r3, [pc, #476]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	4a76      	ldr	r2, [pc, #472]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	6713      	str	r3, [r2, #112]	; 0x70
 8005230:	4b74      	ldr	r3, [pc, #464]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	4a73      	ldr	r2, [pc, #460]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6713      	str	r3, [r2, #112]	; 0x70
 800523c:	e00b      	b.n	8005256 <HAL_RCC_OscConfig+0x32a>
 800523e:	4b71      	ldr	r3, [pc, #452]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005242:	4a70      	ldr	r2, [pc, #448]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6713      	str	r3, [r2, #112]	; 0x70
 800524a:	4b6e      	ldr	r3, [pc, #440]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	4a6d      	ldr	r2, [pc, #436]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d015      	beq.n	800528a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525e:	f7fc f947 	bl	80014f0 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005264:	e00a      	b.n	800527c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005266:	f7fc f943 	bl	80014f0 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f241 3288 	movw	r2, #5000	; 0x1388
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e0bc      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527c:	4b61      	ldr	r3, [pc, #388]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0ee      	beq.n	8005266 <HAL_RCC_OscConfig+0x33a>
 8005288:	e014      	b.n	80052b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528a:	f7fc f931 	bl	80014f0 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005290:	e00a      	b.n	80052a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005292:	f7fc f92d 	bl	80014f0 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e0a6      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a8:	4b56      	ldr	r3, [pc, #344]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1ee      	bne.n	8005292 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d105      	bne.n	80052c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ba:	4b52      	ldr	r3, [pc, #328]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	4a51      	ldr	r2, [pc, #324]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 80052c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8092 	beq.w	80053f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d0:	4b4c      	ldr	r3, [pc, #304]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d05c      	beq.n	8005396 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d141      	bne.n	8005368 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e4:	4b48      	ldr	r3, [pc, #288]	; (8005408 <HAL_RCC_OscConfig+0x4dc>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ea:	f7fc f901 	bl	80014f0 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f2:	f7fc f8fd 	bl	80014f0 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e078      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005304:	4b3f      	ldr	r3, [pc, #252]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f0      	bne.n	80052f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	019b      	lsls	r3, r3, #6
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	3b01      	subs	r3, #1
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	061b      	lsls	r3, r3, #24
 8005334:	4933      	ldr	r1, [pc, #204]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 8005336:	4313      	orrs	r3, r2
 8005338:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800533a:	4b33      	ldr	r3, [pc, #204]	; (8005408 <HAL_RCC_OscConfig+0x4dc>)
 800533c:	2201      	movs	r2, #1
 800533e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005340:	f7fc f8d6 	bl	80014f0 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005348:	f7fc f8d2 	bl	80014f0 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e04d      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0x41c>
 8005366:	e045      	b.n	80053f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005368:	4b27      	ldr	r3, [pc, #156]	; (8005408 <HAL_RCC_OscConfig+0x4dc>)
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fc f8bf 	bl	80014f0 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005376:	f7fc f8bb 	bl	80014f0 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e036      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005388:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f0      	bne.n	8005376 <HAL_RCC_OscConfig+0x44a>
 8005394:	e02e      	b.n	80053f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e029      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053a2:	4b18      	ldr	r3, [pc, #96]	; (8005404 <HAL_RCC_OscConfig+0x4d8>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d11c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d115      	bne.n	80053f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ca:	4013      	ands	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d10d      	bne.n	80053f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053de:	429a      	cmp	r2, r3
 80053e0:	d106      	bne.n	80053f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d001      	beq.n	80053f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40007000 	.word	0x40007000
 8005404:	40023800 	.word	0x40023800
 8005408:	42470060 	.word	0x42470060

0800540c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0cc      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005420:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d90c      	bls.n	8005448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b65      	ldr	r3, [pc, #404]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b63      	ldr	r3, [pc, #396]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0b8      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d020      	beq.n	8005496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005460:	4b59      	ldr	r3, [pc, #356]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	4a58      	ldr	r2, [pc, #352]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800546a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005478:	4b53      	ldr	r3, [pc, #332]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4a52      	ldr	r2, [pc, #328]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005484:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	494d      	ldr	r1, [pc, #308]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d044      	beq.n	800552c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054aa:	4b47      	ldr	r3, [pc, #284]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d119      	bne.n	80054ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d003      	beq.n	80054ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d107      	bne.n	80054da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ca:	4b3f      	ldr	r3, [pc, #252]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e06f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054da:	4b3b      	ldr	r3, [pc, #236]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e067      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ea:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f023 0203 	bic.w	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	4934      	ldr	r1, [pc, #208]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054fc:	f7fb fff8 	bl	80014f0 <HAL_GetTick>
 8005500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005502:	e00a      	b.n	800551a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005504:	f7fb fff4 	bl	80014f0 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e04f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551a:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 020c 	and.w	r2, r3, #12
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	429a      	cmp	r2, r3
 800552a:	d1eb      	bne.n	8005504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d20c      	bcs.n	8005554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b20      	ldr	r3, [pc, #128]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e032      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4916      	ldr	r1, [pc, #88]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	490e      	ldr	r1, [pc, #56]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005592:	f000 f821 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8005596:	4601      	mov	r1, r0
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <HAL_RCC_ClockConfig+0x1c0>)
 80055a4:	5cd3      	ldrb	r3, [r2, r3]
 80055a6:	fa21 f303 	lsr.w	r3, r1, r3
 80055aa:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <HAL_RCC_ClockConfig+0x1c4>)
 80055ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <HAL_RCC_ClockConfig+0x1c8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fb ff58 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40023c00 	.word	0x40023c00
 80055c8:	40023800 	.word	0x40023800
 80055cc:	080099f4 	.word	0x080099f4
 80055d0:	20000000 	.word	0x20000000
 80055d4:	20000004 	.word	0x20000004

080055d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	607b      	str	r3, [r7, #4]
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	2300      	movs	r3, #0
 80055e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ee:	4b63      	ldr	r3, [pc, #396]	; (800577c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d007      	beq.n	800560a <HAL_RCC_GetSysClockFreq+0x32>
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d008      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x38>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f040 80b4 	bne.w	800576c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005604:	4b5e      	ldr	r3, [pc, #376]	; (8005780 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005606:	60bb      	str	r3, [r7, #8]
       break;
 8005608:	e0b3      	b.n	8005772 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800560a:	4b5e      	ldr	r3, [pc, #376]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800560c:	60bb      	str	r3, [r7, #8]
      break;
 800560e:	e0b0      	b.n	8005772 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005610:	4b5a      	ldr	r3, [pc, #360]	; (800577c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005618:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800561a:	4b58      	ldr	r3, [pc, #352]	; (800577c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d04a      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005626:	4b55      	ldr	r3, [pc, #340]	; (800577c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	099b      	lsrs	r3, r3, #6
 800562c:	f04f 0400 	mov.w	r4, #0
 8005630:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	ea03 0501 	and.w	r5, r3, r1
 800563c:	ea04 0602 	and.w	r6, r4, r2
 8005640:	4629      	mov	r1, r5
 8005642:	4632      	mov	r2, r6
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	f04f 0400 	mov.w	r4, #0
 800564c:	0154      	lsls	r4, r2, #5
 800564e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005652:	014b      	lsls	r3, r1, #5
 8005654:	4619      	mov	r1, r3
 8005656:	4622      	mov	r2, r4
 8005658:	1b49      	subs	r1, r1, r5
 800565a:	eb62 0206 	sbc.w	r2, r2, r6
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	f04f 0400 	mov.w	r4, #0
 8005666:	0194      	lsls	r4, r2, #6
 8005668:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800566c:	018b      	lsls	r3, r1, #6
 800566e:	1a5b      	subs	r3, r3, r1
 8005670:	eb64 0402 	sbc.w	r4, r4, r2
 8005674:	f04f 0100 	mov.w	r1, #0
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	00e2      	lsls	r2, r4, #3
 800567e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005682:	00d9      	lsls	r1, r3, #3
 8005684:	460b      	mov	r3, r1
 8005686:	4614      	mov	r4, r2
 8005688:	195b      	adds	r3, r3, r5
 800568a:	eb44 0406 	adc.w	r4, r4, r6
 800568e:	f04f 0100 	mov.w	r1, #0
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	0262      	lsls	r2, r4, #9
 8005698:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800569c:	0259      	lsls	r1, r3, #9
 800569e:	460b      	mov	r3, r1
 80056a0:	4614      	mov	r4, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	4621      	mov	r1, r4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f04f 0400 	mov.w	r4, #0
 80056ac:	461a      	mov	r2, r3
 80056ae:	4623      	mov	r3, r4
 80056b0:	f7fa fd8a 	bl	80001c8 <__aeabi_uldivmod>
 80056b4:	4603      	mov	r3, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	e049      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056bc:	4b2f      	ldr	r3, [pc, #188]	; (800577c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	f04f 0400 	mov.w	r4, #0
 80056c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	ea03 0501 	and.w	r5, r3, r1
 80056d2:	ea04 0602 	and.w	r6, r4, r2
 80056d6:	4629      	mov	r1, r5
 80056d8:	4632      	mov	r2, r6
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	f04f 0400 	mov.w	r4, #0
 80056e2:	0154      	lsls	r4, r2, #5
 80056e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80056e8:	014b      	lsls	r3, r1, #5
 80056ea:	4619      	mov	r1, r3
 80056ec:	4622      	mov	r2, r4
 80056ee:	1b49      	subs	r1, r1, r5
 80056f0:	eb62 0206 	sbc.w	r2, r2, r6
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	f04f 0400 	mov.w	r4, #0
 80056fc:	0194      	lsls	r4, r2, #6
 80056fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005702:	018b      	lsls	r3, r1, #6
 8005704:	1a5b      	subs	r3, r3, r1
 8005706:	eb64 0402 	sbc.w	r4, r4, r2
 800570a:	f04f 0100 	mov.w	r1, #0
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	00e2      	lsls	r2, r4, #3
 8005714:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005718:	00d9      	lsls	r1, r3, #3
 800571a:	460b      	mov	r3, r1
 800571c:	4614      	mov	r4, r2
 800571e:	195b      	adds	r3, r3, r5
 8005720:	eb44 0406 	adc.w	r4, r4, r6
 8005724:	f04f 0100 	mov.w	r1, #0
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	02a2      	lsls	r2, r4, #10
 800572e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005732:	0299      	lsls	r1, r3, #10
 8005734:	460b      	mov	r3, r1
 8005736:	4614      	mov	r4, r2
 8005738:	4618      	mov	r0, r3
 800573a:	4621      	mov	r1, r4
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f04f 0400 	mov.w	r4, #0
 8005742:	461a      	mov	r2, r3
 8005744:	4623      	mov	r3, r4
 8005746:	f7fa fd3f 	bl	80001c8 <__aeabi_uldivmod>
 800574a:	4603      	mov	r3, r0
 800574c:	460c      	mov	r4, r1
 800574e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	3301      	adds	r3, #1
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	60bb      	str	r3, [r7, #8]
      break;
 800576a:	e002      	b.n	8005772 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800576e:	60bb      	str	r3, [r7, #8]
      break;
 8005770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005772:	68bb      	ldr	r3, [r7, #8]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800577c:	40023800 	.word	0x40023800
 8005780:	00f42400 	.word	0x00f42400
 8005784:	007a1200 	.word	0x007a1200

08005788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <HAL_RCC_GetHCLKFreq+0x14>)
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000000 	.word	0x20000000

080057a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057a4:	f7ff fff0 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057a8:	4601      	mov	r1, r0
 80057aa:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	0a9b      	lsrs	r3, r3, #10
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	4a03      	ldr	r2, [pc, #12]	; (80057c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b6:	5cd3      	ldrb	r3, [r2, r3]
 80057b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40023800 	.word	0x40023800
 80057c4:	08009a04 	.word	0x08009a04

080057c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057cc:	f7ff ffdc 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057d0:	4601      	mov	r1, r0
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	0b5b      	lsrs	r3, r3, #13
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	4a03      	ldr	r2, [pc, #12]	; (80057ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80057de:	5cd3      	ldrb	r3, [r2, r3]
 80057e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	08009a04 	.word	0x08009a04

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005814:	2b00      	cmp	r3, #0
 8005816:	d035      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005818:	4b62      	ldr	r3, [pc, #392]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800581e:	f7fb fe67 	bl	80014f0 <HAL_GetTick>
 8005822:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005826:	f7fb fe63 	bl	80014f0 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e0b0      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005838:	4b5b      	ldr	r3, [pc, #364]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	019a      	lsls	r2, r3, #6
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	071b      	lsls	r3, r3, #28
 8005850:	4955      	ldr	r1, [pc, #340]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005858:	4b52      	ldr	r3, [pc, #328]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800585e:	f7fb fe47 	bl	80014f0 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005864:	e008      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005866:	f7fb fe43 	bl	80014f0 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e090      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005878:	4b4b      	ldr	r3, [pc, #300]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8083 	beq.w	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a43      	ldr	r2, [pc, #268]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40
 80058a2:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058ae:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a3e      	ldr	r2, [pc, #248]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ba:	f7fb fe19 	bl	80014f0 <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058c2:	f7fb fe15 	bl	80014f0 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e062      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058d4:	4b35      	ldr	r3, [pc, #212]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058e0:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d02f      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d028      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058fe:	4b2a      	ldr	r3, [pc, #168]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005906:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005908:	4b29      	ldr	r3, [pc, #164]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800590e:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005914:	4a24      	ldr	r2, [pc, #144]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800591a:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d114      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005926:	f7fb fde3 	bl	80014f0 <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	e00a      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fb fddf 	bl	80014f0 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e02a      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005944:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ee      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595c:	d10d      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800596e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005972:	490d      	ldr	r1, [pc, #52]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]
 8005978:	e005      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800597a:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005980:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005984:	6093      	str	r3, [r2, #8]
 8005986:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005988:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005992:	4905      	ldr	r1, [pc, #20]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	42470068 	.word	0x42470068
 80059a8:	40023800 	.word	0x40023800
 80059ac:	40007000 	.word	0x40007000
 80059b0:	42470e40 	.word	0x42470e40

080059b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d13d      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059d2:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059da:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d004      	beq.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d12f      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80059e6:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059e8:	617b      	str	r3, [r7, #20]
          break;
 80059ea:	e02f      	b.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80059ec:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059f8:	d108      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059fa:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a02:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	e007      	b.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a14:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a22:	099b      	lsrs	r3, r3, #6
 8005a24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a30:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a36:	0f1b      	lsrs	r3, r3, #28
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	617b      	str	r3, [r7, #20]
          break;
 8005a44:	e002      	b.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
          break;
 8005a4a:	bf00      	nop
        }
      }
      break;
 8005a4c:	bf00      	nop
    }
  }
  return frequency;
 8005a4e:	697b      	ldr	r3, [r7, #20]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	00bb8000 	.word	0x00bb8000
 8005a64:	007a1200 	.word	0x007a1200
 8005a68:	00f42400 	.word	0x00f42400

08005a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e056      	b.n	8005b2c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7fb fb25 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	ea42 0103 	orr.w	r1, r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	0c1b      	lsrs	r3, r3, #16
 8005afc:	f003 0104 	and.w	r1, r3, #4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69da      	ldr	r2, [r3, #28]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e03f      	b.n	8005bc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fb fb0c 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f969 	bl	8005e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d153      	bne.n	8005c92 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <HAL_UART_Transmit_DMA+0x26>
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e04c      	b.n	8005c94 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_UART_Transmit_DMA+0x38>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e045      	b.n	8005c94 <HAL_UART_Transmit_DMA+0xc4>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	88fa      	ldrh	r2, [r7, #6]
 8005c1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2221      	movs	r2, #33	; 0x21
 8005c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	4a19      	ldr	r2, [pc, #100]	; (8005c9c <HAL_UART_Transmit_DMA+0xcc>)
 8005c36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <HAL_UART_Transmit_DMA+0xd0>)
 8005c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <HAL_UART_Transmit_DMA+0xd4>)
 8005c46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005c50:	f107 0308 	add.w	r3, r7, #8
 8005c54:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6819      	ldr	r1, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3304      	adds	r3, #4
 8005c64:	461a      	mov	r2, r3
 8005c66:	88fb      	ldrh	r3, [r7, #6]
 8005c68:	f7fc fa24 	bl	80020b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c8c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
  }
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	08005ce5 	.word	0x08005ce5
 8005ca0:	08005d37 	.word	0x08005d37
 8005ca4:	08005d53 	.word	0x08005d53

08005ca8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d113      	bne.n	8005d28 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d14:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d24:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d26:	e002      	b.n	8005d2e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7ff ffbd 	bl	8005ca8 <HAL_UART_TxCpltCallback>
}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff ffb9 	bl	8005cbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6e:	2b80      	cmp	r3, #128	; 0x80
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b21      	cmp	r3, #33	; 0x21
 8005d84:	d108      	bne.n	8005d98 <UART_DMAError+0x46>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d92:	68b8      	ldr	r0, [r7, #8]
 8005d94:	f000 f827 	bl	8005de6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	bf0c      	ite	eq
 8005da6:	2301      	moveq	r3, #1
 8005da8:	2300      	movne	r3, #0
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b22      	cmp	r3, #34	; 0x22
 8005db8:	d108      	bne.n	8005dcc <UART_DMAError+0x7a>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005dc6:	68b8      	ldr	r0, [r7, #8]
 8005dc8:	f000 f823 	bl	8005e12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	f043 0210 	orr.w	r2, r3, #16
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd8:	68b8      	ldr	r0, [r7, #8]
 8005dda:	f7ff ff79 	bl	8005cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005dfc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e28:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005e92:	f023 030c 	bic.w	r3, r3, #12
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6812      	ldr	r2, [r2, #0]
 8005e9a:	68f9      	ldr	r1, [r7, #12]
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebe:	f040 818b 	bne.w	80061d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4ac1      	ldr	r2, [pc, #772]	; (80061cc <UART_SetConfig+0x37c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d005      	beq.n	8005ed8 <UART_SetConfig+0x88>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4abf      	ldr	r2, [pc, #764]	; (80061d0 <UART_SetConfig+0x380>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	f040 80bd 	bne.w	8006052 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ed8:	f7ff fc76 	bl	80057c8 <HAL_RCC_GetPCLK2Freq>
 8005edc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	461d      	mov	r5, r3
 8005ee2:	f04f 0600 	mov.w	r6, #0
 8005ee6:	46a8      	mov	r8, r5
 8005ee8:	46b1      	mov	r9, r6
 8005eea:	eb18 0308 	adds.w	r3, r8, r8
 8005eee:	eb49 0409 	adc.w	r4, r9, r9
 8005ef2:	4698      	mov	r8, r3
 8005ef4:	46a1      	mov	r9, r4
 8005ef6:	eb18 0805 	adds.w	r8, r8, r5
 8005efa:	eb49 0906 	adc.w	r9, r9, r6
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f12:	4688      	mov	r8, r1
 8005f14:	4691      	mov	r9, r2
 8005f16:	eb18 0005 	adds.w	r0, r8, r5
 8005f1a:	eb49 0106 	adc.w	r1, r9, r6
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	461d      	mov	r5, r3
 8005f24:	f04f 0600 	mov.w	r6, #0
 8005f28:	196b      	adds	r3, r5, r5
 8005f2a:	eb46 0406 	adc.w	r4, r6, r6
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4623      	mov	r3, r4
 8005f32:	f7fa f949 	bl	80001c8 <__aeabi_uldivmod>
 8005f36:	4603      	mov	r3, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4ba5      	ldr	r3, [pc, #660]	; (80061d4 <UART_SetConfig+0x384>)
 8005f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	461d      	mov	r5, r3
 8005f4c:	f04f 0600 	mov.w	r6, #0
 8005f50:	46a9      	mov	r9, r5
 8005f52:	46b2      	mov	sl, r6
 8005f54:	eb19 0309 	adds.w	r3, r9, r9
 8005f58:	eb4a 040a 	adc.w	r4, sl, sl
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	46a2      	mov	sl, r4
 8005f60:	eb19 0905 	adds.w	r9, r9, r5
 8005f64:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f7c:	4689      	mov	r9, r1
 8005f7e:	4692      	mov	sl, r2
 8005f80:	eb19 0005 	adds.w	r0, r9, r5
 8005f84:	eb4a 0106 	adc.w	r1, sl, r6
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	461d      	mov	r5, r3
 8005f8e:	f04f 0600 	mov.w	r6, #0
 8005f92:	196b      	adds	r3, r5, r5
 8005f94:	eb46 0406 	adc.w	r4, r6, r6
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	f7fa f914 	bl	80001c8 <__aeabi_uldivmod>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4b8b      	ldr	r3, [pc, #556]	; (80061d4 <UART_SetConfig+0x384>)
 8005fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	2164      	movs	r1, #100	; 0x64
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	3332      	adds	r3, #50	; 0x32
 8005fba:	4a86      	ldr	r2, [pc, #536]	; (80061d4 <UART_SetConfig+0x384>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fc8:	4498      	add	r8, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	461d      	mov	r5, r3
 8005fce:	f04f 0600 	mov.w	r6, #0
 8005fd2:	46a9      	mov	r9, r5
 8005fd4:	46b2      	mov	sl, r6
 8005fd6:	eb19 0309 	adds.w	r3, r9, r9
 8005fda:	eb4a 040a 	adc.w	r4, sl, sl
 8005fde:	4699      	mov	r9, r3
 8005fe0:	46a2      	mov	sl, r4
 8005fe2:	eb19 0905 	adds.w	r9, r9, r5
 8005fe6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fea:	f04f 0100 	mov.w	r1, #0
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ff6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ffa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ffe:	4689      	mov	r9, r1
 8006000:	4692      	mov	sl, r2
 8006002:	eb19 0005 	adds.w	r0, r9, r5
 8006006:	eb4a 0106 	adc.w	r1, sl, r6
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	461d      	mov	r5, r3
 8006010:	f04f 0600 	mov.w	r6, #0
 8006014:	196b      	adds	r3, r5, r5
 8006016:	eb46 0406 	adc.w	r4, r6, r6
 800601a:	461a      	mov	r2, r3
 800601c:	4623      	mov	r3, r4
 800601e:	f7fa f8d3 	bl	80001c8 <__aeabi_uldivmod>
 8006022:	4603      	mov	r3, r0
 8006024:	460c      	mov	r4, r1
 8006026:	461a      	mov	r2, r3
 8006028:	4b6a      	ldr	r3, [pc, #424]	; (80061d4 <UART_SetConfig+0x384>)
 800602a:	fba3 1302 	umull	r1, r3, r3, r2
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	2164      	movs	r1, #100	; 0x64
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	3332      	adds	r3, #50	; 0x32
 800603c:	4a65      	ldr	r2, [pc, #404]	; (80061d4 <UART_SetConfig+0x384>)
 800603e:	fba2 2303 	umull	r2, r3, r2, r3
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	f003 0207 	and.w	r2, r3, #7
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4442      	add	r2, r8
 800604e:	609a      	str	r2, [r3, #8]
 8006050:	e26f      	b.n	8006532 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006052:	f7ff fba5 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 8006056:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	461d      	mov	r5, r3
 800605c:	f04f 0600 	mov.w	r6, #0
 8006060:	46a8      	mov	r8, r5
 8006062:	46b1      	mov	r9, r6
 8006064:	eb18 0308 	adds.w	r3, r8, r8
 8006068:	eb49 0409 	adc.w	r4, r9, r9
 800606c:	4698      	mov	r8, r3
 800606e:	46a1      	mov	r9, r4
 8006070:	eb18 0805 	adds.w	r8, r8, r5
 8006074:	eb49 0906 	adc.w	r9, r9, r6
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006084:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006088:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800608c:	4688      	mov	r8, r1
 800608e:	4691      	mov	r9, r2
 8006090:	eb18 0005 	adds.w	r0, r8, r5
 8006094:	eb49 0106 	adc.w	r1, r9, r6
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	461d      	mov	r5, r3
 800609e:	f04f 0600 	mov.w	r6, #0
 80060a2:	196b      	adds	r3, r5, r5
 80060a4:	eb46 0406 	adc.w	r4, r6, r6
 80060a8:	461a      	mov	r2, r3
 80060aa:	4623      	mov	r3, r4
 80060ac:	f7fa f88c 	bl	80001c8 <__aeabi_uldivmod>
 80060b0:	4603      	mov	r3, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b47      	ldr	r3, [pc, #284]	; (80061d4 <UART_SetConfig+0x384>)
 80060b8:	fba3 2302 	umull	r2, r3, r3, r2
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	461d      	mov	r5, r3
 80060c6:	f04f 0600 	mov.w	r6, #0
 80060ca:	46a9      	mov	r9, r5
 80060cc:	46b2      	mov	sl, r6
 80060ce:	eb19 0309 	adds.w	r3, r9, r9
 80060d2:	eb4a 040a 	adc.w	r4, sl, sl
 80060d6:	4699      	mov	r9, r3
 80060d8:	46a2      	mov	sl, r4
 80060da:	eb19 0905 	adds.w	r9, r9, r5
 80060de:	eb4a 0a06 	adc.w	sl, sl, r6
 80060e2:	f04f 0100 	mov.w	r1, #0
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060f6:	4689      	mov	r9, r1
 80060f8:	4692      	mov	sl, r2
 80060fa:	eb19 0005 	adds.w	r0, r9, r5
 80060fe:	eb4a 0106 	adc.w	r1, sl, r6
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	461d      	mov	r5, r3
 8006108:	f04f 0600 	mov.w	r6, #0
 800610c:	196b      	adds	r3, r5, r5
 800610e:	eb46 0406 	adc.w	r4, r6, r6
 8006112:	461a      	mov	r2, r3
 8006114:	4623      	mov	r3, r4
 8006116:	f7fa f857 	bl	80001c8 <__aeabi_uldivmod>
 800611a:	4603      	mov	r3, r0
 800611c:	460c      	mov	r4, r1
 800611e:	461a      	mov	r2, r3
 8006120:	4b2c      	ldr	r3, [pc, #176]	; (80061d4 <UART_SetConfig+0x384>)
 8006122:	fba3 1302 	umull	r1, r3, r3, r2
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	2164      	movs	r1, #100	; 0x64
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	3332      	adds	r3, #50	; 0x32
 8006134:	4a27      	ldr	r2, [pc, #156]	; (80061d4 <UART_SetConfig+0x384>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006142:	4498      	add	r8, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	461d      	mov	r5, r3
 8006148:	f04f 0600 	mov.w	r6, #0
 800614c:	46a9      	mov	r9, r5
 800614e:	46b2      	mov	sl, r6
 8006150:	eb19 0309 	adds.w	r3, r9, r9
 8006154:	eb4a 040a 	adc.w	r4, sl, sl
 8006158:	4699      	mov	r9, r3
 800615a:	46a2      	mov	sl, r4
 800615c:	eb19 0905 	adds.w	r9, r9, r5
 8006160:	eb4a 0a06 	adc.w	sl, sl, r6
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006170:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006174:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006178:	4689      	mov	r9, r1
 800617a:	4692      	mov	sl, r2
 800617c:	eb19 0005 	adds.w	r0, r9, r5
 8006180:	eb4a 0106 	adc.w	r1, sl, r6
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	461d      	mov	r5, r3
 800618a:	f04f 0600 	mov.w	r6, #0
 800618e:	196b      	adds	r3, r5, r5
 8006190:	eb46 0406 	adc.w	r4, r6, r6
 8006194:	461a      	mov	r2, r3
 8006196:	4623      	mov	r3, r4
 8006198:	f7fa f816 	bl	80001c8 <__aeabi_uldivmod>
 800619c:	4603      	mov	r3, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	461a      	mov	r2, r3
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <UART_SetConfig+0x384>)
 80061a4:	fba3 1302 	umull	r1, r3, r3, r2
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	2164      	movs	r1, #100	; 0x64
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	3332      	adds	r3, #50	; 0x32
 80061b6:	4a07      	ldr	r2, [pc, #28]	; (80061d4 <UART_SetConfig+0x384>)
 80061b8:	fba2 2303 	umull	r2, r3, r2, r3
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	f003 0207 	and.w	r2, r3, #7
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4442      	add	r2, r8
 80061c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061ca:	e1b2      	b.n	8006532 <UART_SetConfig+0x6e2>
 80061cc:	40011000 	.word	0x40011000
 80061d0:	40011400 	.word	0x40011400
 80061d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4ad7      	ldr	r2, [pc, #860]	; (800653c <UART_SetConfig+0x6ec>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d005      	beq.n	80061ee <UART_SetConfig+0x39e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4ad6      	ldr	r2, [pc, #856]	; (8006540 <UART_SetConfig+0x6f0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	f040 80d1 	bne.w	8006390 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80061ee:	f7ff faeb 	bl	80057c8 <HAL_RCC_GetPCLK2Freq>
 80061f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	469a      	mov	sl, r3
 80061f8:	f04f 0b00 	mov.w	fp, #0
 80061fc:	46d0      	mov	r8, sl
 80061fe:	46d9      	mov	r9, fp
 8006200:	eb18 0308 	adds.w	r3, r8, r8
 8006204:	eb49 0409 	adc.w	r4, r9, r9
 8006208:	4698      	mov	r8, r3
 800620a:	46a1      	mov	r9, r4
 800620c:	eb18 080a 	adds.w	r8, r8, sl
 8006210:	eb49 090b 	adc.w	r9, r9, fp
 8006214:	f04f 0100 	mov.w	r1, #0
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006220:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006224:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006228:	4688      	mov	r8, r1
 800622a:	4691      	mov	r9, r2
 800622c:	eb1a 0508 	adds.w	r5, sl, r8
 8006230:	eb4b 0609 	adc.w	r6, fp, r9
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4619      	mov	r1, r3
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	f04f 0300 	mov.w	r3, #0
 8006242:	f04f 0400 	mov.w	r4, #0
 8006246:	0094      	lsls	r4, r2, #2
 8006248:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800624c:	008b      	lsls	r3, r1, #2
 800624e:	461a      	mov	r2, r3
 8006250:	4623      	mov	r3, r4
 8006252:	4628      	mov	r0, r5
 8006254:	4631      	mov	r1, r6
 8006256:	f7f9 ffb7 	bl	80001c8 <__aeabi_uldivmod>
 800625a:	4603      	mov	r3, r0
 800625c:	460c      	mov	r4, r1
 800625e:	461a      	mov	r2, r3
 8006260:	4bb8      	ldr	r3, [pc, #736]	; (8006544 <UART_SetConfig+0x6f4>)
 8006262:	fba3 2302 	umull	r2, r3, r3, r2
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	469b      	mov	fp, r3
 8006270:	f04f 0c00 	mov.w	ip, #0
 8006274:	46d9      	mov	r9, fp
 8006276:	46e2      	mov	sl, ip
 8006278:	eb19 0309 	adds.w	r3, r9, r9
 800627c:	eb4a 040a 	adc.w	r4, sl, sl
 8006280:	4699      	mov	r9, r3
 8006282:	46a2      	mov	sl, r4
 8006284:	eb19 090b 	adds.w	r9, r9, fp
 8006288:	eb4a 0a0c 	adc.w	sl, sl, ip
 800628c:	f04f 0100 	mov.w	r1, #0
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006298:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800629c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062a0:	4689      	mov	r9, r1
 80062a2:	4692      	mov	sl, r2
 80062a4:	eb1b 0509 	adds.w	r5, fp, r9
 80062a8:	eb4c 060a 	adc.w	r6, ip, sl
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4619      	mov	r1, r3
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	f04f 0300 	mov.w	r3, #0
 80062ba:	f04f 0400 	mov.w	r4, #0
 80062be:	0094      	lsls	r4, r2, #2
 80062c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062c4:	008b      	lsls	r3, r1, #2
 80062c6:	461a      	mov	r2, r3
 80062c8:	4623      	mov	r3, r4
 80062ca:	4628      	mov	r0, r5
 80062cc:	4631      	mov	r1, r6
 80062ce:	f7f9 ff7b 	bl	80001c8 <__aeabi_uldivmod>
 80062d2:	4603      	mov	r3, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	461a      	mov	r2, r3
 80062d8:	4b9a      	ldr	r3, [pc, #616]	; (8006544 <UART_SetConfig+0x6f4>)
 80062da:	fba3 1302 	umull	r1, r3, r3, r2
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	2164      	movs	r1, #100	; 0x64
 80062e2:	fb01 f303 	mul.w	r3, r1, r3
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	3332      	adds	r3, #50	; 0x32
 80062ec:	4a95      	ldr	r2, [pc, #596]	; (8006544 <UART_SetConfig+0x6f4>)
 80062ee:	fba2 2303 	umull	r2, r3, r2, r3
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f8:	4498      	add	r8, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	469b      	mov	fp, r3
 80062fe:	f04f 0c00 	mov.w	ip, #0
 8006302:	46d9      	mov	r9, fp
 8006304:	46e2      	mov	sl, ip
 8006306:	eb19 0309 	adds.w	r3, r9, r9
 800630a:	eb4a 040a 	adc.w	r4, sl, sl
 800630e:	4699      	mov	r9, r3
 8006310:	46a2      	mov	sl, r4
 8006312:	eb19 090b 	adds.w	r9, r9, fp
 8006316:	eb4a 0a0c 	adc.w	sl, sl, ip
 800631a:	f04f 0100 	mov.w	r1, #0
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006326:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800632a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800632e:	4689      	mov	r9, r1
 8006330:	4692      	mov	sl, r2
 8006332:	eb1b 0509 	adds.w	r5, fp, r9
 8006336:	eb4c 060a 	adc.w	r6, ip, sl
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4619      	mov	r1, r3
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	f04f 0400 	mov.w	r4, #0
 800634c:	0094      	lsls	r4, r2, #2
 800634e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006352:	008b      	lsls	r3, r1, #2
 8006354:	461a      	mov	r2, r3
 8006356:	4623      	mov	r3, r4
 8006358:	4628      	mov	r0, r5
 800635a:	4631      	mov	r1, r6
 800635c:	f7f9 ff34 	bl	80001c8 <__aeabi_uldivmod>
 8006360:	4603      	mov	r3, r0
 8006362:	460c      	mov	r4, r1
 8006364:	461a      	mov	r2, r3
 8006366:	4b77      	ldr	r3, [pc, #476]	; (8006544 <UART_SetConfig+0x6f4>)
 8006368:	fba3 1302 	umull	r1, r3, r3, r2
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	2164      	movs	r1, #100	; 0x64
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	3332      	adds	r3, #50	; 0x32
 800637a:	4a72      	ldr	r2, [pc, #456]	; (8006544 <UART_SetConfig+0x6f4>)
 800637c:	fba2 2303 	umull	r2, r3, r2, r3
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	f003 020f 	and.w	r2, r3, #15
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4442      	add	r2, r8
 800638c:	609a      	str	r2, [r3, #8]
 800638e:	e0d0      	b.n	8006532 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006390:	f7ff fa06 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 8006394:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	469a      	mov	sl, r3
 800639a:	f04f 0b00 	mov.w	fp, #0
 800639e:	46d0      	mov	r8, sl
 80063a0:	46d9      	mov	r9, fp
 80063a2:	eb18 0308 	adds.w	r3, r8, r8
 80063a6:	eb49 0409 	adc.w	r4, r9, r9
 80063aa:	4698      	mov	r8, r3
 80063ac:	46a1      	mov	r9, r4
 80063ae:	eb18 080a 	adds.w	r8, r8, sl
 80063b2:	eb49 090b 	adc.w	r9, r9, fp
 80063b6:	f04f 0100 	mov.w	r1, #0
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063ca:	4688      	mov	r8, r1
 80063cc:	4691      	mov	r9, r2
 80063ce:	eb1a 0508 	adds.w	r5, sl, r8
 80063d2:	eb4b 0609 	adc.w	r6, fp, r9
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4619      	mov	r1, r3
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	f04f 0400 	mov.w	r4, #0
 80063e8:	0094      	lsls	r4, r2, #2
 80063ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063ee:	008b      	lsls	r3, r1, #2
 80063f0:	461a      	mov	r2, r3
 80063f2:	4623      	mov	r3, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	4631      	mov	r1, r6
 80063f8:	f7f9 fee6 	bl	80001c8 <__aeabi_uldivmod>
 80063fc:	4603      	mov	r3, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	461a      	mov	r2, r3
 8006402:	4b50      	ldr	r3, [pc, #320]	; (8006544 <UART_SetConfig+0x6f4>)
 8006404:	fba3 2302 	umull	r2, r3, r3, r2
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	469b      	mov	fp, r3
 8006412:	f04f 0c00 	mov.w	ip, #0
 8006416:	46d9      	mov	r9, fp
 8006418:	46e2      	mov	sl, ip
 800641a:	eb19 0309 	adds.w	r3, r9, r9
 800641e:	eb4a 040a 	adc.w	r4, sl, sl
 8006422:	4699      	mov	r9, r3
 8006424:	46a2      	mov	sl, r4
 8006426:	eb19 090b 	adds.w	r9, r9, fp
 800642a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800642e:	f04f 0100 	mov.w	r1, #0
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800643a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800643e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006442:	4689      	mov	r9, r1
 8006444:	4692      	mov	sl, r2
 8006446:	eb1b 0509 	adds.w	r5, fp, r9
 800644a:	eb4c 060a 	adc.w	r6, ip, sl
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4619      	mov	r1, r3
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	f04f 0400 	mov.w	r4, #0
 8006460:	0094      	lsls	r4, r2, #2
 8006462:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006466:	008b      	lsls	r3, r1, #2
 8006468:	461a      	mov	r2, r3
 800646a:	4623      	mov	r3, r4
 800646c:	4628      	mov	r0, r5
 800646e:	4631      	mov	r1, r6
 8006470:	f7f9 feaa 	bl	80001c8 <__aeabi_uldivmod>
 8006474:	4603      	mov	r3, r0
 8006476:	460c      	mov	r4, r1
 8006478:	461a      	mov	r2, r3
 800647a:	4b32      	ldr	r3, [pc, #200]	; (8006544 <UART_SetConfig+0x6f4>)
 800647c:	fba3 1302 	umull	r1, r3, r3, r2
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	2164      	movs	r1, #100	; 0x64
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	3332      	adds	r3, #50	; 0x32
 800648e:	4a2d      	ldr	r2, [pc, #180]	; (8006544 <UART_SetConfig+0x6f4>)
 8006490:	fba2 2303 	umull	r2, r3, r2, r3
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800649a:	4498      	add	r8, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	469b      	mov	fp, r3
 80064a0:	f04f 0c00 	mov.w	ip, #0
 80064a4:	46d9      	mov	r9, fp
 80064a6:	46e2      	mov	sl, ip
 80064a8:	eb19 0309 	adds.w	r3, r9, r9
 80064ac:	eb4a 040a 	adc.w	r4, sl, sl
 80064b0:	4699      	mov	r9, r3
 80064b2:	46a2      	mov	sl, r4
 80064b4:	eb19 090b 	adds.w	r9, r9, fp
 80064b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064bc:	f04f 0100 	mov.w	r1, #0
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064d0:	4689      	mov	r9, r1
 80064d2:	4692      	mov	sl, r2
 80064d4:	eb1b 0509 	adds.w	r5, fp, r9
 80064d8:	eb4c 060a 	adc.w	r6, ip, sl
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	4619      	mov	r1, r3
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	f04f 0400 	mov.w	r4, #0
 80064ee:	0094      	lsls	r4, r2, #2
 80064f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064f4:	008b      	lsls	r3, r1, #2
 80064f6:	461a      	mov	r2, r3
 80064f8:	4623      	mov	r3, r4
 80064fa:	4628      	mov	r0, r5
 80064fc:	4631      	mov	r1, r6
 80064fe:	f7f9 fe63 	bl	80001c8 <__aeabi_uldivmod>
 8006502:	4603      	mov	r3, r0
 8006504:	460c      	mov	r4, r1
 8006506:	461a      	mov	r2, r3
 8006508:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <UART_SetConfig+0x6f4>)
 800650a:	fba3 1302 	umull	r1, r3, r3, r2
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	2164      	movs	r1, #100	; 0x64
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	3332      	adds	r3, #50	; 0x32
 800651c:	4a09      	ldr	r2, [pc, #36]	; (8006544 <UART_SetConfig+0x6f4>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4442      	add	r2, r8
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	e7ff      	b.n	8006532 <UART_SetConfig+0x6e2>
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653c:	40011000 	.word	0x40011000
 8006540:	40011400 	.word	0x40011400
 8006544:	51eb851f 	.word	0x51eb851f

08006548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006548:	b084      	sub	sp, #16
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	f107 001c 	add.w	r0, r7, #28
 8006556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2b01      	cmp	r3, #1
 800655e:	d122      	bne.n	80065a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d105      	bne.n	800659a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f94a 	bl	8006834 <USB_CoreReset>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73fb      	strb	r3, [r7, #15]
 80065a4:	e01a      	b.n	80065dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f93e 	bl	8006834 <USB_CoreReset>
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38
 80065ce:	e005      	b.n	80065dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d10b      	bne.n	80065fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f043 0206 	orr.w	r2, r3, #6
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f043 0220 	orr.w	r2, r3, #32
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006606:	b004      	add	sp, #16
 8006608:	4770      	bx	lr

0800660a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f043 0201 	orr.w	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f023 0201 	bic.w	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d106      	bne.n	800667a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60da      	str	r2, [r3, #12]
 8006678:	e00b      	b.n	8006692 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60da      	str	r2, [r3, #12]
 800668c:	e001      	b.n	8006692 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e003      	b.n	800669a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006692:	2032      	movs	r0, #50	; 0x32
 8006694:	f7fa ff38 	bl	8001508 <HAL_Delay>

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	019b      	lsls	r3, r3, #6
 80066b6:	f043 0220 	orr.w	r2, r3, #32
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4a09      	ldr	r2, [pc, #36]	; (80066ec <USB_FlushTxFifo+0x48>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e006      	b.n	80066de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d0f0      	beq.n	80066be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	00030d40 	.word	0x00030d40

080066f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2210      	movs	r2, #16
 8006700:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3301      	adds	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a09      	ldr	r2, [pc, #36]	; (8006730 <USB_FlushRxFifo+0x40>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d901      	bls.n	8006714 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e006      	b.n	8006722 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b10      	cmp	r3, #16
 800671e:	d0f0      	beq.n	8006702 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	00030d40 	.word	0x00030d40

08006734 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006734:	b480      	push	{r7}
 8006736:	b089      	sub	sp, #36	; 0x24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4611      	mov	r1, r2
 8006740:	461a      	mov	r2, r3
 8006742:	460b      	mov	r3, r1
 8006744:	71fb      	strb	r3, [r7, #7]
 8006746:	4613      	mov	r3, r2
 8006748:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006752:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d11a      	bne.n	8006790 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800675a:	88bb      	ldrh	r3, [r7, #4]
 800675c:	3303      	adds	r3, #3
 800675e:	089b      	lsrs	r3, r3, #2
 8006760:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006762:	2300      	movs	r3, #0
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e00f      	b.n	8006788 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006768:	79fb      	ldrb	r3, [r7, #7]
 800676a:	031a      	lsls	r2, r3, #12
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006774:	461a      	mov	r2, r3
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	3304      	adds	r3, #4
 8006780:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	3301      	adds	r3, #1
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	429a      	cmp	r2, r3
 800678e:	d3eb      	bcc.n	8006768 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3724      	adds	r7, #36	; 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800679e:	b480      	push	{r7}
 80067a0:	b089      	sub	sp, #36	; 0x24
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	4613      	mov	r3, r2
 80067aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	3303      	adds	r3, #3
 80067b8:	089b      	lsrs	r3, r3, #2
 80067ba:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80067bc:	2300      	movs	r3, #0
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	e00b      	b.n	80067da <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	601a      	str	r2, [r3, #0]
    pDest++;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3304      	adds	r3, #4
 80067d2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	3301      	adds	r3, #1
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d3ef      	bcc.n	80067c2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80067e2:	69fb      	ldr	r3, [r7, #28]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3724      	adds	r7, #36	; 0x24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4013      	ands	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f003 0301 	and.w	r3, r3, #1
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3301      	adds	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a13      	ldr	r2, [pc, #76]	; (8006898 <USB_CoreReset+0x64>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d901      	bls.n	8006852 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e01b      	b.n	800688a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	daf2      	bge.n	8006840 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f043 0201 	orr.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a09      	ldr	r2, [pc, #36]	; (8006898 <USB_CoreReset+0x64>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d901      	bls.n	800687c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e006      	b.n	800688a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	d0f0      	beq.n	800686a <USB_CoreReset+0x36>

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	00030d40 	.word	0x00030d40

0800689c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800689c:	b084      	sub	sp, #16
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	f107 001c 	add.w	r0, r7, #28
 80068aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068b8:	461a      	mov	r2, r3
 80068ba:	2300      	movs	r3, #0
 80068bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d018      	beq.n	8006920 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d10a      	bne.n	800690a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006902:	f043 0304 	orr.w	r3, r3, #4
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e014      	b.n	8006934 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006918:	f023 0304 	bic.w	r3, r3, #4
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e009      	b.n	8006934 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800692e:	f023 0304 	bic.w	r3, r3, #4
 8006932:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006934:	2110      	movs	r1, #16
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff feb4 	bl	80066a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff fed7 	bl	80066f0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	e015      	b.n	8006974 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4413      	add	r3, r2
 8006950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006954:	461a      	mov	r2, r3
 8006956:	f04f 33ff 	mov.w	r3, #4294967295
 800695a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4413      	add	r3, r2
 8006964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006968:	461a      	mov	r2, r3
 800696a:	2300      	movs	r3, #0
 800696c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3301      	adds	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	429a      	cmp	r2, r3
 800697a:	d3e5      	bcc.n	8006948 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800697c:	2101      	movs	r1, #1
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f8ac 	bl	8006adc <USB_DriveVbus>

  HAL_Delay(200U);
 8006984:	20c8      	movs	r0, #200	; 0xc8
 8006986:	f7fa fdbf 	bl	8001508 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <USB_HostInit+0x164>)
 80069b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a13      	ldr	r2, [pc, #76]	; (8006a04 <USB_HostInit+0x168>)
 80069b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069ba:	e009      	b.n	80069d0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2280      	movs	r2, #128	; 0x80
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a10      	ldr	r2, [pc, #64]	; (8006a08 <USB_HostInit+0x16c>)
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a10      	ldr	r2, [pc, #64]	; (8006a0c <USB_HostInit+0x170>)
 80069cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d105      	bne.n	80069e2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f043 0210 	orr.w	r2, r3, #16
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699a      	ldr	r2, [r3, #24]
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <USB_HostInit+0x174>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069fa:	b004      	add	sp, #16
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	01000200 	.word	0x01000200
 8006a04:	00e00300 	.word	0x00e00300
 8006a08:	00600080 	.word	0x00600080
 8006a0c:	004000e0 	.word	0x004000e0
 8006a10:	a3200008 	.word	0xa3200008

08006a14 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	68f9      	ldr	r1, [r7, #12]
 8006a48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d107      	bne.n	8006a66 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a62:	6053      	str	r3, [r2, #4]
 8006a64:	e009      	b.n	8006a7a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d106      	bne.n	8006a7a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a72:	461a      	mov	r2, r3
 8006a74:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a78:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006aa8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ab8:	2064      	movs	r0, #100	; 0x64
 8006aba:	f7fa fd25 	bl	8001508 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006acc:	200a      	movs	r0, #10
 8006ace:	f7fa fd1b 	bl	8001508 <HAL_Delay>

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <USB_DriveVbus+0x44>
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d106      	bne.n	8006b20 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b1e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2a:	d109      	bne.n	8006b40 <USB_DriveVbus+0x64>
 8006b2c:	78fb      	ldrb	r3, [r7, #3]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b3e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	0c5b      	lsrs	r3, r3, #17
 8006b6c:	f003 0303 	and.w	r3, r3, #3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	b29b      	uxth	r3, r3
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
	...

08006ba0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	70fb      	strb	r3, [r7, #3]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	70bb      	strb	r3, [r7, #2]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006bd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d87e      	bhi.n	8006cdc <USB_HC_Init+0x13c>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <USB_HC_Init+0x44>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c9f 	.word	0x08006c9f
 8006bec:	08006bf5 	.word	0x08006bf5
 8006bf0:	08006c61 	.word	0x08006c61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c00:	461a      	mov	r2, r3
 8006c02:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006c08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	da10      	bge.n	8006c32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006c30:	e057      	b.n	8006ce2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d051      	beq.n	8006ce2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c3e:	78fb      	ldrb	r3, [r7, #3]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c5c:	60d3      	str	r3, [r2, #12]
      break;
 8006c5e:	e040      	b.n	8006ce2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	da34      	bge.n	8006ce6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	0151      	lsls	r1, r2, #5
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	440a      	add	r2, r1
 8006c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c9c:	e023      	b.n	8006ce6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006caa:	461a      	mov	r2, r3
 8006cac:	f240 2325 	movw	r3, #549	; 0x225
 8006cb0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	da17      	bge.n	8006cea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006cd8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006cda:	e006      	b.n	8006cea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce0:	e004      	b.n	8006cec <USB_HC_Init+0x14c>
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <USB_HC_Init+0x14c>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <USB_HC_Init+0x14c>
      break;
 8006cea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d06:	4313      	orrs	r3, r2
 8006d08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	da03      	bge.n	8006d26 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	e001      	b.n	8006d2a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006d2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d103      	bne.n	8006d3a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e001      	b.n	8006d3e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d3e:	787b      	ldrb	r3, [r7, #1]
 8006d40:	059b      	lsls	r3, r3, #22
 8006d42:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d46:	78bb      	ldrb	r3, [r7, #2]
 8006d48:	02db      	lsls	r3, r3, #11
 8006d4a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d4e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d54:	049b      	lsls	r3, r3, #18
 8006d56:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d5a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	0159      	lsls	r1, r3, #5
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	440b      	add	r3, r1
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d74:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d7a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006d7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d10f      	bne.n	8006da4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	78fa      	ldrb	r2, [r7, #3]
 8006d94:	0151      	lsls	r1, r2, #5
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	440a      	add	r2, r1
 8006d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006da2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop

08006db4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08c      	sub	sp, #48	; 0x30
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dd0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d028      	beq.n	8006e30 <USB_HC_StartXfer+0x7c>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	791b      	ldrb	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d124      	bne.n	8006e30 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <USB_HC_StartXfer+0x50>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	795b      	ldrb	r3, [r3, #5]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d107      	bne.n	8006e04 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fa2e 	bl	800725c <USB_DoPing>
      return HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	e112      	b.n	800702a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006e04:	79fb      	ldrb	r3, [r7, #7]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d112      	bne.n	8006e30 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	6a3a      	ldr	r2, [r7, #32]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e24:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e28:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d018      	beq.n	8006e6a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	8912      	ldrh	r2, [r2, #8]
 8006e40:	4413      	add	r3, r2
 8006e42:	3b01      	subs	r3, #1
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	8912      	ldrh	r2, [r2, #8]
 8006e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e4c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e50:	8b7b      	ldrh	r3, [r7, #26]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d90b      	bls.n	8006e6e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006e56:	8b7b      	ldrh	r3, [r7, #26]
 8006e58:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006e5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	8912      	ldrh	r2, [r2, #8]
 8006e60:	fb02 f203 	mul.w	r2, r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	611a      	str	r2, [r3, #16]
 8006e68:	e001      	b.n	8006e6e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	78db      	ldrb	r3, [r3, #3]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d006      	beq.n	8006e84 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006e76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	8912      	ldrh	r2, [r2, #8]
 8006e7c:	fb02 f203 	mul.w	r2, r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e8e:	04d9      	lsls	r1, r3, #19
 8006e90:	4b68      	ldr	r3, [pc, #416]	; (8007034 <USB_HC_StartXfer+0x280>)
 8006e92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	7a9b      	ldrb	r3, [r3, #10]
 8006e9a:	075b      	lsls	r3, r3, #29
 8006e9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ea0:	69f9      	ldr	r1, [r7, #28]
 8006ea2:	0148      	lsls	r0, r1, #5
 8006ea4:	6a39      	ldr	r1, [r7, #32]
 8006ea6:	4401      	add	r1, r0
 8006ea8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006eac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006eae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	68d9      	ldr	r1, [r3, #12]
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec6:	460a      	mov	r2, r1
 8006ec8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bf0c      	ite	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	2300      	movne	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	6a3a      	ldr	r2, [r7, #32]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	7e7b      	ldrb	r3, [r7, #25]
 8006f12:	075b      	lsls	r3, r3, #29
 8006f14:	69f9      	ldr	r1, [r7, #28]
 8006f16:	0148      	lsls	r0, r1, #5
 8006f18:	6a39      	ldr	r1, [r7, #32]
 8006f1a:	4401      	add	r1, r0
 8006f1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f20:	4313      	orrs	r3, r2
 8006f22:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a41      	ldr	r2, [pc, #260]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f34:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f36:	4b40      	ldr	r3, [pc, #256]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f3e:	4a3e      	ldr	r2, [pc, #248]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f40:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	78db      	ldrb	r3, [r3, #3]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d006      	beq.n	8006f58 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f4a:	4b3b      	ldr	r3, [pc, #236]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f52:	4a39      	ldr	r2, [pc, #228]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	e005      	b.n	8006f64 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f58:	4b37      	ldr	r3, [pc, #220]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f60:	4a35      	ldr	r2, [pc, #212]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f62:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f64:	4b34      	ldr	r3, [pc, #208]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f6c:	4a32      	ldr	r2, [pc, #200]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f6e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4b2e      	ldr	r3, [pc, #184]	; (8007038 <USB_HC_StartXfer+0x284>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d14e      	bne.n	8007028 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	78db      	ldrb	r3, [r3, #3]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d14a      	bne.n	8007028 <USB_HC_StartXfer+0x274>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d046      	beq.n	8007028 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	79db      	ldrb	r3, [r3, #7]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d830      	bhi.n	8007004 <USB_HC_StartXfer+0x250>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <USB_HC_StartXfer+0x1f4>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fdd 	.word	0x08006fdd
 8006fb0:	08006fb9 	.word	0x08006fb9
 8006fb4:	08006fdd 	.word	0x08006fdd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	3303      	adds	r3, #3
 8006fbe:	089b      	lsrs	r3, r3, #2
 8006fc0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006fc2:	8afa      	ldrh	r2, [r7, #22]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d91c      	bls.n	8007008 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	f043 0220 	orr.w	r2, r3, #32
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	619a      	str	r2, [r3, #24]
          }
          break;
 8006fda:	e015      	b.n	8007008 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	3303      	adds	r3, #3
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fe6:	8afa      	ldrh	r2, [r7, #22]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d90a      	bls.n	800700c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	619a      	str	r2, [r3, #24]
          }
          break;
 8007002:	e003      	b.n	800700c <USB_HC_StartXfer+0x258>

        default:
          break;
 8007004:	bf00      	nop
 8007006:	e002      	b.n	800700e <USB_HC_StartXfer+0x25a>
          break;
 8007008:	bf00      	nop
 800700a:	e000      	b.n	800700e <USB_HC_StartXfer+0x25a>
          break;
 800700c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	68d9      	ldr	r1, [r3, #12]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	785a      	ldrb	r2, [r3, #1]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	b298      	uxth	r0, r3
 800701c:	2300      	movs	r3, #0
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	4603      	mov	r3, r0
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff fb86 	bl	8006734 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3728      	adds	r7, #40	; 0x28
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	1ff80000 	.word	0x1ff80000
 8007038:	200000dc 	.word	0x200000dc

0800703c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	b29b      	uxth	r3, r3
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800705e:	b480      	push	{r7}
 8007060:	b087      	sub	sp, #28
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	4413      	add	r3, r2
 800707e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	0c9b      	lsrs	r3, r3, #18
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <USB_HC_Halt+0x3a>
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d16c      	bne.n	8007172 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	0151      	lsls	r1, r2, #5
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	440a      	add	r2, r1
 80070ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070b6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d143      	bne.n	800714c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	0151      	lsls	r1, r2, #5
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	440a      	add	r2, r1
 80070da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007102:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	4413      	add	r3, r2
 800710c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	440a      	add	r2, r1
 800711a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800711e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007122:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	3301      	adds	r3, #1
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007130:	d81d      	bhi.n	800716e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	4413      	add	r3, r2
 800713a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007148:	d0ec      	beq.n	8007124 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800714a:	e080      	b.n	800724e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	4413      	add	r3, r2
 8007154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	440a      	add	r2, r1
 8007162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800716a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800716c:	e06f      	b.n	800724e <USB_HC_Halt+0x1f0>
          break;
 800716e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007170:	e06d      	b.n	800724e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4413      	add	r3, r2
 800717a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	440a      	add	r2, r1
 8007188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800718c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007190:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d143      	bne.n	800722a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007200:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	3301      	adds	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800720e:	d81d      	bhi.n	800724c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4413      	add	r3, r2
 8007218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007226:	d0ec      	beq.n	8007202 <USB_HC_Halt+0x1a4>
 8007228:	e011      	b.n	800724e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	4413      	add	r3, r2
 8007232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	0151      	lsls	r1, r2, #5
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	440a      	add	r2, r1
 8007240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e000      	b.n	800724e <USB_HC_Halt+0x1f0>
          break;
 800724c:	bf00      	nop
    }
  }

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007270:	2301      	movs	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	04da      	lsls	r2, r3, #19
 8007278:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <USB_DoPing+0x74>)
 800727a:	4013      	ands	r3, r2
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	440a      	add	r2, r1
 8007284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800728c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ba:	461a      	mov	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	1ff80000 	.word	0x1ff80000

080072d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff f9a1 	bl	800662c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80072ea:	2110      	movs	r1, #16
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff f9d9 	bl	80066a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff f9fc 	bl	80066f0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	e01f      	b.n	800733e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007314:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800731c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007324:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007332:	461a      	mov	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	3301      	adds	r3, #1
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b0f      	cmp	r3, #15
 8007342:	d9dc      	bls.n	80072fe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	e034      	b.n	80073b4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007360:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007368:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007370:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737e:	461a      	mov	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	3301      	adds	r3, #1
 8007388:	617b      	str	r3, [r7, #20]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007390:	d80c      	bhi.n	80073ac <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a8:	d0ec      	beq.n	8007384 <USB_StopHost+0xb0>
 80073aa:	e000      	b.n	80073ae <USB_StopHost+0xda>
        break;
 80073ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	3301      	adds	r3, #1
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2b0f      	cmp	r3, #15
 80073b8:	d9c7      	bls.n	800734a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073c0:	461a      	mov	r2, r3
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295
 80073ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff f91a 	bl	800660a <USB_EnableGlobalInt>

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073e0:	b590      	push	{r4, r7, lr}
 80073e2:	b089      	sub	sp, #36	; 0x24
 80073e4:	af04      	add	r7, sp, #16
 80073e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073e8:	2301      	movs	r3, #1
 80073ea:	2202      	movs	r2, #2
 80073ec:	2102      	movs	r1, #2
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fc68 	bl	8007cc4 <USBH_FindInterface>
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	2bff      	cmp	r3, #255	; 0xff
 80073fc:	d002      	beq.n	8007404 <USBH_CDC_InterfaceInit+0x24>
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d901      	bls.n	8007408 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007404:	2302      	movs	r3, #2
 8007406:	e13d      	b.n	8007684 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fc3d 	bl	8007c8c <USBH_SelectInterface>
 8007412:	4603      	mov	r3, r0
 8007414:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800741c:	2302      	movs	r3, #2
 800741e:	e131      	b.n	8007684 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007426:	2050      	movs	r0, #80	; 0x50
 8007428:	f002 fa04 	bl	8009834 <malloc>
 800742c:	4603      	mov	r3, r0
 800742e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007440:	2302      	movs	r3, #2
 8007442:	e11f      	b.n	8007684 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007444:	2250      	movs	r2, #80	; 0x50
 8007446:	2100      	movs	r1, #0
 8007448:	68b8      	ldr	r0, [r7, #8]
 800744a:	f002 fa03 	bl	8009854 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	211a      	movs	r1, #26
 8007454:	fb01 f303 	mul.w	r3, r1, r3
 8007458:	4413      	add	r3, r2
 800745a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	b25b      	sxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	da15      	bge.n	8007492 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	211a      	movs	r1, #26
 800746c:	fb01 f303 	mul.w	r3, r1, r3
 8007470:	4413      	add	r3, r2
 8007472:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007476:	781a      	ldrb	r2, [r3, #0]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	211a      	movs	r1, #26
 8007482:	fb01 f303 	mul.w	r3, r1, r3
 8007486:	4413      	add	r3, r2
 8007488:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800748c:	881a      	ldrh	r2, [r3, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 fe36 	bl	800910a <USBH_AllocPipe>
 800749e:	4603      	mov	r3, r0
 80074a0:	461a      	mov	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	7819      	ldrb	r1, [r3, #0]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	7858      	ldrb	r0, [r3, #1]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	8952      	ldrh	r2, [r2, #10]
 80074be:	9202      	str	r2, [sp, #8]
 80074c0:	2203      	movs	r2, #3
 80074c2:	9201      	str	r2, [sp, #4]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	4623      	mov	r3, r4
 80074c8:	4602      	mov	r2, r0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 fdee 	bl	80090ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2200      	movs	r2, #0
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 f8fb 	bl	80096d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	210a      	movs	r1, #10
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fbed 	bl	8007cc4 <USBH_FindInterface>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2bff      	cmp	r3, #255	; 0xff
 80074f2:	d002      	beq.n	80074fa <USBH_CDC_InterfaceInit+0x11a>
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d901      	bls.n	80074fe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074fa:	2302      	movs	r3, #2
 80074fc:	e0c2      	b.n	8007684 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	211a      	movs	r1, #26
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	4413      	add	r3, r2
 800750a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	b25b      	sxtb	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	da16      	bge.n	8007544 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	211a      	movs	r1, #26
 800751c:	fb01 f303 	mul.w	r3, r1, r3
 8007520:	4413      	add	r3, r2
 8007522:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007526:	781a      	ldrb	r2, [r3, #0]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	211a      	movs	r1, #26
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	4413      	add	r3, r2
 8007538:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800753c:	881a      	ldrh	r2, [r3, #0]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	835a      	strh	r2, [r3, #26]
 8007542:	e015      	b.n	8007570 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	211a      	movs	r1, #26
 800754a:	fb01 f303 	mul.w	r3, r1, r3
 800754e:	4413      	add	r3, r2
 8007550:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007554:	781a      	ldrb	r2, [r3, #0]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	211a      	movs	r1, #26
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	4413      	add	r3, r2
 8007566:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800756a:	881a      	ldrh	r2, [r3, #0]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	211a      	movs	r1, #26
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	4413      	add	r3, r2
 800757c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b25b      	sxtb	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	da16      	bge.n	80075b6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	211a      	movs	r1, #26
 800758e:	fb01 f303 	mul.w	r3, r1, r3
 8007592:	4413      	add	r3, r2
 8007594:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007598:	781a      	ldrb	r2, [r3, #0]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	211a      	movs	r1, #26
 80075a4:	fb01 f303 	mul.w	r3, r1, r3
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075ae:	881a      	ldrh	r2, [r3, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	835a      	strh	r2, [r3, #26]
 80075b4:	e015      	b.n	80075e2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	211a      	movs	r1, #26
 80075bc:	fb01 f303 	mul.w	r3, r1, r3
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075c6:	781a      	ldrb	r2, [r3, #0]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	211a      	movs	r1, #26
 80075d2:	fb01 f303 	mul.w	r3, r1, r3
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075dc:	881a      	ldrh	r2, [r3, #0]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	7b9b      	ldrb	r3, [r3, #14]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fd8e 	bl	800910a <USBH_AllocPipe>
 80075ee:	4603      	mov	r3, r0
 80075f0:	461a      	mov	r2, r3
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	7bdb      	ldrb	r3, [r3, #15]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 fd84 	bl	800910a <USBH_AllocPipe>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	7b59      	ldrb	r1, [r3, #13]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	7b98      	ldrb	r0, [r3, #14]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	8b12      	ldrh	r2, [r2, #24]
 8007622:	9202      	str	r2, [sp, #8]
 8007624:	2202      	movs	r2, #2
 8007626:	9201      	str	r2, [sp, #4]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	4623      	mov	r3, r4
 800762c:	4602      	mov	r2, r0
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 fd3c 	bl	80090ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	7b19      	ldrb	r1, [r3, #12]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	7bd8      	ldrb	r0, [r3, #15]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	8b52      	ldrh	r2, [r2, #26]
 800764c:	9202      	str	r2, [sp, #8]
 800764e:	2202      	movs	r2, #2
 8007650:	9201      	str	r2, [sp, #4]
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	4623      	mov	r3, r4
 8007656:	4602      	mov	r2, r0
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 fd27 	bl	80090ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	7b5b      	ldrb	r3, [r3, #13]
 800766a:	2200      	movs	r2, #0
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f002 f830 	bl	80096d4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	7b1b      	ldrb	r3, [r3, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f002 f829 	bl	80096d4 <USBH_LL_SetToggle>

  return USBH_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}

0800768c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00e      	beq.n	80076c4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fd1c 	bl	80090ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 fd47 	bl	800914c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	7b1b      	ldrb	r3, [r3, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00e      	beq.n	80076ea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	7b1b      	ldrb	r3, [r3, #12]
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fd09 	bl	80090ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	7b1b      	ldrb	r3, [r3, #12]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fd34 	bl	800914c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	7b5b      	ldrb	r3, [r3, #13]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00e      	beq.n	8007710 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	7b5b      	ldrb	r3, [r3, #13]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fcf6 	bl	80090ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	7b5b      	ldrb	r3, [r3, #13]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fd21 	bl	800914c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	4618      	mov	r0, r3
 8007726:	f002 f88d 	bl	8009844 <free>
    phost->pActiveClass->pData = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007730:	2200      	movs	r2, #0
 8007732:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3340      	adds	r3, #64	; 0x40
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f8b1 	bl	80078be <GetLineCoding>
 800775c:	4603      	mov	r3, r0
 800775e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d105      	bne.n	8007772 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800776c:	2102      	movs	r1, #2
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007772:	7afb      	ldrb	r3, [r7, #11]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800779c:	2b04      	cmp	r3, #4
 800779e:	d877      	bhi.n	8007890 <USBH_CDC_Process+0x114>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <USBH_CDC_Process+0x2c>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077bd 	.word	0x080077bd
 80077ac:	080077c3 	.word	0x080077c3
 80077b0:	080077f3 	.word	0x080077f3
 80077b4:	08007867 	.word	0x08007867
 80077b8:	08007875 	.word	0x08007875
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
      break;
 80077c0:	e06d      	b.n	800789e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f897 	bl	80078fc <SetLineCoding>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d104      	bne.n	80077e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077e0:	e058      	b.n	8007894 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d055      	beq.n	8007894 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2204      	movs	r2, #4
 80077ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077f0:	e050      	b.n	8007894 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3340      	adds	r3, #64	; 0x40
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f860 	bl	80078be <GetLineCoding>
 80077fe:	4603      	mov	r3, r0
 8007800:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d126      	bne.n	8007856 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781a:	791b      	ldrb	r3, [r3, #4]
 800781c:	429a      	cmp	r2, r3
 800781e:	d13b      	bne.n	8007898 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800782c:	429a      	cmp	r2, r3
 800782e:	d133      	bne.n	8007898 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800783c:	429a      	cmp	r2, r3
 800783e:	d12b      	bne.n	8007898 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007848:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800784a:	429a      	cmp	r2, r3
 800784c:	d124      	bne.n	8007898 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f95a 	bl	8007b08 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007854:	e020      	b.n	8007898 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d01d      	beq.n	8007898 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2204      	movs	r2, #4
 8007860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007864:	e018      	b.n	8007898 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f867 	bl	800793a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f8dc 	bl	8007a2a <CDC_ProcessReception>
      break;
 8007872:	e014      	b.n	800789e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 ffe5 	bl	8008846 <USBH_ClrFeature>
 800787c:	4603      	mov	r3, r0
 800787e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800788e:	e005      	b.n	800789c <USBH_CDC_Process+0x120>

    default:
      break;
 8007890:	bf00      	nop
 8007892:	e004      	b.n	800789e <USBH_CDC_Process+0x122>
      break;
 8007894:	bf00      	nop
 8007896:	e002      	b.n	800789e <USBH_CDC_Process+0x122>
      break;
 8007898:	bf00      	nop
 800789a:	e000      	b.n	800789e <USBH_CDC_Process+0x122>
      break;
 800789c:	bf00      	nop

  }

  return status;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	22a1      	movs	r2, #161	; 0xa1
 80078cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2221      	movs	r2, #33	; 0x21
 80078d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2207      	movs	r2, #7
 80078e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2207      	movs	r2, #7
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f98a 	bl	8008c06 <USBH_CtlReq>
 80078f2:	4603      	mov	r3, r0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2221      	movs	r2, #33	; 0x21
 800790a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2220      	movs	r2, #32
 8007910:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2207      	movs	r2, #7
 8007922:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2207      	movs	r2, #7
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 f96b 	bl	8008c06 <USBH_CtlReq>
 8007930:	4603      	mov	r3, r0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af02      	add	r7, sp, #8
 8007940:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800794c:	2300      	movs	r3, #0
 800794e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007956:	2b01      	cmp	r3, #1
 8007958:	d002      	beq.n	8007960 <CDC_ProcessTransmission+0x26>
 800795a:	2b02      	cmp	r3, #2
 800795c:	d025      	beq.n	80079aa <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800795e:	e060      	b.n	8007a22 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	8b12      	ldrh	r2, [r2, #24]
 8007968:	4293      	cmp	r3, r2
 800796a:	d90c      	bls.n	8007986 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	69d9      	ldr	r1, [r3, #28]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8b1a      	ldrh	r2, [r3, #24]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	7b58      	ldrb	r0, [r3, #13]
 8007978:	2301      	movs	r3, #1
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4603      	mov	r3, r0
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fb51 	bl	8009026 <USBH_BulkSendData>
 8007984:	e00c      	b.n	80079a0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	7b58      	ldrb	r0, [r3, #13]
 8007994:	2301      	movs	r3, #1
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	4603      	mov	r3, r0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fb43 	bl	8009026 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079a8:	e03b      	b.n	8007a22 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	7b5b      	ldrb	r3, [r3, #13]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fe65 	bl	8009680 <USBH_LL_GetURBState>
 80079b6:	4603      	mov	r3, r0
 80079b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079ba:	7afb      	ldrb	r3, [r7, #11]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d128      	bne.n	8007a12 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	8b12      	ldrh	r2, [r2, #24]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d90e      	bls.n	80079ea <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	8b12      	ldrh	r2, [r2, #24]
 80079d4:	1a9a      	subs	r2, r3, r2
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	8b12      	ldrh	r2, [r2, #24]
 80079e2:	441a      	add	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	61da      	str	r2, [r3, #28]
 80079e8:	e002      	b.n	80079f0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a00:	e00e      	b.n	8007a20 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f868 	bl	8007ae0 <USBH_CDC_TransmitCallback>
      break;
 8007a10:	e006      	b.n	8007a20 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d103      	bne.n	8007a20 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a20:	bf00      	nop
  }
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b086      	sub	sp, #24
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d002      	beq.n	8007a50 <CDC_ProcessReception+0x26>
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d00e      	beq.n	8007a6c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a4e:	e043      	b.n	8007ad8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	6a19      	ldr	r1, [r3, #32]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	8b5a      	ldrh	r2, [r3, #26]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	7b1b      	ldrb	r3, [r3, #12]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fb07 	bl	8009070 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2204      	movs	r2, #4
 8007a66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a6a:	e035      	b.n	8007ad8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	7b1b      	ldrb	r3, [r3, #12]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fe04 	bl	8009680 <USBH_LL_GetURBState>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a7c:	7cfb      	ldrb	r3, [r7, #19]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d129      	bne.n	8007ad6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	7b1b      	ldrb	r3, [r3, #12]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fd67 	bl	800955c <USBH_LL_GetLastXferSize>
 8007a8e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d016      	beq.n	8007ac8 <CDC_ProcessReception+0x9e>
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	8b5b      	ldrh	r3, [r3, #26]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d910      	bls.n	8007ac8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	1ad2      	subs	r2, r2, r3
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	6a1a      	ldr	r2, [r3, #32]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	441a      	add	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2203      	movs	r2, #3
 8007ac2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ac6:	e006      	b.n	8007ad6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f80f 	bl	8007af4 <USBH_CDC_ReceiveCallback>
      break;
 8007ad6:	bf00      	nop
  }
}
 8007ad8:	bf00      	nop
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	4613      	mov	r3, r2
 8007b28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b30:	2302      	movs	r3, #2
 8007b32:	e029      	b.n	8007b88 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	79fa      	ldrb	r2, [r7, #7]
 8007b38:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f81f 	bl	8007b90 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f001 fc39 	bl	80093f8 <USBH_LL_Init>

  return USBH_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	e009      	b.n	8007bb6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	33e0      	adds	r3, #224	; 0xe0
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	2200      	movs	r2, #0
 8007bae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b0e      	cmp	r3, #14
 8007bba:	d9f2      	bls.n	8007ba2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e009      	b.n	8007bd6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bdc:	d3f1      	bcc.n	8007bc2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2240      	movs	r2, #64	; 0x40
 8007c02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d016      	beq.n	8007c7a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10e      	bne.n	8007c74 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c5c:	1c59      	adds	r1, r3, #1
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	33de      	adds	r3, #222	; 0xde
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	e004      	b.n	8007c7e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c74:	2302      	movs	r3, #2
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e001      	b.n	8007c7e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d204      	bcs.n	8007cb2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	78fa      	ldrb	r2, [r7, #3]
 8007cac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007cb0:	e001      	b.n	8007cb6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	70fb      	strb	r3, [r7, #3]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70bb      	strb	r3, [r7, #2]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cee:	e025      	b.n	8007d3c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	221a      	movs	r2, #26
 8007cf4:	fb02 f303 	mul.w	r3, r2, r3
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3302      	adds	r3, #2
 8007d00:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	795b      	ldrb	r3, [r3, #5]
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d002      	beq.n	8007d12 <USBH_FindInterface+0x4e>
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	2bff      	cmp	r3, #255	; 0xff
 8007d10:	d111      	bne.n	8007d36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d16:	78ba      	ldrb	r2, [r7, #2]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d002      	beq.n	8007d22 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d1c:	78bb      	ldrb	r3, [r7, #2]
 8007d1e:	2bff      	cmp	r3, #255	; 0xff
 8007d20:	d109      	bne.n	8007d36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d26:	787a      	ldrb	r2, [r7, #1]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d002      	beq.n	8007d32 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d2c:	787b      	ldrb	r3, [r7, #1]
 8007d2e:	2bff      	cmp	r3, #255	; 0xff
 8007d30:	d101      	bne.n	8007d36 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	e006      	b.n	8007d44 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d9d6      	bls.n	8007cf0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d42:	23ff      	movs	r3, #255	; 0xff
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	371c      	adds	r7, #28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 fb89 	bl	8009470 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007d5e:	2101      	movs	r1, #1
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 fca0 	bl	80096a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af04      	add	r7, sp, #16
 8007d76:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d102      	bne.n	8007d92 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2203      	movs	r2, #3
 8007d90:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b0b      	cmp	r3, #11
 8007d9a:	f200 81b3 	bhi.w	8008104 <USBH_Process+0x394>
 8007d9e:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <USBH_Process+0x34>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007dd5 	.word	0x08007dd5
 8007da8:	08007e07 	.word	0x08007e07
 8007dac:	08007e6f 	.word	0x08007e6f
 8007db0:	0800809f 	.word	0x0800809f
 8007db4:	08008105 	.word	0x08008105
 8007db8:	08007f13 	.word	0x08007f13
 8007dbc:	08008045 	.word	0x08008045
 8007dc0:	08007f49 	.word	0x08007f49
 8007dc4:	08007f69 	.word	0x08007f69
 8007dc8:	08007f89 	.word	0x08007f89
 8007dcc:	08007fb7 	.word	0x08007fb7
 8007dd0:	08008087 	.word	0x08008087
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 8193 	beq.w	8008108 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007de8:	20c8      	movs	r0, #200	; 0xc8
 8007dea:	f001 fca6 	bl	800973a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 fb99 	bl	8009526 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e04:	e180      	b.n	8008108 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d107      	bne.n	8007e20 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e1e:	e182      	b.n	8008126 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e2a:	d914      	bls.n	8007e56 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e32:	3301      	adds	r3, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d903      	bls.n	8007e4e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	220d      	movs	r2, #13
 8007e4a:	701a      	strb	r2, [r3, #0]
      break;
 8007e4c:	e16b      	b.n	8008126 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
      break;
 8007e54:	e167      	b.n	8008126 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e5c:	f103 020a 	add.w	r2, r3, #10
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007e66:	200a      	movs	r0, #10
 8007e68:	f001 fc67 	bl	800973a <USBH_Delay>
      break;
 8007e6c:	e15b      	b.n	8008126 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e7e:	2104      	movs	r1, #4
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e84:	2064      	movs	r0, #100	; 0x64
 8007e86:	f001 fc58 	bl	800973a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fb26 	bl	80094dc <USBH_LL_GetSpeed>
 8007e90:	4603      	mov	r3, r0
 8007e92:	461a      	mov	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2205      	movs	r2, #5
 8007e9e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 f931 	bl	800910a <USBH_AllocPipe>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007eb0:	2180      	movs	r1, #128	; 0x80
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 f929 	bl	800910a <USBH_AllocPipe>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7919      	ldrb	r1, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ed4:	b292      	uxth	r2, r2
 8007ed6:	9202      	str	r2, [sp, #8]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	9201      	str	r2, [sp, #4]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2280      	movs	r2, #128	; 0x80
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 f8e2 	bl	80090ac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	7959      	ldrb	r1, [r3, #5]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007efc:	b292      	uxth	r2, r2
 8007efe:	9202      	str	r2, [sp, #8]
 8007f00:	2200      	movs	r2, #0
 8007f02:	9201      	str	r2, [sp, #4]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	4603      	mov	r3, r0
 8007f08:	2200      	movs	r2, #0
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 f8ce 	bl	80090ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f10:	e109      	b.n	8008126 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f90c 	bl	8008130 <USBH_HandleEnum>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f040 80f3 	bne.w	800810c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d103      	bne.n	8007f40 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f3e:	e0e5      	b.n	800810c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2207      	movs	r2, #7
 8007f44:	701a      	strb	r2, [r3, #0]
      break;
 8007f46:	e0e1      	b.n	800810c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 80de 	beq.w	8008110 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2208      	movs	r2, #8
 8007f64:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f66:	e0d3      	b.n	8008110 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fc20 	bl	80087b8 <USBH_SetCfg>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 80ca 	bne.w	8008114 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2209      	movs	r2, #9
 8007f84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f86:	e0c5      	b.n	8008114 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007f96:	2101      	movs	r1, #1
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc30 	bl	80087fe <USBH_SetFeature>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f040 80b9 	bne.w	8008118 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	220a      	movs	r2, #10
 8007faa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fac:	e0b4      	b.n	8008118 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	701a      	strb	r2, [r3, #0]
      break;
 8007fb4:	e0b0      	b.n	8008118 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 80ad 	beq.w	800811c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
 8007fce:	e016      	b.n	8007ffe <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007fd0:	7bfa      	ldrb	r2, [r7, #15]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	32de      	adds	r2, #222	; 0xde
 8007fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fda:	791a      	ldrb	r2, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d108      	bne.n	8007ff8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007fe6:	7bfa      	ldrb	r2, [r7, #15]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	32de      	adds	r2, #222	; 0xde
 8007fec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007ff6:	e005      	b.n	8008004 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	73fb      	strb	r3, [r7, #15]
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0e5      	beq.n	8007fd0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d016      	beq.n	800803c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d109      	bne.n	8008034 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2206      	movs	r2, #6
 8008024:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800802c:	2103      	movs	r1, #3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008032:	e073      	b.n	800811c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	220d      	movs	r2, #13
 8008038:	701a      	strb	r2, [r3, #0]
      break;
 800803a:	e06f      	b.n	800811c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	220d      	movs	r2, #13
 8008040:	701a      	strb	r2, [r3, #0]
      break;
 8008042:	e06b      	b.n	800811c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d017      	beq.n	800807e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
 800805a:	4603      	mov	r3, r0
 800805c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d103      	bne.n	800806e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	220b      	movs	r2, #11
 800806a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800806c:	e058      	b.n	8008120 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d154      	bne.n	8008120 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	220d      	movs	r2, #13
 800807a:	701a      	strb	r2, [r3, #0]
      break;
 800807c:	e050      	b.n	8008120 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	220d      	movs	r2, #13
 8008082:	701a      	strb	r2, [r3, #0]
      break;
 8008084:	e04c      	b.n	8008120 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d049      	beq.n	8008124 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	4798      	blx	r3
      }
      break;
 800809c:	e042      	b.n	8008124 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff fd72 	bl	8007b90 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d009      	beq.n	80080ca <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080da:	2105      	movs	r1, #5
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d107      	bne.n	80080fc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff fe2b 	bl	8007d50 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080fa:	e014      	b.n	8008126 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 f9b7 	bl	8009470 <USBH_LL_Start>
      break;
 8008102:	e010      	b.n	8008126 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008104:	bf00      	nop
 8008106:	e00e      	b.n	8008126 <USBH_Process+0x3b6>
      break;
 8008108:	bf00      	nop
 800810a:	e00c      	b.n	8008126 <USBH_Process+0x3b6>
      break;
 800810c:	bf00      	nop
 800810e:	e00a      	b.n	8008126 <USBH_Process+0x3b6>
    break;
 8008110:	bf00      	nop
 8008112:	e008      	b.n	8008126 <USBH_Process+0x3b6>
      break;
 8008114:	bf00      	nop
 8008116:	e006      	b.n	8008126 <USBH_Process+0x3b6>
      break;
 8008118:	bf00      	nop
 800811a:	e004      	b.n	8008126 <USBH_Process+0x3b6>
      break;
 800811c:	bf00      	nop
 800811e:	e002      	b.n	8008126 <USBH_Process+0x3b6>
      break;
 8008120:	bf00      	nop
 8008122:	e000      	b.n	8008126 <USBH_Process+0x3b6>
      break;
 8008124:	bf00      	nop
  }
  return USBH_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af04      	add	r7, sp, #16
 8008136:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800813c:	2301      	movs	r3, #1
 800813e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	2b07      	cmp	r3, #7
 8008146:	f200 81c1 	bhi.w	80084cc <USBH_HandleEnum+0x39c>
 800814a:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <USBH_HandleEnum+0x20>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	08008171 	.word	0x08008171
 8008154:	0800822f 	.word	0x0800822f
 8008158:	08008299 	.word	0x08008299
 800815c:	08008327 	.word	0x08008327
 8008160:	08008391 	.word	0x08008391
 8008164:	08008401 	.word	0x08008401
 8008168:	08008447 	.word	0x08008447
 800816c:	0800848d 	.word	0x0800848d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008170:	2108      	movs	r1, #8
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fa50 	bl	8008618 <USBH_Get_DevDesc>
 8008178:	4603      	mov	r3, r0
 800817a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d130      	bne.n	80081e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	7919      	ldrb	r1, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081a6:	b292      	uxth	r2, r2
 80081a8:	9202      	str	r2, [sp, #8]
 80081aa:	2200      	movs	r2, #0
 80081ac:	9201      	str	r2, [sp, #4]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	4603      	mov	r3, r0
 80081b2:	2280      	movs	r2, #128	; 0x80
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 ff79 	bl	80090ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	7959      	ldrb	r1, [r3, #5]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081ce:	b292      	uxth	r2, r2
 80081d0:	9202      	str	r2, [sp, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	9201      	str	r2, [sp, #4]
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	4603      	mov	r3, r0
 80081da:	2200      	movs	r2, #0
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 ff65 	bl	80090ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081e2:	e175      	b.n	80084d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	f040 8172 	bne.w	80084d0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081f2:	3301      	adds	r3, #1
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008202:	2b03      	cmp	r3, #3
 8008204:	d903      	bls.n	800820e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	220d      	movs	r2, #13
 800820a:	701a      	strb	r2, [r3, #0]
      break;
 800820c:	e160      	b.n	80084d0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	795b      	ldrb	r3, [r3, #5]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 ff99 	bl	800914c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	791b      	ldrb	r3, [r3, #4]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 ff93 	bl	800914c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	701a      	strb	r2, [r3, #0]
      break;
 800822c:	e150      	b.n	80084d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800822e:	2112      	movs	r1, #18
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f9f1 	bl	8008618 <USBH_Get_DevDesc>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008246:	e145      	b.n	80084d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b03      	cmp	r3, #3
 800824c:	f040 8142 	bne.w	80084d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008256:	3301      	adds	r3, #1
 8008258:	b2da      	uxtb	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008266:	2b03      	cmp	r3, #3
 8008268:	d903      	bls.n	8008272 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	220d      	movs	r2, #13
 800826e:	701a      	strb	r2, [r3, #0]
      break;
 8008270:	e130      	b.n	80084d4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	795b      	ldrb	r3, [r3, #5]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 ff67 	bl	800914c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	791b      	ldrb	r3, [r3, #4]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 ff61 	bl	800914c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
      break;
 8008296:	e11d      	b.n	80084d4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008298:	2101      	movs	r1, #1
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa68 	bl	8008770 <USBH_SetAddress>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d132      	bne.n	8008310 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80082aa:	2002      	movs	r0, #2
 80082ac:	f001 fa45 	bl	800973a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2203      	movs	r2, #3
 80082bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7919      	ldrb	r1, [r3, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082d2:	b292      	uxth	r2, r2
 80082d4:	9202      	str	r2, [sp, #8]
 80082d6:	2200      	movs	r2, #0
 80082d8:	9201      	str	r2, [sp, #4]
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	4603      	mov	r3, r0
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fee3 	bl	80090ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7959      	ldrb	r1, [r3, #5]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082fa:	b292      	uxth	r2, r2
 80082fc:	9202      	str	r2, [sp, #8]
 80082fe:	2200      	movs	r2, #0
 8008300:	9201      	str	r2, [sp, #4]
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	4603      	mov	r3, r0
 8008306:	2200      	movs	r2, #0
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fecf 	bl	80090ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800830e:	e0e3      	b.n	80084d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	2b03      	cmp	r3, #3
 8008314:	f040 80e0 	bne.w	80084d8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	220d      	movs	r2, #13
 800831c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	705a      	strb	r2, [r3, #1]
      break;
 8008324:	e0d8      	b.n	80084d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008326:	2109      	movs	r1, #9
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f99d 	bl	8008668 <USBH_Get_CfgDesc>
 800832e:	4603      	mov	r3, r0
 8008330:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d103      	bne.n	8008340 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2204      	movs	r2, #4
 800833c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800833e:	e0cd      	b.n	80084dc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	2b03      	cmp	r3, #3
 8008344:	f040 80ca 	bne.w	80084dc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800834e:	3301      	adds	r3, #1
 8008350:	b2da      	uxtb	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800835e:	2b03      	cmp	r3, #3
 8008360:	d903      	bls.n	800836a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	220d      	movs	r2, #13
 8008366:	701a      	strb	r2, [r3, #0]
      break;
 8008368:	e0b8      	b.n	80084dc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	795b      	ldrb	r3, [r3, #5]
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 feeb 	bl	800914c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	791b      	ldrb	r3, [r3, #4]
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fee5 	bl	800914c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
      break;
 800838e:	e0a5      	b.n	80084dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f965 	bl	8008668 <USBH_Get_CfgDesc>
 800839e:	4603      	mov	r3, r0
 80083a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d103      	bne.n	80083b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2205      	movs	r2, #5
 80083ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083ae:	e097      	b.n	80084e0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	f040 8094 	bne.w	80084e0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083be:	3301      	adds	r3, #1
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d903      	bls.n	80083da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	220d      	movs	r2, #13
 80083d6:	701a      	strb	r2, [r3, #0]
      break;
 80083d8:	e082      	b.n	80084e0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	795b      	ldrb	r3, [r3, #5]
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 feb3 	bl	800914c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	791b      	ldrb	r3, [r3, #4]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fead 	bl	800914c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
      break;
 80083fe:	e06f      	b.n	80084e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008406:	2b00      	cmp	r3, #0
 8008408:	d019      	beq.n	800843e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008416:	23ff      	movs	r3, #255	; 0xff
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f949 	bl	80086b0 <USBH_Get_StringDesc>
 800841e:	4603      	mov	r3, r0
 8008420:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2206      	movs	r2, #6
 800842c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800842e:	e059      	b.n	80084e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b03      	cmp	r3, #3
 8008434:	d156      	bne.n	80084e4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2206      	movs	r2, #6
 800843a:	705a      	strb	r2, [r3, #1]
      break;
 800843c:	e052      	b.n	80084e4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2206      	movs	r2, #6
 8008442:	705a      	strb	r2, [r3, #1]
      break;
 8008444:	e04e      	b.n	80084e4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800844c:	2b00      	cmp	r3, #0
 800844e:	d019      	beq.n	8008484 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800845c:	23ff      	movs	r3, #255	; 0xff
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f926 	bl	80086b0 <USBH_Get_StringDesc>
 8008464:	4603      	mov	r3, r0
 8008466:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2207      	movs	r2, #7
 8008472:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008474:	e038      	b.n	80084e8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	2b03      	cmp	r3, #3
 800847a:	d135      	bne.n	80084e8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2207      	movs	r2, #7
 8008480:	705a      	strb	r2, [r3, #1]
      break;
 8008482:	e031      	b.n	80084e8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2207      	movs	r2, #7
 8008488:	705a      	strb	r2, [r3, #1]
      break;
 800848a:	e02d      	b.n	80084e8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008492:	2b00      	cmp	r3, #0
 8008494:	d017      	beq.n	80084c6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084a2:	23ff      	movs	r3, #255	; 0xff
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f903 	bl	80086b0 <USBH_Get_StringDesc>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80084b8:	e018      	b.n	80084ec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d115      	bne.n	80084ec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
      break;
 80084c4:	e012      	b.n	80084ec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ca:	e00f      	b.n	80084ec <USBH_HandleEnum+0x3bc>

    default:
      break;
 80084cc:	bf00      	nop
 80084ce:	e00e      	b.n	80084ee <USBH_HandleEnum+0x3be>
      break;
 80084d0:	bf00      	nop
 80084d2:	e00c      	b.n	80084ee <USBH_HandleEnum+0x3be>
      break;
 80084d4:	bf00      	nop
 80084d6:	e00a      	b.n	80084ee <USBH_HandleEnum+0x3be>
      break;
 80084d8:	bf00      	nop
 80084da:	e008      	b.n	80084ee <USBH_HandleEnum+0x3be>
      break;
 80084dc:	bf00      	nop
 80084de:	e006      	b.n	80084ee <USBH_HandleEnum+0x3be>
      break;
 80084e0:	bf00      	nop
 80084e2:	e004      	b.n	80084ee <USBH_HandleEnum+0x3be>
      break;
 80084e4:	bf00      	nop
 80084e6:	e002      	b.n	80084ee <USBH_HandleEnum+0x3be>
      break;
 80084e8:	bf00      	nop
 80084ea:	e000      	b.n	80084ee <USBH_HandleEnum+0x3be>
      break;
 80084ec:	bf00      	nop
  }
  return Status;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f804 	bl	800853a <USBH_HandleSof>
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b0b      	cmp	r3, #11
 800854a:	d10a      	bne.n	8008562 <USBH_HandleSof+0x28>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008552:	2b00      	cmp	r3, #0
 8008554:	d005      	beq.n	8008562 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
  }
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800857a:	bf00      	nop
}
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008596:	bf00      	nop
}
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 ff58 	bl	80094a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	791b      	ldrb	r3, [r3, #4]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fda5 	bl	800914c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	795b      	ldrb	r3, [r3, #5]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fd9f 	bl	800914c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af02      	add	r7, sp, #8
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	b29b      	uxth	r3, r3
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4613      	mov	r3, r2
 8008632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008636:	2100      	movs	r1, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f864 	bl	8008706 <USBH_GetDescriptor>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	b292      	uxth	r2, r2
 8008658:	4619      	mov	r1, r3
 800865a:	f000 f918 	bl	800888e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800865e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	331c      	adds	r3, #28
 8008678:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800867a:	887b      	ldrh	r3, [r7, #2]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008684:	2100      	movs	r1, #0
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f83d 	bl	8008706 <USBH_GetDescriptor>
 800868c:	4603      	mov	r3, r0
 800868e:	72fb      	strb	r3, [r7, #11]
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d107      	bne.n	80086a6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800869c:	887a      	ldrh	r2, [r7, #2]
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 f964 	bl	800896e <USBH_ParseCfgDesc>
  }

  return status;
 80086a6:	7afb      	ldrb	r3, [r7, #11]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af02      	add	r7, sp, #8
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	461a      	mov	r2, r3
 80086bc:	460b      	mov	r3, r1
 80086be:	72fb      	strb	r3, [r7, #11]
 80086c0:	4613      	mov	r3, r2
 80086c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086cc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80086d4:	893b      	ldrh	r3, [r7, #8]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	460b      	mov	r3, r1
 80086da:	2100      	movs	r1, #0
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f812 	bl	8008706 <USBH_GetDescriptor>
 80086e2:	4603      	mov	r3, r0
 80086e4:	75fb      	strb	r3, [r7, #23]
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d107      	bne.n	80086fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086f2:	893a      	ldrh	r2, [r7, #8]
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fa37 	bl	8008b6a <USBH_ParseStringDesc>
  }

  return status;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	607b      	str	r3, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	72fb      	strb	r3, [r7, #11]
 8008714:	4613      	mov	r3, r2
 8008716:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	789b      	ldrb	r3, [r3, #2]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d11c      	bne.n	800875a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008726:	b2da      	uxtb	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2206      	movs	r2, #6
 8008730:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	893a      	ldrh	r2, [r7, #8]
 8008736:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008738:	893b      	ldrh	r3, [r7, #8]
 800873a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800873e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008742:	d104      	bne.n	800874e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f240 4209 	movw	r2, #1033	; 0x409
 800874a:	829a      	strh	r2, [r3, #20]
 800874c:	e002      	b.n	8008754 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8b3a      	ldrh	r2, [r7, #24]
 8008758:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800875a:	8b3b      	ldrh	r3, [r7, #24]
 800875c:	461a      	mov	r2, r3
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 fa50 	bl	8008c06 <USBH_CtlReq>
 8008766:	4603      	mov	r3, r0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	789b      	ldrb	r3, [r3, #2]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d10f      	bne.n	80087a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2205      	movs	r2, #5
 800878e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087a4:	2200      	movs	r2, #0
 80087a6:	2100      	movs	r1, #0
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fa2c 	bl	8008c06 <USBH_CtlReq>
 80087ae:	4603      	mov	r3, r0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	789b      	ldrb	r3, [r3, #2]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d10e      	bne.n	80087ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2209      	movs	r2, #9
 80087d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	887a      	ldrh	r2, [r7, #2]
 80087dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087ea:	2200      	movs	r2, #0
 80087ec:	2100      	movs	r1, #0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa09 	bl	8008c06 <USBH_CtlReq>
 80087f4:	4603      	mov	r3, r0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	789b      	ldrb	r3, [r3, #2]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d10f      	bne.n	8008832 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2203      	movs	r2, #3
 800881c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008832:	2200      	movs	r2, #0
 8008834:	2100      	movs	r1, #0
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f9e5 	bl	8008c06 <USBH_CtlReq>
 800883c:	4603      	mov	r3, r0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	789b      	ldrb	r3, [r3, #2]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d10f      	bne.n	800887a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f9c1 	bl	8008c06 <USBH_CtlReq>
 8008884:	4603      	mov	r3, r0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	4613      	mov	r3, r2
 800889a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	781a      	ldrb	r2, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	785a      	ldrb	r2, [r3, #1]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	3302      	adds	r3, #2
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	3303      	adds	r3, #3
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4313      	orrs	r3, r2
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	791a      	ldrb	r2, [r3, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	795a      	ldrb	r2, [r3, #5]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	799a      	ldrb	r2, [r3, #6]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	79da      	ldrb	r2, [r3, #7]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	2b08      	cmp	r3, #8
 80088ec:	d939      	bls.n	8008962 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	3308      	adds	r3, #8
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	3309      	adds	r3, #9
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	021b      	lsls	r3, r3, #8
 8008900:	b29b      	uxth	r3, r3
 8008902:	4313      	orrs	r3, r2
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	330a      	adds	r3, #10
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	b29a      	uxth	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	330b      	adds	r3, #11
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	b29b      	uxth	r3, r3
 800891e:	4313      	orrs	r3, r2
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	330c      	adds	r3, #12
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b29a      	uxth	r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	330d      	adds	r3, #13
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	b29b      	uxth	r3, r3
 800893a:	4313      	orrs	r3, r2
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	7b9a      	ldrb	r2, [r3, #14]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	7bda      	ldrb	r2, [r3, #15]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	7c1a      	ldrb	r2, [r3, #16]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	7c5a      	ldrb	r2, [r3, #17]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	745a      	strb	r2, [r3, #17]
  }
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b08a      	sub	sp, #40	; 0x28
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	4613      	mov	r3, r2
 800897a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	781a      	ldrb	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	785a      	ldrb	r2, [r3, #1]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	3302      	adds	r3, #2
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	3303      	adds	r3, #3
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	4313      	orrs	r3, r2
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	791a      	ldrb	r2, [r3, #4]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	795a      	ldrb	r2, [r3, #5]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	799a      	ldrb	r2, [r3, #6]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	79da      	ldrb	r2, [r3, #7]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	7a1a      	ldrb	r2, [r3, #8]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	2b09      	cmp	r3, #9
 80089e8:	d95f      	bls.n	8008aaa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80089ea:	2309      	movs	r3, #9
 80089ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089f2:	e051      	b.n	8008a98 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089f4:	f107 0316 	add.w	r3, r7, #22
 80089f8:	4619      	mov	r1, r3
 80089fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089fc:	f000 f8e8 	bl	8008bd0 <USBH_GetNextDesc>
 8008a00:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	d146      	bne.n	8008a98 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a0e:	221a      	movs	r2, #26
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
 8008a14:	3308      	adds	r3, #8
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	3302      	adds	r3, #2
 8008a1c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a20:	69f8      	ldr	r0, [r7, #28]
 8008a22:	f000 f846 	bl	8008ab2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a30:	e022      	b.n	8008a78 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a32:	f107 0316 	add.w	r3, r7, #22
 8008a36:	4619      	mov	r1, r3
 8008a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a3a:	f000 f8c9 	bl	8008bd0 <USBH_GetNextDesc>
 8008a3e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	785b      	ldrb	r3, [r3, #1]
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	d117      	bne.n	8008a78 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a50:	3201      	adds	r2, #1
 8008a52:	00d2      	lsls	r2, r2, #3
 8008a54:	211a      	movs	r1, #26
 8008a56:	fb01 f303 	mul.w	r3, r1, r3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	3304      	adds	r3, #4
 8008a64:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a68:	69b8      	ldr	r0, [r7, #24]
 8008a6a:	f000 f851 	bl	8008b10 <USBH_ParseEPDesc>
            ep_ix++;
 8008a6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008a72:	3301      	adds	r3, #1
 8008a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	791b      	ldrb	r3, [r3, #4]
 8008a7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d204      	bcs.n	8008a8e <USBH_ParseCfgDesc+0x120>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	885a      	ldrh	r2, [r3, #2]
 8008a88:	8afb      	ldrh	r3, [r7, #22]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d8d1      	bhi.n	8008a32 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a92:	3301      	adds	r3, #1
 8008a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d804      	bhi.n	8008aaa <USBH_ParseCfgDesc+0x13c>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	885a      	ldrh	r2, [r3, #2]
 8008aa4:	8afb      	ldrh	r3, [r7, #22]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d8a4      	bhi.n	80089f4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008aaa:	bf00      	nop
 8008aac:	3728      	adds	r7, #40	; 0x28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781a      	ldrb	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	785a      	ldrb	r2, [r3, #1]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	789a      	ldrb	r2, [r3, #2]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	78da      	ldrb	r2, [r3, #3]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	791a      	ldrb	r2, [r3, #4]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	795a      	ldrb	r2, [r3, #5]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	799a      	ldrb	r2, [r3, #6]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	79da      	ldrb	r2, [r3, #7]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	7a1a      	ldrb	r2, [r3, #8]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	721a      	strb	r2, [r3, #8]
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781a      	ldrb	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	785a      	ldrb	r2, [r3, #1]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	789a      	ldrb	r2, [r3, #2]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	78da      	ldrb	r2, [r3, #3]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	3305      	adds	r3, #5
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	021b      	lsls	r3, r3, #8
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	799a      	ldrb	r2, [r3, #6]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	719a      	strb	r2, [r3, #6]
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b087      	sub	sp, #28
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	4613      	mov	r3, r2
 8008b76:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d120      	bne.n	8008bc4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	1e9a      	subs	r2, r3, #2
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	bf28      	it	cs
 8008b8e:	4613      	movcs	r3, r2
 8008b90:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3302      	adds	r3, #2
 8008b96:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	82fb      	strh	r3, [r7, #22]
 8008b9c:	e00b      	b.n	8008bb6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b9e:	8afb      	ldrh	r3, [r7, #22]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	3301      	adds	r3, #1
 8008bae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008bb0:	8afb      	ldrh	r3, [r7, #22]
 8008bb2:	3302      	adds	r3, #2
 8008bb4:	82fb      	strh	r3, [r7, #22]
 8008bb6:	8afa      	ldrh	r2, [r7, #22]
 8008bb8:	8abb      	ldrh	r3, [r7, #20]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d3ef      	bcc.n	8008b9e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	701a      	strb	r2, [r3, #0]
  }
}
 8008bc4:	bf00      	nop
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	881a      	ldrh	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4413      	add	r3, r2
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b086      	sub	sp, #24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	4613      	mov	r3, r2
 8008c12:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c14:	2301      	movs	r3, #1
 8008c16:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	789b      	ldrb	r3, [r3, #2]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d002      	beq.n	8008c26 <USBH_CtlReq+0x20>
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d00f      	beq.n	8008c44 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c24:	e027      	b.n	8008c76 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	88fa      	ldrh	r2, [r7, #6]
 8008c30:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2201      	movs	r2, #1
 8008c36:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	75fb      	strb	r3, [r7, #23]
      break;
 8008c42:	e018      	b.n	8008c76 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 f81b 	bl	8008c80 <USBH_HandleControl>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <USBH_CtlReq+0x54>
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d106      	bne.n	8008c68 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	761a      	strb	r2, [r3, #24]
      break;
 8008c66:	e005      	b.n	8008c74 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d102      	bne.n	8008c74 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	709a      	strb	r2, [r3, #2]
      break;
 8008c74:	bf00      	nop
  }
  return status;
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af02      	add	r7, sp, #8
 8008c86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	7e1b      	ldrb	r3, [r3, #24]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	2b0a      	cmp	r3, #10
 8008c98:	f200 8158 	bhi.w	8008f4c <USBH_HandleControl+0x2cc>
 8008c9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <USBH_HandleControl+0x24>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008cd1 	.word	0x08008cd1
 8008ca8:	08008ceb 	.word	0x08008ceb
 8008cac:	08008d55 	.word	0x08008d55
 8008cb0:	08008d7b 	.word	0x08008d7b
 8008cb4:	08008db3 	.word	0x08008db3
 8008cb8:	08008ddf 	.word	0x08008ddf
 8008cbc:	08008e31 	.word	0x08008e31
 8008cc0:	08008e53 	.word	0x08008e53
 8008cc4:	08008e8f 	.word	0x08008e8f
 8008cc8:	08008eb7 	.word	0x08008eb7
 8008ccc:	08008ef5 	.word	0x08008ef5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f103 0110 	add.w	r1, r3, #16
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	795b      	ldrb	r3, [r3, #5]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f945 	bl	8008f6c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	761a      	strb	r2, [r3, #24]
      break;
 8008ce8:	e13b      	b.n	8008f62 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	795b      	ldrb	r3, [r3, #5]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fcc5 	bl	8009680 <USBH_LL_GetURBState>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d11e      	bne.n	8008d3e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	7c1b      	ldrb	r3, [r3, #16]
 8008d04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d08:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	8adb      	ldrh	r3, [r3, #22]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d12:	7b7b      	ldrb	r3, [r7, #13]
 8008d14:	2b80      	cmp	r3, #128	; 0x80
 8008d16:	d103      	bne.n	8008d20 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2203      	movs	r2, #3
 8008d1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d1e:	e117      	b.n	8008f50 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2205      	movs	r2, #5
 8008d24:	761a      	strb	r2, [r3, #24]
      break;
 8008d26:	e113      	b.n	8008f50 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008d28:	7b7b      	ldrb	r3, [r7, #13]
 8008d2a:	2b80      	cmp	r3, #128	; 0x80
 8008d2c:	d103      	bne.n	8008d36 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2209      	movs	r2, #9
 8008d32:	761a      	strb	r2, [r3, #24]
      break;
 8008d34:	e10c      	b.n	8008f50 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2207      	movs	r2, #7
 8008d3a:	761a      	strb	r2, [r3, #24]
      break;
 8008d3c:	e108      	b.n	8008f50 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	d003      	beq.n	8008d4c <USBH_HandleControl+0xcc>
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	f040 8102 	bne.w	8008f50 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	220b      	movs	r2, #11
 8008d50:	761a      	strb	r2, [r3, #24]
      break;
 8008d52:	e0fd      	b.n	8008f50 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6899      	ldr	r1, [r3, #8]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	899a      	ldrh	r2, [r3, #12]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	791b      	ldrb	r3, [r3, #4]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f93c 	bl	8008fea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2204      	movs	r2, #4
 8008d76:	761a      	strb	r2, [r3, #24]
      break;
 8008d78:	e0f3      	b.n	8008f62 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	791b      	ldrb	r3, [r3, #4]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fc7d 	bl	8009680 <USBH_LL_GetURBState>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d102      	bne.n	8008d96 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2209      	movs	r2, #9
 8008d94:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b05      	cmp	r3, #5
 8008d9a:	d102      	bne.n	8008da2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008da0:	e0d8      	b.n	8008f54 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	f040 80d5 	bne.w	8008f54 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	220b      	movs	r2, #11
 8008dae:	761a      	strb	r2, [r3, #24]
      break;
 8008db0:	e0d0      	b.n	8008f54 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6899      	ldr	r1, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	899a      	ldrh	r2, [r3, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7958      	ldrb	r0, [r3, #5]
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f8eb 	bl	8008fa0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2206      	movs	r2, #6
 8008dda:	761a      	strb	r2, [r3, #24]
      break;
 8008ddc:	e0c1      	b.n	8008f62 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	795b      	ldrb	r3, [r3, #5]
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fc4b 	bl	8009680 <USBH_LL_GetURBState>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d103      	bne.n	8008dfc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2207      	movs	r2, #7
 8008df8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008dfa:	e0ad      	b.n	8008f58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	2b05      	cmp	r3, #5
 8008e00:	d105      	bne.n	8008e0e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	220c      	movs	r2, #12
 8008e06:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e0c:	e0a4      	b.n	8008f58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d103      	bne.n	8008e1c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2205      	movs	r2, #5
 8008e18:	761a      	strb	r2, [r3, #24]
      break;
 8008e1a:	e09d      	b.n	8008f58 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	f040 809a 	bne.w	8008f58 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	220b      	movs	r2, #11
 8008e28:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e2e:	e093      	b.n	8008f58 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	791b      	ldrb	r3, [r3, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	2100      	movs	r1, #0
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f8d6 	bl	8008fea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2208      	movs	r2, #8
 8008e4e:	761a      	strb	r2, [r3, #24]

      break;
 8008e50:	e087      	b.n	8008f62 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	791b      	ldrb	r3, [r3, #4]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fc11 	bl	8009680 <USBH_LL_GetURBState>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d105      	bne.n	8008e74 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	220d      	movs	r2, #13
 8008e6c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e72:	e073      	b.n	8008f5c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d103      	bne.n	8008e82 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	220b      	movs	r2, #11
 8008e7e:	761a      	strb	r2, [r3, #24]
      break;
 8008e80:	e06c      	b.n	8008f5c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b05      	cmp	r3, #5
 8008e86:	d169      	bne.n	8008f5c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e8c:	e066      	b.n	8008f5c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	795a      	ldrb	r2, [r3, #5]
 8008e92:	2301      	movs	r3, #1
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	4613      	mov	r3, r2
 8008e98:	2200      	movs	r2, #0
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f87f 	bl	8008fa0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	220a      	movs	r2, #10
 8008eb2:	761a      	strb	r2, [r3, #24]
      break;
 8008eb4:	e055      	b.n	8008f62 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	795b      	ldrb	r3, [r3, #5]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fbdf 	bl	8009680 <USBH_LL_GetURBState>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d105      	bne.n	8008ed8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	220d      	movs	r2, #13
 8008ed4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ed6:	e043      	b.n	8008f60 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d103      	bne.n	8008ee6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2209      	movs	r2, #9
 8008ee2:	761a      	strb	r2, [r3, #24]
      break;
 8008ee4:	e03c      	b.n	8008f60 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	d139      	bne.n	8008f60 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	220b      	movs	r2, #11
 8008ef0:	761a      	strb	r2, [r3, #24]
      break;
 8008ef2:	e035      	b.n	8008f60 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	7e5b      	ldrb	r3, [r3, #25]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	765a      	strb	r2, [r3, #25]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7e5b      	ldrb	r3, [r3, #25]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d806      	bhi.n	8008f16 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f14:	e025      	b.n	8008f62 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f1c:	2106      	movs	r1, #6
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	795b      	ldrb	r3, [r3, #5]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f90c 	bl	800914c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	791b      	ldrb	r3, [r3, #4]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f906 	bl	800914c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f46:	2302      	movs	r3, #2
 8008f48:	73fb      	strb	r3, [r7, #15]
      break;
 8008f4a:	e00a      	b.n	8008f62 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008f4c:	bf00      	nop
 8008f4e:	e008      	b.n	8008f62 <USBH_HandleControl+0x2e2>
      break;
 8008f50:	bf00      	nop
 8008f52:	e006      	b.n	8008f62 <USBH_HandleControl+0x2e2>
      break;
 8008f54:	bf00      	nop
 8008f56:	e004      	b.n	8008f62 <USBH_HandleControl+0x2e2>
      break;
 8008f58:	bf00      	nop
 8008f5a:	e002      	b.n	8008f62 <USBH_HandleControl+0x2e2>
      break;
 8008f5c:	bf00      	nop
 8008f5e:	e000      	b.n	8008f62 <USBH_HandleControl+0x2e2>
      break;
 8008f60:	bf00      	nop
  }

  return status;
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af04      	add	r7, sp, #16
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f7a:	79f9      	ldrb	r1, [r7, #7]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9303      	str	r3, [sp, #12]
 8008f80:	2308      	movs	r3, #8
 8008f82:	9302      	str	r3, [sp, #8]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	2200      	movs	r2, #0
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 fb44 	bl	800961e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af04      	add	r7, sp, #16
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	4611      	mov	r1, r2
 8008fac:	461a      	mov	r2, r3
 8008fae:	460b      	mov	r3, r1
 8008fb0:	80fb      	strh	r3, [r7, #6]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008fc4:	7979      	ldrb	r1, [r7, #5]
 8008fc6:	7e3b      	ldrb	r3, [r7, #24]
 8008fc8:	9303      	str	r3, [sp, #12]
 8008fca:	88fb      	ldrh	r3, [r7, #6]
 8008fcc:	9302      	str	r3, [sp, #8]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2200      	movs	r2, #0
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 fb1f 	bl	800961e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b088      	sub	sp, #32
 8008fee:	af04      	add	r7, sp, #16
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	80fb      	strh	r3, [r7, #6]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009000:	7979      	ldrb	r1, [r7, #5]
 8009002:	2300      	movs	r3, #0
 8009004:	9303      	str	r3, [sp, #12]
 8009006:	88fb      	ldrh	r3, [r7, #6]
 8009008:	9302      	str	r3, [sp, #8]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	2301      	movs	r3, #1
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	2300      	movs	r3, #0
 8009014:	2201      	movs	r2, #1
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 fb01 	bl	800961e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800901c:	2300      	movs	r3, #0

}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b088      	sub	sp, #32
 800902a:	af04      	add	r7, sp, #16
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	4611      	mov	r1, r2
 8009032:	461a      	mov	r2, r3
 8009034:	460b      	mov	r3, r1
 8009036:	80fb      	strh	r3, [r7, #6]
 8009038:	4613      	mov	r3, r2
 800903a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800904a:	7979      	ldrb	r1, [r7, #5]
 800904c:	7e3b      	ldrb	r3, [r7, #24]
 800904e:	9303      	str	r3, [sp, #12]
 8009050:	88fb      	ldrh	r3, [r7, #6]
 8009052:	9302      	str	r3, [sp, #8]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	2301      	movs	r3, #1
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	2302      	movs	r3, #2
 800905e:	2200      	movs	r2, #0
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fadc 	bl	800961e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af04      	add	r7, sp, #16
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	4611      	mov	r1, r2
 800907c:	461a      	mov	r2, r3
 800907e:	460b      	mov	r3, r1
 8009080:	80fb      	strh	r3, [r7, #6]
 8009082:	4613      	mov	r3, r2
 8009084:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009086:	7979      	ldrb	r1, [r7, #5]
 8009088:	2300      	movs	r3, #0
 800908a:	9303      	str	r3, [sp, #12]
 800908c:	88fb      	ldrh	r3, [r7, #6]
 800908e:	9302      	str	r3, [sp, #8]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	2301      	movs	r3, #1
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	2302      	movs	r3, #2
 800909a:	2201      	movs	r2, #1
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fabe 	bl	800961e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af04      	add	r7, sp, #16
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	4608      	mov	r0, r1
 80090b6:	4611      	mov	r1, r2
 80090b8:	461a      	mov	r2, r3
 80090ba:	4603      	mov	r3, r0
 80090bc:	70fb      	strb	r3, [r7, #3]
 80090be:	460b      	mov	r3, r1
 80090c0:	70bb      	strb	r3, [r7, #2]
 80090c2:	4613      	mov	r3, r2
 80090c4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80090c6:	7878      	ldrb	r0, [r7, #1]
 80090c8:	78ba      	ldrb	r2, [r7, #2]
 80090ca:	78f9      	ldrb	r1, [r7, #3]
 80090cc:	8b3b      	ldrh	r3, [r7, #24]
 80090ce:	9302      	str	r3, [sp, #8]
 80090d0:	7d3b      	ldrb	r3, [r7, #20]
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	7c3b      	ldrb	r3, [r7, #16]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	4603      	mov	r3, r0
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa51 	bl	8009582 <USBH_LL_OpenPipe>

  return USBH_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa70 	bl	80095e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	460b      	mov	r3, r1
 8009114:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f836 	bl	8009188 <USBH_GetFreePipe>
 800911c:	4603      	mov	r3, r0
 800911e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009120:	89fb      	ldrh	r3, [r7, #14]
 8009122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009126:	4293      	cmp	r3, r2
 8009128:	d00a      	beq.n	8009140 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	89fb      	ldrh	r3, [r7, #14]
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	33e0      	adds	r3, #224	; 0xe0
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009140:	89fb      	ldrh	r3, [r7, #14]
 8009142:	b2db      	uxtb	r3, r3
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	2b0a      	cmp	r3, #10
 800915c:	d80d      	bhi.n	800917a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800915e:	78fb      	ldrb	r3, [r7, #3]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	33e0      	adds	r3, #224	; 0xe0
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	33e0      	adds	r3, #224	; 0xe0
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009194:	2300      	movs	r3, #0
 8009196:	73fb      	strb	r3, [r7, #15]
 8009198:	e00f      	b.n	80091ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	33e0      	adds	r3, #224	; 0xe0
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d102      	bne.n	80091b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	e007      	b.n	80091c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	3301      	adds	r3, #1
 80091b8:	73fb      	strb	r3, [r7, #15]
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2b0a      	cmp	r3, #10
 80091be:	d9ec      	bls.n	800919a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80091c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80091d4:	2201      	movs	r2, #1
 80091d6:	490e      	ldr	r1, [pc, #56]	; (8009210 <MX_USB_HOST_Init+0x40>)
 80091d8:	480e      	ldr	r0, [pc, #56]	; (8009214 <MX_USB_HOST_Init+0x44>)
 80091da:	f7fe fc9f 	bl	8007b1c <USBH_Init>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80091e4:	f7f7 fdf0 	bl	8000dc8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80091e8:	490b      	ldr	r1, [pc, #44]	; (8009218 <MX_USB_HOST_Init+0x48>)
 80091ea:	480a      	ldr	r0, [pc, #40]	; (8009214 <MX_USB_HOST_Init+0x44>)
 80091ec:	f7fe fd24 	bl	8007c38 <USBH_RegisterClass>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80091f6:	f7f7 fde7 	bl	8000dc8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80091fa:	4806      	ldr	r0, [pc, #24]	; (8009214 <MX_USB_HOST_Init+0x44>)
 80091fc:	f7fe fda8 	bl	8007d50 <USBH_Start>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009206:	f7f7 fddf 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800920a:	bf00      	nop
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	08009231 	.word	0x08009231
 8009214:	20000374 	.word	0x20000374
 8009218:	2000000c 	.word	0x2000000c

0800921c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009220:	4802      	ldr	r0, [pc, #8]	; (800922c <MX_USB_HOST_Process+0x10>)
 8009222:	f7fe fda5 	bl	8007d70 <USBH_Process>
}
 8009226:	bf00      	nop
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000374 	.word	0x20000374

08009230 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	3b01      	subs	r3, #1
 8009240:	2b04      	cmp	r3, #4
 8009242:	d819      	bhi.n	8009278 <USBH_UserProcess+0x48>
 8009244:	a201      	add	r2, pc, #4	; (adr r2, 800924c <USBH_UserProcess+0x1c>)
 8009246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924a:	bf00      	nop
 800924c:	08009279 	.word	0x08009279
 8009250:	08009269 	.word	0x08009269
 8009254:	08009279 	.word	0x08009279
 8009258:	08009271 	.word	0x08009271
 800925c:	08009261 	.word	0x08009261
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009260:	4b09      	ldr	r3, [pc, #36]	; (8009288 <USBH_UserProcess+0x58>)
 8009262:	2203      	movs	r2, #3
 8009264:	701a      	strb	r2, [r3, #0]
  break;
 8009266:	e008      	b.n	800927a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009268:	4b07      	ldr	r3, [pc, #28]	; (8009288 <USBH_UserProcess+0x58>)
 800926a:	2202      	movs	r2, #2
 800926c:	701a      	strb	r2, [r3, #0]
  break;
 800926e:	e004      	b.n	800927a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009270:	4b05      	ldr	r3, [pc, #20]	; (8009288 <USBH_UserProcess+0x58>)
 8009272:	2201      	movs	r2, #1
 8009274:	701a      	strb	r2, [r3, #0]
  break;
 8009276:	e000      	b.n	800927a <USBH_UserProcess+0x4a>

  default:
  break;
 8009278:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800927a:	bf00      	nop
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	200000e0 	.word	0x200000e0

0800928c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009294:	f107 0314 	add.w	r3, r7, #20
 8009298:	2200      	movs	r2, #0
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	605a      	str	r2, [r3, #4]
 800929e:	609a      	str	r2, [r3, #8]
 80092a0:	60da      	str	r2, [r3, #12]
 80092a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ac:	d147      	bne.n	800933e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092ae:	2300      	movs	r3, #0
 80092b0:	613b      	str	r3, [r7, #16]
 80092b2:	4b25      	ldr	r3, [pc, #148]	; (8009348 <HAL_HCD_MspInit+0xbc>)
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	4a24      	ldr	r2, [pc, #144]	; (8009348 <HAL_HCD_MspInit+0xbc>)
 80092b8:	f043 0301 	orr.w	r3, r3, #1
 80092bc:	6313      	str	r3, [r2, #48]	; 0x30
 80092be:	4b22      	ldr	r3, [pc, #136]	; (8009348 <HAL_HCD_MspInit+0xbc>)
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	613b      	str	r3, [r7, #16]
 80092c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80092ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092d0:	2300      	movs	r3, #0
 80092d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092d4:	2300      	movs	r3, #0
 80092d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80092d8:	f107 0314 	add.w	r3, r7, #20
 80092dc:	4619      	mov	r1, r3
 80092de:	481b      	ldr	r0, [pc, #108]	; (800934c <HAL_HCD_MspInit+0xc0>)
 80092e0:	f7f9 f9a8 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80092e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80092e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ea:	2302      	movs	r3, #2
 80092ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092f2:	2300      	movs	r3, #0
 80092f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092f6:	230a      	movs	r3, #10
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092fa:	f107 0314 	add.w	r3, r7, #20
 80092fe:	4619      	mov	r1, r3
 8009300:	4812      	ldr	r0, [pc, #72]	; (800934c <HAL_HCD_MspInit+0xc0>)
 8009302:	f7f9 f997 	bl	8002634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009306:	4b10      	ldr	r3, [pc, #64]	; (8009348 <HAL_HCD_MspInit+0xbc>)
 8009308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930a:	4a0f      	ldr	r2, [pc, #60]	; (8009348 <HAL_HCD_MspInit+0xbc>)
 800930c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009310:	6353      	str	r3, [r2, #52]	; 0x34
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
 8009316:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <HAL_HCD_MspInit+0xbc>)
 8009318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931a:	4a0b      	ldr	r2, [pc, #44]	; (8009348 <HAL_HCD_MspInit+0xbc>)
 800931c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009320:	6453      	str	r3, [r2, #68]	; 0x44
 8009322:	4b09      	ldr	r3, [pc, #36]	; (8009348 <HAL_HCD_MspInit+0xbc>)
 8009324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800932e:	2200      	movs	r2, #0
 8009330:	2100      	movs	r1, #0
 8009332:	2043      	movs	r0, #67	; 0x43
 8009334:	f7f8 fdd9 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009338:	2043      	movs	r0, #67	; 0x43
 800933a:	f7f8 fdf2 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800933e:	bf00      	nop
 8009340:	3728      	adds	r7, #40	; 0x28
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	40023800 	.word	0x40023800
 800934c:	40020000 	.word	0x40020000

08009350 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff f8d9 	bl	8008516 <USBH_LL_IncTimer>
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff f911 	bl	80085a2 <USBH_LL_Connect>
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff f91a 	bl	80085d0 <USBH_LL_Disconnect>
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
 80093b0:	4613      	mov	r3, r2
 80093b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff f8cb 	bl	800856a <USBH_LL_PortEnabled>
} 
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff f8cb 	bl	8008586 <USBH_LL_PortDisabled>
} 
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009406:	2b01      	cmp	r3, #1
 8009408:	d12a      	bne.n	8009460 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800940a:	4a18      	ldr	r2, [pc, #96]	; (800946c <USBH_LL_Init+0x74>)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a15      	ldr	r2, [pc, #84]	; (800946c <USBH_LL_Init+0x74>)
 8009416:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800941a:	4b14      	ldr	r3, [pc, #80]	; (800946c <USBH_LL_Init+0x74>)
 800941c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009420:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009422:	4b12      	ldr	r3, [pc, #72]	; (800946c <USBH_LL_Init+0x74>)
 8009424:	2208      	movs	r2, #8
 8009426:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009428:	4b10      	ldr	r3, [pc, #64]	; (800946c <USBH_LL_Init+0x74>)
 800942a:	2201      	movs	r2, #1
 800942c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800942e:	4b0f      	ldr	r3, [pc, #60]	; (800946c <USBH_LL_Init+0x74>)
 8009430:	2200      	movs	r2, #0
 8009432:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009434:	4b0d      	ldr	r3, [pc, #52]	; (800946c <USBH_LL_Init+0x74>)
 8009436:	2202      	movs	r2, #2
 8009438:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800943a:	4b0c      	ldr	r3, [pc, #48]	; (800946c <USBH_LL_Init+0x74>)
 800943c:	2200      	movs	r2, #0
 800943e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009440:	480a      	ldr	r0, [pc, #40]	; (800946c <USBH_LL_Init+0x74>)
 8009442:	f7f9 faaa 	bl	800299a <HAL_HCD_Init>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800944c:	f7f7 fcbc 	bl	8000dc8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009450:	4806      	ldr	r0, [pc, #24]	; (800946c <USBH_LL_Init+0x74>)
 8009452:	f7f9 fead 	bl	80031b0 <HAL_HCD_GetCurrentFrame>
 8009456:	4603      	mov	r3, r0
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff f84c 	bl	80084f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	2000074c 	.word	0x2000074c

08009470 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009486:	4618      	mov	r0, r3
 8009488:	f7f9 fe1a 	bl	80030c0 <HAL_HCD_Start>
 800948c:	4603      	mov	r3, r0
 800948e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f95c 	bl	8009750 <USBH_Get_USB_Status>
 8009498:	4603      	mov	r3, r0
 800949a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800949c:	7bbb      	ldrb	r3, [r7, #14]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094bc:	4618      	mov	r0, r3
 80094be:	f7f9 fe22 	bl	8003106 <HAL_HCD_Stop>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 f941 	bl	8009750 <USBH_Get_USB_Status>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80094e4:	2301      	movs	r3, #1
 80094e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7f9 fe6c 	bl	80031cc <HAL_HCD_GetCurrentSpeed>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d007      	beq.n	800950a <USBH_LL_GetSpeed+0x2e>
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d302      	bcc.n	8009504 <USBH_LL_GetSpeed+0x28>
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d006      	beq.n	8009510 <USBH_LL_GetSpeed+0x34>
 8009502:	e008      	b.n	8009516 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
    break;
 8009508:	e008      	b.n	800951c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800950a:	2301      	movs	r3, #1
 800950c:	73fb      	strb	r3, [r7, #15]
    break;
 800950e:	e005      	b.n	800951c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009510:	2302      	movs	r3, #2
 8009512:	73fb      	strb	r3, [r7, #15]
    break;
 8009514:	e002      	b.n	800951c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009516:	2301      	movs	r3, #1
 8009518:	73fb      	strb	r3, [r7, #15]
    break;
 800951a:	bf00      	nop
  }
  return  speed;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800953c:	4618      	mov	r0, r3
 800953e:	f7f9 fdff 	bl	8003140 <HAL_HCD_ResetPort>
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f901 	bl	8009750 <USBH_Get_USB_Status>
 800954e:	4603      	mov	r3, r0
 8009550:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009552:	7bbb      	ldrb	r3, [r7, #14]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800956e:	78fa      	ldrb	r2, [r7, #3]
 8009570:	4611      	mov	r1, r2
 8009572:	4618      	mov	r0, r3
 8009574:	f7f9 fe07 	bl	8003186 <HAL_HCD_HC_GetXferCount>
 8009578:	4603      	mov	r3, r0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009582:	b590      	push	{r4, r7, lr}
 8009584:	b089      	sub	sp, #36	; 0x24
 8009586:	af04      	add	r7, sp, #16
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	4608      	mov	r0, r1
 800958c:	4611      	mov	r1, r2
 800958e:	461a      	mov	r2, r3
 8009590:	4603      	mov	r3, r0
 8009592:	70fb      	strb	r3, [r7, #3]
 8009594:	460b      	mov	r3, r1
 8009596:	70bb      	strb	r3, [r7, #2]
 8009598:	4613      	mov	r3, r2
 800959a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095aa:	787c      	ldrb	r4, [r7, #1]
 80095ac:	78ba      	ldrb	r2, [r7, #2]
 80095ae:	78f9      	ldrb	r1, [r7, #3]
 80095b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095b2:	9302      	str	r3, [sp, #8]
 80095b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	4623      	mov	r3, r4
 80095c2:	f7f9 fa4c 	bl	8002a5e <HAL_HCD_HC_Init>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 f8bf 	bl	8009750 <USBH_Get_USB_Status>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd90      	pop	{r4, r7, pc}

080095e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f7f9 fac5 	bl	8002b8e <HAL_HCD_HC_Halt>
 8009604:	4603      	mov	r3, r0
 8009606:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	4618      	mov	r0, r3
 800960c:	f000 f8a0 	bl	8009750 <USBH_Get_USB_Status>
 8009610:	4603      	mov	r3, r0
 8009612:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009614:	7bbb      	ldrb	r3, [r7, #14]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800961e:	b590      	push	{r4, r7, lr}
 8009620:	b089      	sub	sp, #36	; 0x24
 8009622:	af04      	add	r7, sp, #16
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	4608      	mov	r0, r1
 8009628:	4611      	mov	r1, r2
 800962a:	461a      	mov	r2, r3
 800962c:	4603      	mov	r3, r0
 800962e:	70fb      	strb	r3, [r7, #3]
 8009630:	460b      	mov	r3, r1
 8009632:	70bb      	strb	r3, [r7, #2]
 8009634:	4613      	mov	r3, r2
 8009636:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009646:	787c      	ldrb	r4, [r7, #1]
 8009648:	78ba      	ldrb	r2, [r7, #2]
 800964a:	78f9      	ldrb	r1, [r7, #3]
 800964c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009650:	9303      	str	r3, [sp, #12]
 8009652:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009654:	9302      	str	r3, [sp, #8]
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	4623      	mov	r3, r4
 8009662:	f7f9 fab7 	bl	8002bd4 <HAL_HCD_HC_SubmitRequest>
 8009666:	4603      	mov	r3, r0
 8009668:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	4618      	mov	r0, r3
 800966e:	f000 f86f 	bl	8009750 <USBH_Get_USB_Status>
 8009672:	4603      	mov	r3, r0
 8009674:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009676:	7bbb      	ldrb	r3, [r7, #14]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	bd90      	pop	{r4, r7, pc}

08009680 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	4611      	mov	r1, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7f9 fd60 	bl	800315c <HAL_HCD_HC_GetURBState>
 800969c:	4603      	mov	r3, r0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d103      	bne.n	80096c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80096bc:	78fb      	ldrb	r3, [r7, #3]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 f872 	bl	80097a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80096c4:	20c8      	movs	r0, #200	; 0xc8
 80096c6:	f7f7 ff1f 	bl	8001508 <HAL_Delay>
  return USBH_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
 80096e0:	4613      	mov	r3, r2
 80096e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80096ec:	78fa      	ldrb	r2, [r7, #3]
 80096ee:	68f9      	ldr	r1, [r7, #12]
 80096f0:	4613      	mov	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	440b      	add	r3, r1
 80096fa:	333b      	adds	r3, #59	; 0x3b
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009702:	78fa      	ldrb	r2, [r7, #3]
 8009704:	68f9      	ldr	r1, [r7, #12]
 8009706:	4613      	mov	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	440b      	add	r3, r1
 8009710:	3350      	adds	r3, #80	; 0x50
 8009712:	78ba      	ldrb	r2, [r7, #2]
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	e009      	b.n	800972c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009718:	78fa      	ldrb	r2, [r7, #3]
 800971a:	68f9      	ldr	r1, [r7, #12]
 800971c:	4613      	mov	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	440b      	add	r3, r1
 8009726:	3351      	adds	r3, #81	; 0x51
 8009728:	78ba      	ldrb	r2, [r7, #2]
 800972a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7f7 fee0 	bl	8001508 <HAL_Delay>
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	2b03      	cmp	r3, #3
 8009762:	d817      	bhi.n	8009794 <USBH_Get_USB_Status+0x44>
 8009764:	a201      	add	r2, pc, #4	; (adr r2, 800976c <USBH_Get_USB_Status+0x1c>)
 8009766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976a:	bf00      	nop
 800976c:	0800977d 	.word	0x0800977d
 8009770:	08009783 	.word	0x08009783
 8009774:	08009789 	.word	0x08009789
 8009778:	0800978f 	.word	0x0800978f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]
    break;
 8009780:	e00b      	b.n	800979a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009782:	2302      	movs	r3, #2
 8009784:	73fb      	strb	r3, [r7, #15]
    break;
 8009786:	e008      	b.n	800979a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009788:	2301      	movs	r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
    break;
 800978c:	e005      	b.n	800979a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800978e:	2302      	movs	r3, #2
 8009790:	73fb      	strb	r3, [r7, #15]
    break;
 8009792:	e002      	b.n	800979a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009794:	2302      	movs	r3, #2
 8009796:	73fb      	strb	r3, [r7, #15]
    break;
 8009798:	bf00      	nop
  }
  return usb_status;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80097b6:	79fb      	ldrb	r3, [r7, #7]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d102      	bne.n	80097c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80097bc:	2301      	movs	r3, #1
 80097be:	73fb      	strb	r3, [r7, #15]
 80097c0:	e001      	b.n	80097c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	461a      	mov	r2, r3
 80097ca:	2101      	movs	r1, #1
 80097cc:	4803      	ldr	r0, [pc, #12]	; (80097dc <MX_DriverVbusFS+0x34>)
 80097ce:	f7f9 f8cb 	bl	8002968 <HAL_GPIO_WritePin>
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	40020800 	.word	0x40020800

080097e0 <__errno>:
 80097e0:	4b01      	ldr	r3, [pc, #4]	; (80097e8 <__errno+0x8>)
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	2000002c 	.word	0x2000002c

080097ec <__libc_init_array>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4e0d      	ldr	r6, [pc, #52]	; (8009824 <__libc_init_array+0x38>)
 80097f0:	4c0d      	ldr	r4, [pc, #52]	; (8009828 <__libc_init_array+0x3c>)
 80097f2:	1ba4      	subs	r4, r4, r6
 80097f4:	10a4      	asrs	r4, r4, #2
 80097f6:	2500      	movs	r5, #0
 80097f8:	42a5      	cmp	r5, r4
 80097fa:	d109      	bne.n	8009810 <__libc_init_array+0x24>
 80097fc:	4e0b      	ldr	r6, [pc, #44]	; (800982c <__libc_init_array+0x40>)
 80097fe:	4c0c      	ldr	r4, [pc, #48]	; (8009830 <__libc_init_array+0x44>)
 8009800:	f000 f8ea 	bl	80099d8 <_init>
 8009804:	1ba4      	subs	r4, r4, r6
 8009806:	10a4      	asrs	r4, r4, #2
 8009808:	2500      	movs	r5, #0
 800980a:	42a5      	cmp	r5, r4
 800980c:	d105      	bne.n	800981a <__libc_init_array+0x2e>
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009814:	4798      	blx	r3
 8009816:	3501      	adds	r5, #1
 8009818:	e7ee      	b.n	80097f8 <__libc_init_array+0xc>
 800981a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800981e:	4798      	blx	r3
 8009820:	3501      	adds	r5, #1
 8009822:	e7f2      	b.n	800980a <__libc_init_array+0x1e>
 8009824:	08009a1c 	.word	0x08009a1c
 8009828:	08009a1c 	.word	0x08009a1c
 800982c:	08009a1c 	.word	0x08009a1c
 8009830:	08009a20 	.word	0x08009a20

08009834 <malloc>:
 8009834:	4b02      	ldr	r3, [pc, #8]	; (8009840 <malloc+0xc>)
 8009836:	4601      	mov	r1, r0
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	f000 b861 	b.w	8009900 <_malloc_r>
 800983e:	bf00      	nop
 8009840:	2000002c 	.word	0x2000002c

08009844 <free>:
 8009844:	4b02      	ldr	r3, [pc, #8]	; (8009850 <free+0xc>)
 8009846:	4601      	mov	r1, r0
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	f000 b80b 	b.w	8009864 <_free_r>
 800984e:	bf00      	nop
 8009850:	2000002c 	.word	0x2000002c

08009854 <memset>:
 8009854:	4402      	add	r2, r0
 8009856:	4603      	mov	r3, r0
 8009858:	4293      	cmp	r3, r2
 800985a:	d100      	bne.n	800985e <memset+0xa>
 800985c:	4770      	bx	lr
 800985e:	f803 1b01 	strb.w	r1, [r3], #1
 8009862:	e7f9      	b.n	8009858 <memset+0x4>

08009864 <_free_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4605      	mov	r5, r0
 8009868:	2900      	cmp	r1, #0
 800986a:	d045      	beq.n	80098f8 <_free_r+0x94>
 800986c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009870:	1f0c      	subs	r4, r1, #4
 8009872:	2b00      	cmp	r3, #0
 8009874:	bfb8      	it	lt
 8009876:	18e4      	addlt	r4, r4, r3
 8009878:	f000 f8ac 	bl	80099d4 <__malloc_lock>
 800987c:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <_free_r+0x98>)
 800987e:	6813      	ldr	r3, [r2, #0]
 8009880:	4610      	mov	r0, r2
 8009882:	b933      	cbnz	r3, 8009892 <_free_r+0x2e>
 8009884:	6063      	str	r3, [r4, #4]
 8009886:	6014      	str	r4, [r2, #0]
 8009888:	4628      	mov	r0, r5
 800988a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800988e:	f000 b8a2 	b.w	80099d6 <__malloc_unlock>
 8009892:	42a3      	cmp	r3, r4
 8009894:	d90c      	bls.n	80098b0 <_free_r+0x4c>
 8009896:	6821      	ldr	r1, [r4, #0]
 8009898:	1862      	adds	r2, r4, r1
 800989a:	4293      	cmp	r3, r2
 800989c:	bf04      	itt	eq
 800989e:	681a      	ldreq	r2, [r3, #0]
 80098a0:	685b      	ldreq	r3, [r3, #4]
 80098a2:	6063      	str	r3, [r4, #4]
 80098a4:	bf04      	itt	eq
 80098a6:	1852      	addeq	r2, r2, r1
 80098a8:	6022      	streq	r2, [r4, #0]
 80098aa:	6004      	str	r4, [r0, #0]
 80098ac:	e7ec      	b.n	8009888 <_free_r+0x24>
 80098ae:	4613      	mov	r3, r2
 80098b0:	685a      	ldr	r2, [r3, #4]
 80098b2:	b10a      	cbz	r2, 80098b8 <_free_r+0x54>
 80098b4:	42a2      	cmp	r2, r4
 80098b6:	d9fa      	bls.n	80098ae <_free_r+0x4a>
 80098b8:	6819      	ldr	r1, [r3, #0]
 80098ba:	1858      	adds	r0, r3, r1
 80098bc:	42a0      	cmp	r0, r4
 80098be:	d10b      	bne.n	80098d8 <_free_r+0x74>
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	4401      	add	r1, r0
 80098c4:	1858      	adds	r0, r3, r1
 80098c6:	4282      	cmp	r2, r0
 80098c8:	6019      	str	r1, [r3, #0]
 80098ca:	d1dd      	bne.n	8009888 <_free_r+0x24>
 80098cc:	6810      	ldr	r0, [r2, #0]
 80098ce:	6852      	ldr	r2, [r2, #4]
 80098d0:	605a      	str	r2, [r3, #4]
 80098d2:	4401      	add	r1, r0
 80098d4:	6019      	str	r1, [r3, #0]
 80098d6:	e7d7      	b.n	8009888 <_free_r+0x24>
 80098d8:	d902      	bls.n	80098e0 <_free_r+0x7c>
 80098da:	230c      	movs	r3, #12
 80098dc:	602b      	str	r3, [r5, #0]
 80098de:	e7d3      	b.n	8009888 <_free_r+0x24>
 80098e0:	6820      	ldr	r0, [r4, #0]
 80098e2:	1821      	adds	r1, r4, r0
 80098e4:	428a      	cmp	r2, r1
 80098e6:	bf04      	itt	eq
 80098e8:	6811      	ldreq	r1, [r2, #0]
 80098ea:	6852      	ldreq	r2, [r2, #4]
 80098ec:	6062      	str	r2, [r4, #4]
 80098ee:	bf04      	itt	eq
 80098f0:	1809      	addeq	r1, r1, r0
 80098f2:	6021      	streq	r1, [r4, #0]
 80098f4:	605c      	str	r4, [r3, #4]
 80098f6:	e7c7      	b.n	8009888 <_free_r+0x24>
 80098f8:	bd38      	pop	{r3, r4, r5, pc}
 80098fa:	bf00      	nop
 80098fc:	200000e4 	.word	0x200000e4

08009900 <_malloc_r>:
 8009900:	b570      	push	{r4, r5, r6, lr}
 8009902:	1ccd      	adds	r5, r1, #3
 8009904:	f025 0503 	bic.w	r5, r5, #3
 8009908:	3508      	adds	r5, #8
 800990a:	2d0c      	cmp	r5, #12
 800990c:	bf38      	it	cc
 800990e:	250c      	movcc	r5, #12
 8009910:	2d00      	cmp	r5, #0
 8009912:	4606      	mov	r6, r0
 8009914:	db01      	blt.n	800991a <_malloc_r+0x1a>
 8009916:	42a9      	cmp	r1, r5
 8009918:	d903      	bls.n	8009922 <_malloc_r+0x22>
 800991a:	230c      	movs	r3, #12
 800991c:	6033      	str	r3, [r6, #0]
 800991e:	2000      	movs	r0, #0
 8009920:	bd70      	pop	{r4, r5, r6, pc}
 8009922:	f000 f857 	bl	80099d4 <__malloc_lock>
 8009926:	4a21      	ldr	r2, [pc, #132]	; (80099ac <_malloc_r+0xac>)
 8009928:	6814      	ldr	r4, [r2, #0]
 800992a:	4621      	mov	r1, r4
 800992c:	b991      	cbnz	r1, 8009954 <_malloc_r+0x54>
 800992e:	4c20      	ldr	r4, [pc, #128]	; (80099b0 <_malloc_r+0xb0>)
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	b91b      	cbnz	r3, 800993c <_malloc_r+0x3c>
 8009934:	4630      	mov	r0, r6
 8009936:	f000 f83d 	bl	80099b4 <_sbrk_r>
 800993a:	6020      	str	r0, [r4, #0]
 800993c:	4629      	mov	r1, r5
 800993e:	4630      	mov	r0, r6
 8009940:	f000 f838 	bl	80099b4 <_sbrk_r>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d124      	bne.n	8009992 <_malloc_r+0x92>
 8009948:	230c      	movs	r3, #12
 800994a:	6033      	str	r3, [r6, #0]
 800994c:	4630      	mov	r0, r6
 800994e:	f000 f842 	bl	80099d6 <__malloc_unlock>
 8009952:	e7e4      	b.n	800991e <_malloc_r+0x1e>
 8009954:	680b      	ldr	r3, [r1, #0]
 8009956:	1b5b      	subs	r3, r3, r5
 8009958:	d418      	bmi.n	800998c <_malloc_r+0x8c>
 800995a:	2b0b      	cmp	r3, #11
 800995c:	d90f      	bls.n	800997e <_malloc_r+0x7e>
 800995e:	600b      	str	r3, [r1, #0]
 8009960:	50cd      	str	r5, [r1, r3]
 8009962:	18cc      	adds	r4, r1, r3
 8009964:	4630      	mov	r0, r6
 8009966:	f000 f836 	bl	80099d6 <__malloc_unlock>
 800996a:	f104 000b 	add.w	r0, r4, #11
 800996e:	1d23      	adds	r3, r4, #4
 8009970:	f020 0007 	bic.w	r0, r0, #7
 8009974:	1ac3      	subs	r3, r0, r3
 8009976:	d0d3      	beq.n	8009920 <_malloc_r+0x20>
 8009978:	425a      	negs	r2, r3
 800997a:	50e2      	str	r2, [r4, r3]
 800997c:	e7d0      	b.n	8009920 <_malloc_r+0x20>
 800997e:	428c      	cmp	r4, r1
 8009980:	684b      	ldr	r3, [r1, #4]
 8009982:	bf16      	itet	ne
 8009984:	6063      	strne	r3, [r4, #4]
 8009986:	6013      	streq	r3, [r2, #0]
 8009988:	460c      	movne	r4, r1
 800998a:	e7eb      	b.n	8009964 <_malloc_r+0x64>
 800998c:	460c      	mov	r4, r1
 800998e:	6849      	ldr	r1, [r1, #4]
 8009990:	e7cc      	b.n	800992c <_malloc_r+0x2c>
 8009992:	1cc4      	adds	r4, r0, #3
 8009994:	f024 0403 	bic.w	r4, r4, #3
 8009998:	42a0      	cmp	r0, r4
 800999a:	d005      	beq.n	80099a8 <_malloc_r+0xa8>
 800999c:	1a21      	subs	r1, r4, r0
 800999e:	4630      	mov	r0, r6
 80099a0:	f000 f808 	bl	80099b4 <_sbrk_r>
 80099a4:	3001      	adds	r0, #1
 80099a6:	d0cf      	beq.n	8009948 <_malloc_r+0x48>
 80099a8:	6025      	str	r5, [r4, #0]
 80099aa:	e7db      	b.n	8009964 <_malloc_r+0x64>
 80099ac:	200000e4 	.word	0x200000e4
 80099b0:	200000e8 	.word	0x200000e8

080099b4 <_sbrk_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4c06      	ldr	r4, [pc, #24]	; (80099d0 <_sbrk_r+0x1c>)
 80099b8:	2300      	movs	r3, #0
 80099ba:	4605      	mov	r5, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	f7f7 fcc4 	bl	800134c <_sbrk>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_sbrk_r+0x1a>
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_sbrk_r+0x1a>
 80099cc:	602b      	str	r3, [r5, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20000a10 	.word	0x20000a10

080099d4 <__malloc_lock>:
 80099d4:	4770      	bx	lr

080099d6 <__malloc_unlock>:
 80099d6:	4770      	bx	lr

080099d8 <_init>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	bf00      	nop
 80099dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099de:	bc08      	pop	{r3}
 80099e0:	469e      	mov	lr, r3
 80099e2:	4770      	bx	lr

080099e4 <_fini>:
 80099e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e6:	bf00      	nop
 80099e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ea:	bc08      	pop	{r3}
 80099ec:	469e      	mov	lr, r3
 80099ee:	4770      	bx	lr
