
bateria.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009408  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009590  08009590  00019590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009608  08009608  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009610  08009610  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009610  08009610  00019610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009614  08009614  00019614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b90  200001e4  080097fc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d74  080097fc  00021d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ddb8  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fa1  00000000  00000000  0003dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001570  00000000  00000000  00041f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b8  00000000  00000000  000434e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025cd7  00000000  00000000  00044898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000158c3  00000000  00000000  0006a56f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0f70  00000000  00000000  0007fe32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150da2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a74  00000000  00000000  00150e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009578 	.word	0x08009578

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08009578 	.word	0x08009578

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <application_init>:
#include "main.h"
#include "application.h"
#include "usbd_cdc_if.h"

void application_init(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	c=0;
 80004ce:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <application_init+0xd8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
	status=0;
 80004d4:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <application_init+0xdc>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
	for (int i=0;i<ARRAYSIZE;i++){
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	e012      	b.n	8000506 <application_init+0x3e>
		ADC_values[i]=33+i;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	3321      	adds	r3, #33	; 0x21
 80004e6:	b299      	uxth	r1, r3
 80004e8:	4a2f      	ldr	r2, [pc, #188]	; (80005a8 <application_init+0xe0>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_Work_Buffer[i]=33+i;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	3321      	adds	r3, #33	; 0x21
 80004f6:	b299      	uxth	r1, r3
 80004f8:	4a2c      	ldr	r2, [pc, #176]	; (80005ac <application_init+0xe4>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0;i<ARRAYSIZE;i++){
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3301      	adds	r3, #1
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b08      	cmp	r3, #8
 800050a:	dde9      	ble.n	80004e0 <application_init+0x18>
	}


	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_values, ARRAYSIZE); //Start the conversion
 800050c:	2209      	movs	r2, #9
 800050e:	4926      	ldr	r1, [pc, #152]	; (80005a8 <application_init+0xe0>)
 8000510:	4827      	ldr	r0, [pc, #156]	; (80005b0 <application_init+0xe8>)
 8000512:	f000 fff9 	bl	8001508 <HAL_ADC_Start_DMA>
	channels[0] = 10;
 8000516:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <application_init+0xec>)
 8000518:	220a      	movs	r2, #10
 800051a:	701a      	strb	r2, [r3, #0]
	channels[1] = 10;
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <application_init+0xec>)
 800051e:	220a      	movs	r2, #10
 8000520:	705a      	strb	r2, [r3, #1]
	channels[2] = 10;
 8000522:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <application_init+0xec>)
 8000524:	220a      	movs	r2, #10
 8000526:	709a      	strb	r2, [r3, #2]
	channels[3] = 10;
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <application_init+0xec>)
 800052a:	220a      	movs	r2, #10
 800052c:	70da      	strb	r2, [r3, #3]
	channels[4] = 10;
 800052e:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <application_init+0xec>)
 8000530:	220a      	movs	r2, #10
 8000532:	711a      	strb	r2, [r3, #4]
	channels[5] = 10;
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <application_init+0xec>)
 8000536:	220a      	movs	r2, #10
 8000538:	715a      	strb	r2, [r3, #5]
	channels[6] = 10;
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <application_init+0xec>)
 800053c:	220a      	movs	r2, #10
 800053e:	719a      	strb	r2, [r3, #6]
	channels[7] = 10;
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <application_init+0xec>)
 8000542:	220a      	movs	r2, #10
 8000544:	71da      	strb	r2, [r3, #7]
	channels[8] = 10;
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <application_init+0xec>)
 8000548:	220a      	movs	r2, #10
 800054a:	721a      	strb	r2, [r3, #8]
	channels[9] = 10;
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <application_init+0xec>)
 800054e:	220a      	movs	r2, #10
 8000550:	725a      	strb	r2, [r3, #9]

	keys[0] = 38; //Snare
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <application_init+0xf0>)
 8000554:	2226      	movs	r2, #38	; 0x26
 8000556:	701a      	strb	r2, [r3, #0]
	keys[1] = 50; //Hi-Tom
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <application_init+0xf0>)
 800055a:	2232      	movs	r2, #50	; 0x32
 800055c:	705a      	strb	r2, [r3, #1]
	keys[2] = 48; //Hi mid tom
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <application_init+0xf0>)
 8000560:	2230      	movs	r2, #48	; 0x30
 8000562:	709a      	strb	r2, [r3, #2]
	keys[3] = 47; //Lo mid tom
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <application_init+0xf0>)
 8000566:	222f      	movs	r2, #47	; 0x2f
 8000568:	70da      	strb	r2, [r3, #3]
	keys[4] = 45; //lo tom
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <application_init+0xf0>)
 800056c:	222d      	movs	r2, #45	; 0x2d
 800056e:	711a      	strb	r2, [r3, #4]
	keys[5] = 43; //hi floor tom
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <application_init+0xf0>)
 8000572:	222b      	movs	r2, #43	; 0x2b
 8000574:	715a      	strb	r2, [r3, #5]
	keys[6] = 41; //lo floor tom
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <application_init+0xf0>)
 8000578:	2229      	movs	r2, #41	; 0x29
 800057a:	719a      	strb	r2, [r3, #6]
	keys[7] = 49; //crash cymb 1
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <application_init+0xf0>)
 800057e:	2231      	movs	r2, #49	; 0x31
 8000580:	71da      	strb	r2, [r3, #7]
	keys[8] = 51; //ride cynb 1
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <application_init+0xf0>)
 8000584:	2233      	movs	r2, #51	; 0x33
 8000586:	721a      	strb	r2, [r3, #8]
	keys[9] = 57; //crash cymb 2
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <application_init+0xf0>)
 800058a:	2239      	movs	r2, #57	; 0x39
 800058c:	725a      	strb	r2, [r3, #9]
	int tmp = DebugWrite("Hello world!");
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <application_init+0xf4>)
 8000590:	f000 f83a 	bl	8000608 <DebugWrite>
 8000594:	6038      	str	r0, [r7, #0]
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000224 	.word	0x20000224
 80005a4:	20000254 	.word	0x20000254
 80005a8:	20000228 	.word	0x20000228
 80005ac:	20000210 	.word	0x20000210
 80005b0:	2000034c 	.word	0x2000034c
 80005b4:	2000023c 	.word	0x2000023c
 80005b8:	20000248 	.word	0x20000248
 80005bc:	08009590 	.word	0x08009590

080005c0 <application_DMA_IRQ_Callback>:
	if(status==1){
		ADC_process();
		status=0;
	}
}
void application_DMA_IRQ_Callback(){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
	for(int i=0;i<ARRAYSIZE;i++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	e00a      	b.n	80005e2 <application_DMA_IRQ_Callback+0x22>
		ADC_Work_Buffer[i] = ADC_values[i];
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <application_DMA_IRQ_Callback+0x3c>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <application_DMA_IRQ_Callback+0x40>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<ARRAYSIZE;i++){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b08      	cmp	r3, #8
 80005e6:	ddf1      	ble.n	80005cc <application_DMA_IRQ_Callback+0xc>
	}
	status=1;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <application_DMA_IRQ_Callback+0x44>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000228 	.word	0x20000228
 8000600:	20000210 	.word	0x20000210
 8000604:	20000254 	.word	0x20000254

08000608 <DebugWrite>:
	fullCommand[1] = keys[cuerpo] 		& 0x7f;
	fullCommand[2] = veloc 				& 0x7f;
	HAL_UART_Transmit_DMA(&huart3, fullCommand, sizeof(fullCommand));
	return;
}
int DebugWrite(uint8_t* str){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	int length = myStrLen(str);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 f80c 	bl	800062e <myStrLen>
 8000616:	60f8      	str	r0, [r7, #12]
	CDC_Transmit_FS(str, length);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	b29b      	uxth	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f008 fa5e 	bl	8008ae0 <CDC_Transmit_FS>

}
 8000624:	bf00      	nop
 8000626:	4618      	mov	r0, r3
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <myStrLen>:
int myStrLen(uint8_t *p){
 800062e:	b480      	push	{r7}
 8000630:	b085      	sub	sp, #20
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	int c=0;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
	while(*p++ != 0){
 800063a:	e002      	b.n	8000642 <myStrLen+0x14>
		c++;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
	while(*p++ != 0){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f6      	bne.n	800063c <myStrLen+0xe>
	}
	return c;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fe7a 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f814 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 fa4a 	bl	8000b00 <MX_GPIO_Init>
  MX_DMA_Init();
 800066c:	f000 fa12 	bl	8000a94 <MX_DMA_Init>
  MX_I2C1_Init();
 8000670:	f000 f952 	bl	8000918 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000674:	f000 f97e 	bl	8000974 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000678:	f000 f9ac 	bl	80009d4 <MX_SPI1_Init>
  MX_ADC1_Init();
 800067c:	f000 f88a 	bl	8000794 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000680:	f000 f9de 	bl	8000a40 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000684:	f008 f96e 	bl	8008964 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  application_init();
 8000688:	f7ff ff1e 	bl	80004c8 <application_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x30>
	...

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b098      	sub	sp, #96	; 0x60
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f008 fea8 	bl	80093f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <SystemClock_Config+0xfc>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	4a30      	ldr	r2, [pc, #192]	; (800078c <SystemClock_Config+0xfc>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6413      	str	r3, [r2, #64]	; 0x40
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <SystemClock_Config+0xfc>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemClock_Config+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <SystemClock_Config+0x100>)
 80006e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ec:	6013      	str	r3, [r2, #0]
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fa:	2301      	movs	r3, #1
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000708:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070e:	2308      	movs	r3, #8
 8000710:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000712:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000716:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000724:	4618      	mov	r0, r3
 8000726:	f004 f82f 	bl	8004788 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000730:	f000 fae4 	bl	8000cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f004 fa88 	bl	8004c68 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800075e:	f000 facd 	bl	8000cfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000762:	2301      	movs	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000766:	23c0      	movs	r3, #192	; 0xc0
 8000768:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fc6a 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800077e:	f000 fabd 	bl	8000cfc <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3760      	adds	r7, #96	; 0x60
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007a6:	4b59      	ldr	r3, [pc, #356]	; (800090c <MX_ADC1_Init+0x178>)
 80007a8:	4a59      	ldr	r2, [pc, #356]	; (8000910 <MX_ADC1_Init+0x17c>)
 80007aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ac:	4b57      	ldr	r3, [pc, #348]	; (800090c <MX_ADC1_Init+0x178>)
 80007ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b4:	4b55      	ldr	r3, [pc, #340]	; (800090c <MX_ADC1_Init+0x178>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007ba:	4b54      	ldr	r3, [pc, #336]	; (800090c <MX_ADC1_Init+0x178>)
 80007bc:	2201      	movs	r2, #1
 80007be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007c0:	4b52      	ldr	r3, [pc, #328]	; (800090c <MX_ADC1_Init+0x178>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b51      	ldr	r3, [pc, #324]	; (800090c <MX_ADC1_Init+0x178>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ce:	4b4f      	ldr	r3, [pc, #316]	; (800090c <MX_ADC1_Init+0x178>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b4d      	ldr	r3, [pc, #308]	; (800090c <MX_ADC1_Init+0x178>)
 80007d6:	4a4f      	ldr	r2, [pc, #316]	; (8000914 <MX_ADC1_Init+0x180>)
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007da:	4b4c      	ldr	r3, [pc, #304]	; (800090c <MX_ADC1_Init+0x178>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 80007e0:	4b4a      	ldr	r3, [pc, #296]	; (800090c <MX_ADC1_Init+0x178>)
 80007e2:	2209      	movs	r2, #9
 80007e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007e6:	4b49      	ldr	r3, [pc, #292]	; (800090c <MX_ADC1_Init+0x178>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007ee:	4b47      	ldr	r3, [pc, #284]	; (800090c <MX_ADC1_Init+0x178>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f4:	4845      	ldr	r0, [pc, #276]	; (800090c <MX_ADC1_Init+0x178>)
 80007f6:	f000 fe43 	bl	8001480 <HAL_ADC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000800:	f000 fa7c 	bl	8000cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000804:	2301      	movs	r3, #1
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800080c:	2302      	movs	r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	483d      	ldr	r0, [pc, #244]	; (800090c <MX_ADC1_Init+0x178>)
 8000816:	f000 ff87 	bl	8001728 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000820:	f000 fa6c 	bl	8000cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000824:	2302      	movs	r3, #2
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000828:	2302      	movs	r3, #2
 800082a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4836      	ldr	r0, [pc, #216]	; (800090c <MX_ADC1_Init+0x178>)
 8000832:	f000 ff79 	bl	8001728 <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800083c:	f000 fa5e 	bl	8000cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000840:	2303      	movs	r3, #3
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000844:	2303      	movs	r3, #3
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	482f      	ldr	r0, [pc, #188]	; (800090c <MX_ADC1_Init+0x178>)
 800084e:	f000 ff6b 	bl	8001728 <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000858:	f000 fa50 	bl	8000cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800085c:	2308      	movs	r3, #8
 800085e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4828      	ldr	r0, [pc, #160]	; (800090c <MX_ADC1_Init+0x178>)
 800086a:	f000 ff5d 	bl	8001728 <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000874:	f000 fa42 	bl	8000cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000878:	2309      	movs	r3, #9
 800087a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800087c:	2305      	movs	r3, #5
 800087e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	4821      	ldr	r0, [pc, #132]	; (800090c <MX_ADC1_Init+0x178>)
 8000886:	f000 ff4f 	bl	8001728 <HAL_ADC_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000890:	f000 fa34 	bl	8000cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000894:	230b      	movs	r3, #11
 8000896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000898:	2306      	movs	r3, #6
 800089a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	481a      	ldr	r0, [pc, #104]	; (800090c <MX_ADC1_Init+0x178>)
 80008a2:	f000 ff41 	bl	8001728 <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80008ac:	f000 fa26 	bl	8000cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008b0:	230c      	movs	r3, #12
 80008b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80008b4:	2307      	movs	r3, #7
 80008b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4813      	ldr	r0, [pc, #76]	; (800090c <MX_ADC1_Init+0x178>)
 80008be:	f000 ff33 	bl	8001728 <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80008c8:	f000 fa18 	bl	8000cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008cc:	230e      	movs	r3, #14
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80008d0:	2308      	movs	r3, #8
 80008d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_ADC1_Init+0x178>)
 80008da:	f000 ff25 	bl	8001728 <HAL_ADC_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80008e4:	f000 fa0a 	bl	8000cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008e8:	2310      	movs	r3, #16
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80008ec:	2309      	movs	r3, #9
 80008ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_ADC1_Init+0x178>)
 80008f6:	f000 ff17 	bl	8001728 <HAL_ADC_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000900:	f000 f9fc 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000034c 	.word	0x2000034c
 8000910:	40012000 	.word	0x40012000
 8000914:	0f000001 	.word	0x0f000001

08000918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C1_Init+0x50>)
 800091e:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_I2C1_Init+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C1_Init+0x50>)
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_I2C1_Init+0x58>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_I2C1_Init+0x50>)
 8000936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_I2C1_Init+0x50>)
 8000956:	f001 ffbb 	bl	80028d0 <HAL_I2C_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000960:	f000 f9cc 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000298 	.word	0x20000298
 800096c:	40005400 	.word	0x40005400
 8000970:	000186a0 	.word	0x000186a0

08000974 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_I2S3_Init+0x54>)
 800097a:	4a14      	ldr	r2, [pc, #80]	; (80009cc <MX_I2S3_Init+0x58>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_I2S3_Init+0x54>)
 8000980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000984:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_I2S3_Init+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_I2S3_Init+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_I2S3_Init+0x54>)
 8000994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000998:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_I2S3_Init+0x54>)
 800099c:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <MX_I2S3_Init+0x5c>)
 800099e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_I2S3_Init+0x54>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_I2S3_Init+0x54>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_I2S3_Init+0x54>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_I2S3_Init+0x54>)
 80009b4:	f002 f8c4 	bl	8002b40 <HAL_I2S_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009be:	f000 f99d 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000044c 	.word	0x2000044c
 80009cc:	40003c00 	.word	0x40003c00
 80009d0:	00017700 	.word	0x00017700

080009d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_SPI1_Init+0x64>)
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <MX_SPI1_Init+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_SPI1_Init+0x64>)
 80009e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_SPI1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_SPI1_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_SPI1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_SPI1_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_SPI1_Init+0x64>)
 8000a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_SPI1_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_SPI1_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_SPI1_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_SPI1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_SPI1_Init+0x64>)
 8000a20:	220a      	movs	r2, #10
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_SPI1_Init+0x64>)
 8000a26:	f004 fc4f 	bl	80052c8 <HAL_SPI_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a30:	f000 f964 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200003f4 	.word	0x200003f4
 8000a3c:	40013000 	.word	0x40013000

08000a40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_USART3_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 32250;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a4c:	f647 52fa 	movw	r2, #32250	; 0x7dfa
 8000a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a78:	f004 fc8a 	bl	8005390 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f000 f93b 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000258 	.word	0x20000258
 8000a90:	40004800 	.word	0x40004800

08000a94 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_DMA_Init+0x68>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <MX_DMA_Init+0x68>)
 8000aa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_DMA_Init+0x68>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_DMA_Init+0x68>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <MX_DMA_Init+0x68>)
 8000ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <MX_DMA_Init+0x68>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	200e      	movs	r0, #14
 8000ad8:	f001 f9a1 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000adc:	200e      	movs	r0, #14
 8000ade:	f001 f9ba 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2038      	movs	r0, #56	; 0x38
 8000ae8:	f001 f999 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aec:	2038      	movs	r0, #56	; 0x38
 8000aee:	f001 f9b2 	bl	8001e56 <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	4b71      	ldr	r3, [pc, #452]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a70      	ldr	r2, [pc, #448]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b6e      	ldr	r3, [pc, #440]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	4b6a      	ldr	r3, [pc, #424]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a69      	ldr	r2, [pc, #420]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b67      	ldr	r3, [pc, #412]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b63      	ldr	r3, [pc, #396]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a62      	ldr	r2, [pc, #392]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b60      	ldr	r3, [pc, #384]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b5c      	ldr	r3, [pc, #368]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a5b      	ldr	r2, [pc, #364]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b59      	ldr	r3, [pc, #356]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b55      	ldr	r3, [pc, #340]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a54      	ldr	r2, [pc, #336]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b52      	ldr	r3, [pc, #328]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b4e      	ldr	r3, [pc, #312]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a4d      	ldr	r2, [pc, #308]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b4b      	ldr	r3, [pc, #300]	; (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	4848      	ldr	r0, [pc, #288]	; (8000ce4 <MX_GPIO_Init+0x1e4>)
 8000bc4:	f001 fe6a 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4846      	ldr	r0, [pc, #280]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000bce:	f001 fe65 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bd8:	4844      	ldr	r0, [pc, #272]	; (8000cec <MX_GPIO_Init+0x1ec>)
 8000bda:	f001 fe5f 	bl	800289c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bde:	2308      	movs	r3, #8
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	483b      	ldr	r0, [pc, #236]	; (8000ce4 <MX_GPIO_Init+0x1e4>)
 8000bf6:	f001 fcb7 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4835      	ldr	r0, [pc, #212]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000c12:	f001 fca9 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c16:	2308      	movs	r3, #8
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c26:	2305      	movs	r3, #5
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482d      	ldr	r0, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000c32:	f001 fc99 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <MX_GPIO_Init+0x1f0>)
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	482a      	ldr	r0, [pc, #168]	; (8000cf4 <MX_GPIO_Init+0x1f4>)
 8000c4a:	f001 fc8d 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0x1f8>)
 8000c62:	f001 fc81 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c78:	2305      	movs	r3, #5
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	481d      	ldr	r0, [pc, #116]	; (8000cf8 <MX_GPIO_Init+0x1f8>)
 8000c84:	f001 fc70 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000c88:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c8c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4812      	ldr	r0, [pc, #72]	; (8000cec <MX_GPIO_Init+0x1ec>)
 8000ca2:	f001 fc61 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_GPIO_Init+0x1ec>)
 8000cba:	f001 fc55 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_GPIO_Init+0x1f0>)
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_GPIO_Init+0x1e4>)
 8000cd2:	f001 fc49 	bl	8002568 <HAL_GPIO_Init>

}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	; 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	10120000 	.word	0x10120000
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020400 	.word	0x40020400

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f001 f85c 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <HAL_ADC_MspInit+0x144>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	f040 808c 	bne.w	8000e98 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	4a46      	ldr	r2, [pc, #280]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d90:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a3f      	ldr	r2, [pc, #252]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a38      	ldr	r2, [pc, #224]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <HAL_ADC_MspInit+0x148>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8000df0:	2336      	movs	r3, #54	; 0x36
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4829      	ldr	r0, [pc, #164]	; (8000ea8 <HAL_ADC_MspInit+0x14c>)
 8000e04:	f001 fbb0 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e08:	230e      	movs	r3, #14
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4824      	ldr	r0, [pc, #144]	; (8000eac <HAL_ADC_MspInit+0x150>)
 8000e1c:	f001 fba4 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e20:	2303      	movs	r3, #3
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <HAL_ADC_MspInit+0x154>)
 8000e34:	f001 fb98 	bl	8002568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_ADC_MspInit+0x15c>)
 8000e3c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e66:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e7e:	f001 f805 	bl	8001e8c <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000e88:	f7ff ff38 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e90:	639a      	str	r2, [r3, #56]	; 0x38
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_ADC_MspInit+0x158>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	; 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40012000 	.word	0x40012000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	20000394 	.word	0x20000394
 8000eb8:	40026410 	.word	0x40026410

08000ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <HAL_I2C_MspInit+0x84>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d12c      	bne.n	8000f38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_I2C_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <HAL_I2C_MspInit+0x88>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_I2C_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000efa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f00:	2312      	movs	r3, #18
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <HAL_I2C_MspInit+0x8c>)
 8000f18:	f001 fb26 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_I2C_MspInit+0x88>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_I2C_MspInit+0x88>)
 8000f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_I2C_MspInit+0x88>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40005400 	.word	0x40005400
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400

08000f4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a28      	ldr	r2, [pc, #160]	; (800100c <HAL_I2S_MspInit+0xc0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d14a      	bne.n	8001004 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <HAL_I2S_MspInit+0xc4>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a26      	ldr	r2, [pc, #152]	; (8001010 <HAL_I2S_MspInit+0xc4>)
 8000f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_I2S_MspInit+0xc4>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_I2S_MspInit+0xc4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <HAL_I2S_MspInit+0xc4>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_I2S_MspInit+0xc4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_I2S_MspInit+0xc4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <HAL_I2S_MspInit+0xc4>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_I2S_MspInit+0xc4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <HAL_I2S_MspInit+0xc8>)
 8000fde:	f001 fac3 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fe2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <HAL_I2S_MspInit+0xcc>)
 8001000:	f001 fab2 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40003c00 	.word	0x40003c00
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020800 	.word	0x40020800

0800101c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <HAL_SPI_MspInit+0x84>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12b      	bne.n	8001096 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_SPI_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001076:	23e0      	movs	r3, #224	; 0xe0
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001086:	2305      	movs	r3, #5
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_SPI_MspInit+0x8c>)
 8001092:	f001 fa69 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40013000 	.word	0x40013000
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000

080010ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a40      	ldr	r2, [pc, #256]	; (80011cc <HAL_UART_MspInit+0x120>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d179      	bne.n	80011c2 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <HAL_UART_MspInit+0x124>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a3e      	ldr	r2, [pc, #248]	; (80011d0 <HAL_UART_MspInit+0x124>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <HAL_UART_MspInit+0x124>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_UART_MspInit+0x124>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a37      	ldr	r2, [pc, #220]	; (80011d0 <HAL_UART_MspInit+0x124>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <HAL_UART_MspInit+0x124>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HAL_UART_MspInit+0x124>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <HAL_UART_MspInit+0x124>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_UART_MspInit+0x124>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001134:	2307      	movs	r3, #7
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4825      	ldr	r0, [pc, #148]	; (80011d4 <HAL_UART_MspInit+0x128>)
 8001140:	f001 fa12 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001156:	2307      	movs	r3, #7
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	481d      	ldr	r0, [pc, #116]	; (80011d8 <HAL_UART_MspInit+0x12c>)
 8001162:	f001 fa01 	bl	8002568 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_UART_MspInit+0x130>)
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_UART_MspInit+0x134>)
 800116a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_UART_MspInit+0x130>)
 800116e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001172:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_MspInit+0x130>)
 8001176:	2240      	movs	r2, #64	; 0x40
 8001178:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_UART_MspInit+0x130>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_UART_MspInit+0x130>)
 8001182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001186:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_UART_MspInit+0x130>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_UART_MspInit+0x130>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_UART_MspInit+0x130>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_UART_MspInit+0x130>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_UART_MspInit+0x130>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <HAL_UART_MspInit+0x130>)
 80011a8:	f000 fe70 	bl	8001e8c <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80011b2:	f7ff fda3 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_UART_MspInit+0x130>)
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_UART_MspInit+0x130>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004800 	.word	0x40004800
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	200002ec 	.word	0x200002ec
 80011e0:	40026058 	.word	0x40026058

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001238:	f000 f8e0 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <DMA1_Stream3_IRQHandler+0x10>)
 8001246:	f000 ff27 	bl	8002098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002ec 	.word	0x200002ec

08001254 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <DMA2_Stream0_IRQHandler+0x14>)
 800125a:	f000 ff1d 	bl	8002098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  application_DMA_IRQ_Callback();
 800125e:	f7ff f9af 	bl	80005c0 <application_DMA_IRQ_Callback>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000394 	.word	0x20000394

0800126c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <OTG_FS_IRQHandler+0x10>)
 8001272:	f002 fa55 	bl	8003720 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20001968 	.word	0x20001968

08001280 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <_sbrk+0x50>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x16>
		heap_end = &end;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <_sbrk+0x50>)
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <_sbrk+0x54>)
 8001294:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <_sbrk+0x50>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <_sbrk+0x50>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	466a      	mov	r2, sp
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d907      	bls.n	80012ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012aa:	f008 f869 	bl	8009380 <__errno>
 80012ae:	4602      	mov	r2, r0
 80012b0:	230c      	movs	r3, #12
 80012b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	e006      	b.n	80012c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <_sbrk+0x50>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <_sbrk+0x50>)
 80012c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000200 	.word	0x20000200
 80012d4:	20001d78 	.word	0x20001d78

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <SystemInit+0x28>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a07      	ldr	r2, [pc, #28]	; (8001300 <SystemInit+0x28>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SystemInit+0x28>)
 80012ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f2:	609a      	str	r2, [r3, #8]
#endif
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800133c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001308:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800130a:	e003      	b.n	8001314 <LoopCopyDataInit>

0800130c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800130e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001310:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001312:	3104      	adds	r1, #4

08001314 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001314:	480b      	ldr	r0, [pc, #44]	; (8001344 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001318:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800131a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800131c:	d3f6      	bcc.n	800130c <CopyDataInit>
  ldr  r2, =_sbss
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001320:	e002      	b.n	8001328 <LoopFillZerobss>

08001322 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001322:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001324:	f842 3b04 	str.w	r3, [r2], #4

08001328 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800132a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800132c:	d3f9      	bcc.n	8001322 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800132e:	f7ff ffd3 	bl	80012d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001332:	f008 f82b 	bl	800938c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001336:	f7ff f991 	bl	800065c <main>
  bx  lr    
 800133a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800133c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001340:	08009618 	.word	0x08009618
  ldr  r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001348:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800134c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001350:	20001d74 	.word	0x20001d74

08001354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC_IRQHandler>
	...

08001358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_Init+0x40>)
 8001362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_Init+0x40>)
 800136e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_Init+0x40>)
 800137a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 fd41 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f808 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138c:	f7ff fcbe 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023c00 	.word	0x40023c00

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x54>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x58>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fd59 	bl	8001e72 <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f000 fd21 	bl	8001e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_InitTick+0x5c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000008 	.word	0x20000008
 8001420:	20000494 	.word	0x20000494

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000494 	.word	0x20000494

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_Delay+0x40>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000008 	.word	0x20000008

08001480 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e033      	b.n	80014fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fc5c 	bl	8000d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d118      	bne.n	80014f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014c6:	f023 0302 	bic.w	r3, r3, #2
 80014ca:	f043 0202 	orr.w	r2, r3, #2
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fa4a 	bl	800196c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f023 0303 	bic.w	r3, r3, #3
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
 80014ee:	e001      	b.n	80014f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Start_DMA+0x1e>
 8001522:	2302      	movs	r3, #2
 8001524:	e0cc      	b.n	80016c0 <HAL_ADC_Start_DMA+0x1b8>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b01      	cmp	r3, #1
 800153a:	d018      	beq.n	800156e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <HAL_ADC_Start_DMA+0x1c0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a5e      	ldr	r2, [pc, #376]	; (80016cc <HAL_ADC_Start_DMA+0x1c4>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9a      	lsrs	r2, r3, #18
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001560:	e002      	b.n	8001568 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	3b01      	subs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f9      	bne.n	8001562 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b01      	cmp	r3, #1
 800157a:	f040 80a0 	bne.w	80016be <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015bc:	d106      	bne.n	80015cc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f023 0206 	bic.w	r2, r3, #6
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
 80015ca:	e002      	b.n	80015d2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_ADC_Start_DMA+0x1c8>)
 80015dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	4a3c      	ldr	r2, [pc, #240]	; (80016d4 <HAL_ADC_Start_DMA+0x1cc>)
 80015e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	4a3b      	ldr	r2, [pc, #236]	; (80016d8 <HAL_ADC_Start_DMA+0x1d0>)
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f2:	4a3a      	ldr	r2, [pc, #232]	; (80016dc <HAL_ADC_Start_DMA+0x1d4>)
 80015f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800160e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800161e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	334c      	adds	r3, #76	; 0x4c
 800162a:	4619      	mov	r1, r3
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f000 fcda 	bl	8001fe8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	2b00      	cmp	r3, #0
 800163e:	d12a      	bne.n	8001696 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <HAL_ADC_Start_DMA+0x1d8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d015      	beq.n	8001676 <HAL_ADC_Start_DMA+0x16e>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <HAL_ADC_Start_DMA+0x1dc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d105      	bne.n	8001660 <HAL_ADC_Start_DMA+0x158>
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_ADC_Start_DMA+0x1c8>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00a      	beq.n	8001676 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <HAL_ADC_Start_DMA+0x1e0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d129      	bne.n	80016be <HAL_ADC_Start_DMA+0x1b6>
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_ADC_Start_DMA+0x1c8>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	2b0f      	cmp	r3, #15
 8001674:	d823      	bhi.n	80016be <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d11c      	bne.n	80016be <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e013      	b.n	80016be <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_ADC_Start_DMA+0x1d8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d10e      	bne.n	80016be <HAL_ADC_Start_DMA+0x1b6>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d107      	bne.n	80016be <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000000 	.word	0x20000000
 80016cc:	431bde83 	.word	0x431bde83
 80016d0:	40012300 	.word	0x40012300
 80016d4:	08001b65 	.word	0x08001b65
 80016d8:	08001c1f 	.word	0x08001c1f
 80016dc:	08001c3b 	.word	0x08001c3b
 80016e0:	40012000 	.word	0x40012000
 80016e4:	40012100 	.word	0x40012100
 80016e8:	40012200 	.word	0x40012200

080016ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x1c>
 8001740:	2302      	movs	r3, #2
 8001742:	e105      	b.n	8001950 <HAL_ADC_ConfigChannel+0x228>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b09      	cmp	r3, #9
 8001752:	d925      	bls.n	80017a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68d9      	ldr	r1, [r3, #12]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	3b1e      	subs	r3, #30
 800176a:	2207      	movs	r2, #7
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43da      	mvns	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	400a      	ands	r2, r1
 8001778:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68d9      	ldr	r1, [r3, #12]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	4618      	mov	r0, r3
 800178c:	4603      	mov	r3, r0
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4403      	add	r3, r0
 8001792:	3b1e      	subs	r3, #30
 8001794:	409a      	lsls	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	e022      	b.n	80017e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6919      	ldr	r1, [r3, #16]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	2207      	movs	r2, #7
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	400a      	ands	r2, r1
 80017c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6919      	ldr	r1, [r3, #16]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4403      	add	r3, r0
 80017dc:	409a      	lsls	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d824      	bhi.n	8001838 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	3b05      	subs	r3, #5
 8001800:	221f      	movs	r2, #31
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	400a      	ands	r2, r1
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b05      	subs	r3, #5
 800182a:	fa00 f203 	lsl.w	r2, r0, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
 8001836:	e04c      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	d824      	bhi.n	800188a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b23      	subs	r3, #35	; 0x23
 8001852:	221f      	movs	r2, #31
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43da      	mvns	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	400a      	ands	r2, r1
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4618      	mov	r0, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	3b23      	subs	r3, #35	; 0x23
 800187c:	fa00 f203 	lsl.w	r2, r0, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
 8001888:	e023      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b41      	subs	r3, #65	; 0x41
 800189c:	221f      	movs	r2, #31
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	400a      	ands	r2, r1
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3b41      	subs	r3, #65	; 0x41
 80018c6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_ADC_ConfigChannel+0x234>)
 80018d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_ADC_ConfigChannel+0x238>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d109      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1cc>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b12      	cmp	r3, #18
 80018e6:	d105      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_ADC_ConfigChannel+0x238>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d123      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x21e>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d003      	beq.n	800190e <HAL_ADC_ConfigChannel+0x1e6>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b11      	cmp	r3, #17
 800190c:	d11b      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b10      	cmp	r3, #16
 8001920:	d111      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_ADC_ConfigChannel+0x23c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_ADC_ConfigChannel+0x240>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9a      	lsrs	r2, r3, #18
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001938:	e002      	b.n	8001940 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3b01      	subs	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40012300 	.word	0x40012300
 8001960:	40012000 	.word	0x40012000
 8001964:	20000000 	.word	0x20000000
 8001968:	431bde83 	.word	0x431bde83

0800196c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001974:	4b79      	ldr	r3, [pc, #484]	; (8001b5c <ADC_Init+0x1f0>)
 8001976:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	431a      	orrs	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	021a      	lsls	r2, r3, #8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6899      	ldr	r1, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <ADC_Init+0x1f4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d022      	beq.n	8001a4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6899      	ldr	r1, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6899      	ldr	r1, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	e00f      	b.n	8001a6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0202 	bic.w	r2, r2, #2
 8001a78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7e1b      	ldrb	r3, [r3, #24]
 8001a84:	005a      	lsls	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01b      	beq.n	8001ad0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ab6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6859      	ldr	r1, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	035a      	lsls	r2, r3, #13
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	e007      	b.n	8001ae0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ade:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	051a      	lsls	r2, r3, #20
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6899      	ldr	r1, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b22:	025a      	lsls	r2, r3, #9
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6899      	ldr	r1, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	029a      	lsls	r2, r3, #10
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40012300 	.word	0x40012300
 8001b60:	0f000001 	.word	0x0f000001

08001b64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d13c      	bne.n	8001bf8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d12b      	bne.n	8001bf0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d127      	bne.n	8001bf0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d119      	bne.n	8001bf0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0220 	bic.w	r2, r2, #32
 8001bca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f7ff fd7b 	bl	80016ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bf6:	e00e      	b.n	8001c16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7ff fd85 	bl	8001714 <HAL_ADC_ErrorCallback>
}
 8001c0a:	e004      	b.n	8001c16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7ff fd67 	bl	8001700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2240      	movs	r2, #64	; 0x40
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f043 0204 	orr.w	r2, r3, #4
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff fd5a 	bl	8001714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	; (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff29 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff3e 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff8e 	bl	8001d5c <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5d 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff31 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffa2 	bl	8001dc4 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff fac4 	bl	8001424 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e099      	b.n	8001fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec8:	e00f      	b.n	8001eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eca:	f7ff faab 	bl	8001424 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d908      	bls.n	8001eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e078      	b.n	8001fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e8      	bne.n	8001eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_DMA_Init+0x158>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d107      	bne.n	8001f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f023 0307 	bic.w	r3, r3, #7
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d117      	bne.n	8001fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fa6f 	bl	8002474 <DMA_CheckFifoParam>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001faa:	2301      	movs	r3, #1
 8001fac:	e016      	b.n	8001fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa26 	bl	8002408 <DMA_CalcBaseAndBitshift>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	f010803f 	.word	0xf010803f

08001fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_DMA_Start_IT+0x26>
 800200a:	2302      	movs	r3, #2
 800200c:	e040      	b.n	8002090 <HAL_DMA_Start_IT+0xa8>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d12f      	bne.n	8002082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f9b8 	bl	80023ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	223f      	movs	r2, #63	; 0x3f
 8002042:	409a      	lsls	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0216 	orr.w	r2, r2, #22
 8002056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0208 	orr.w	r2, r2, #8
 800206e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e005      	b.n	800208e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800208e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020a4:	4b92      	ldr	r3, [pc, #584]	; (80022f0 <HAL_DMA_IRQHandler+0x258>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a92      	ldr	r2, [pc, #584]	; (80022f4 <HAL_DMA_IRQHandler+0x25c>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	0a9b      	lsrs	r3, r3, #10
 80020b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	2208      	movs	r2, #8
 80020c4:	409a      	lsls	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01a      	beq.n	8002104 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0204 	bic.w	r2, r2, #4
 80020ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2208      	movs	r2, #8
 80020f2:	409a      	lsls	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	2201      	movs	r2, #1
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d012      	beq.n	800213a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2201      	movs	r2, #1
 8002128:	409a      	lsls	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f043 0202 	orr.w	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	2204      	movs	r2, #4
 8002140:	409a      	lsls	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d012      	beq.n	8002170 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2204      	movs	r2, #4
 800215e:	409a      	lsls	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	f043 0204 	orr.w	r2, r3, #4
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	2210      	movs	r2, #16
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d043      	beq.n	8002208 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d03c      	beq.n	8002208 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	2210      	movs	r2, #16
 8002194:	409a      	lsls	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d018      	beq.n	80021da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d108      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d024      	beq.n	8002208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
 80021c6:	e01f      	b.n	8002208 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01b      	beq.n	8002208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	4798      	blx	r3
 80021d8:	e016      	b.n	8002208 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d107      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0208 	bic.w	r2, r2, #8
 80021f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	2220      	movs	r2, #32
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 808e 	beq.w	8002336 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 8086 	beq.w	8002336 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2220      	movs	r2, #32
 8002230:	409a      	lsls	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b05      	cmp	r3, #5
 8002240:	d136      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0216 	bic.w	r2, r2, #22
 8002250:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002260:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <HAL_DMA_IRQHandler+0x1da>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0208 	bic.w	r2, r2, #8
 8002280:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	223f      	movs	r2, #63	; 0x3f
 8002288:	409a      	lsls	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d07d      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
        }
        return;
 80022ae:	e078      	b.n	80023a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01c      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d108      	bne.n	80022de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d030      	beq.n	8002336 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
 80022dc:	e02b      	b.n	8002336 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d027      	beq.n	8002336 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
 80022ee:	e022      	b.n	8002336 <HAL_DMA_IRQHandler+0x29e>
 80022f0:	20000000 	.word	0x20000000
 80022f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10f      	bne.n	8002326 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0210 	bic.w	r2, r2, #16
 8002314:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	2b00      	cmp	r3, #0
 800233c:	d032      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d022      	beq.n	8002390 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2205      	movs	r2, #5
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0201 	bic.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3301      	adds	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	429a      	cmp	r2, r3
 800236c:	d307      	bcc.n	800237e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f2      	bne.n	8002362 <HAL_DMA_IRQHandler+0x2ca>
 800237c:	e000      	b.n	8002380 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800237e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4798      	blx	r3
 80023a0:	e000      	b.n	80023a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80023a2:	bf00      	nop
    }
  }
}
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop

080023ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b40      	cmp	r3, #64	; 0x40
 80023d8:	d108      	bne.n	80023ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ea:	e007      	b.n	80023fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	3b10      	subs	r3, #16
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <DMA_CalcBaseAndBitshift+0x64>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002422:	4a13      	ldr	r2, [pc, #76]	; (8002470 <DMA_CalcBaseAndBitshift+0x68>)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d909      	bls.n	800244a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	1d1a      	adds	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58
 8002448:	e007      	b.n	800245a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	aaaaaaab 	.word	0xaaaaaaab
 8002470:	08009600 	.word	0x08009600

08002474 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11f      	bne.n	80024ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d855      	bhi.n	8002540 <DMA_CheckFifoParam+0xcc>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <DMA_CheckFifoParam+0x28>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024bf 	.word	0x080024bf
 80024a4:	080024ad 	.word	0x080024ad
 80024a8:	08002541 	.word	0x08002541
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d045      	beq.n	8002544 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024bc:	e042      	b.n	8002544 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024c6:	d13f      	bne.n	8002548 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024cc:	e03c      	b.n	8002548 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d6:	d121      	bne.n	800251c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d836      	bhi.n	800254c <DMA_CheckFifoParam+0xd8>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <DMA_CheckFifoParam+0x70>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	080024fb 	.word	0x080024fb
 80024ec:	080024f5 	.word	0x080024f5
 80024f0:	0800250d 	.word	0x0800250d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      break;
 80024f8:	e02f      	b.n	800255a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d024      	beq.n	8002550 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250a:	e021      	b.n	8002550 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002514:	d11e      	bne.n	8002554 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800251a:	e01b      	b.n	8002554 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d902      	bls.n	8002528 <DMA_CheckFifoParam+0xb4>
 8002522:	2b03      	cmp	r3, #3
 8002524:	d003      	beq.n	800252e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002526:	e018      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e015      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00e      	beq.n	8002558 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      break;
 800253e:	e00b      	b.n	8002558 <DMA_CheckFifoParam+0xe4>
      break;
 8002540:	bf00      	nop
 8002542:	e00a      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      break;
 8002544:	bf00      	nop
 8002546:	e008      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      break;
 8002548:	bf00      	nop
 800254a:	e006      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      break;
 800254c:	bf00      	nop
 800254e:	e004      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      break;
 8002550:	bf00      	nop
 8002552:	e002      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      break;   
 8002554:	bf00      	nop
 8002556:	e000      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      break;
 8002558:	bf00      	nop
    }
  } 
  
  return status; 
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e16b      	b.n	800285c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	429a      	cmp	r2, r3
 800259e:	f040 815a 	bne.w	8002856 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d00b      	beq.n	80025c2 <HAL_GPIO_Init+0x5a>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025b6:	2b11      	cmp	r3, #17
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b12      	cmp	r3, #18
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0xfc>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b12      	cmp	r3, #18
 8002662:	d123      	bne.n	80026ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	08da      	lsrs	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3208      	adds	r2, #8
 800266c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	08da      	lsrs	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3208      	adds	r2, #8
 80026a6:	69b9      	ldr	r1, [r7, #24]
 80026a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0203 	and.w	r2, r3, #3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80b4 	beq.w	8002856 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <HAL_GPIO_Init+0x308>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a5e      	ldr	r2, [pc, #376]	; (8002870 <HAL_GPIO_Init+0x308>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <HAL_GPIO_Init+0x308>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270a:	4a5a      	ldr	r2, [pc, #360]	; (8002874 <HAL_GPIO_Init+0x30c>)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	220f      	movs	r2, #15
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a51      	ldr	r2, [pc, #324]	; (8002878 <HAL_GPIO_Init+0x310>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02b      	beq.n	800278e <HAL_GPIO_Init+0x226>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a50      	ldr	r2, [pc, #320]	; (800287c <HAL_GPIO_Init+0x314>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d025      	beq.n	800278a <HAL_GPIO_Init+0x222>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4f      	ldr	r2, [pc, #316]	; (8002880 <HAL_GPIO_Init+0x318>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01f      	beq.n	8002786 <HAL_GPIO_Init+0x21e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4e      	ldr	r2, [pc, #312]	; (8002884 <HAL_GPIO_Init+0x31c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d019      	beq.n	8002782 <HAL_GPIO_Init+0x21a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <HAL_GPIO_Init+0x320>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x216>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4c      	ldr	r2, [pc, #304]	; (800288c <HAL_GPIO_Init+0x324>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x212>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4b      	ldr	r2, [pc, #300]	; (8002890 <HAL_GPIO_Init+0x328>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x20e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4a      	ldr	r2, [pc, #296]	; (8002894 <HAL_GPIO_Init+0x32c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x20a>
 800276e:	2307      	movs	r3, #7
 8002770:	e00e      	b.n	8002790 <HAL_GPIO_Init+0x228>
 8002772:	2308      	movs	r3, #8
 8002774:	e00c      	b.n	8002790 <HAL_GPIO_Init+0x228>
 8002776:	2306      	movs	r3, #6
 8002778:	e00a      	b.n	8002790 <HAL_GPIO_Init+0x228>
 800277a:	2305      	movs	r3, #5
 800277c:	e008      	b.n	8002790 <HAL_GPIO_Init+0x228>
 800277e:	2304      	movs	r3, #4
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x228>
 8002782:	2303      	movs	r3, #3
 8002784:	e004      	b.n	8002790 <HAL_GPIO_Init+0x228>
 8002786:	2302      	movs	r3, #2
 8002788:	e002      	b.n	8002790 <HAL_GPIO_Init+0x228>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_GPIO_Init+0x228>
 800278e:	2300      	movs	r3, #0
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f002 0203 	and.w	r2, r2, #3
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	4093      	lsls	r3, r2
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a0:	4934      	ldr	r1, [pc, #208]	; (8002874 <HAL_GPIO_Init+0x30c>)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ae:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <HAL_GPIO_Init+0x330>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d2:	4a31      	ldr	r2, [pc, #196]	; (8002898 <HAL_GPIO_Init+0x330>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027d8:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <HAL_GPIO_Init+0x330>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fc:	4a26      	ldr	r2, [pc, #152]	; (8002898 <HAL_GPIO_Init+0x330>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002802:	4b25      	ldr	r3, [pc, #148]	; (8002898 <HAL_GPIO_Init+0x330>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002826:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <HAL_GPIO_Init+0x330>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_GPIO_Init+0x330>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_GPIO_Init+0x330>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3301      	adds	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	f67f ae90 	bls.w	8002584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002864:	bf00      	nop
 8002866:	3724      	adds	r7, #36	; 0x24
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40023800 	.word	0x40023800
 8002874:	40013800 	.word	0x40013800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40021400 	.word	0x40021400
 8002890:	40021800 	.word	0x40021800
 8002894:	40021c00 	.word	0x40021c00
 8002898:	40013c00 	.word	0x40013c00

0800289c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
 80028a8:	4613      	mov	r3, r2
 80028aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ac:	787b      	ldrb	r3, [r7, #1]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b8:	e003      	b.n	80028c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ba:	887b      	ldrh	r3, [r7, #2]
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	619a      	str	r2, [r3, #24]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e11f      	b.n	8002b22 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fae0 	bl	8000ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002934:	f002 fb62 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8002938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a7b      	ldr	r2, [pc, #492]	; (8002b2c <HAL_I2C_Init+0x25c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d807      	bhi.n	8002954 <HAL_I2C_Init+0x84>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a7a      	ldr	r2, [pc, #488]	; (8002b30 <HAL_I2C_Init+0x260>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e006      	b.n	8002962 <HAL_I2C_Init+0x92>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a77      	ldr	r2, [pc, #476]	; (8002b34 <HAL_I2C_Init+0x264>)
 8002958:	4293      	cmp	r3, r2
 800295a:	bf94      	ite	ls
 800295c:	2301      	movls	r3, #1
 800295e:	2300      	movhi	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0db      	b.n	8002b22 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a72      	ldr	r2, [pc, #456]	; (8002b38 <HAL_I2C_Init+0x268>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a64      	ldr	r2, [pc, #400]	; (8002b2c <HAL_I2C_Init+0x25c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d802      	bhi.n	80029a4 <HAL_I2C_Init+0xd4>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	e009      	b.n	80029b8 <HAL_I2C_Init+0xe8>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a63      	ldr	r2, [pc, #396]	; (8002b3c <HAL_I2C_Init+0x26c>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	3301      	adds	r3, #1
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4956      	ldr	r1, [pc, #344]	; (8002b2c <HAL_I2C_Init+0x25c>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d80d      	bhi.n	80029f4 <HAL_I2C_Init+0x124>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e59      	subs	r1, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	bf38      	it	cc
 80029f0:	2304      	movcc	r3, #4
 80029f2:	e04f      	b.n	8002a94 <HAL_I2C_Init+0x1c4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d111      	bne.n	8002a20 <HAL_I2C_Init+0x150>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	440b      	add	r3, r1
 8002a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e012      	b.n	8002a46 <HAL_I2C_Init+0x176>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1e58      	subs	r0, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	0099      	lsls	r1, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a36:	3301      	adds	r3, #1
 8002a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Init+0x17e>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e022      	b.n	8002a94 <HAL_I2C_Init+0x1c4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <HAL_I2C_Init+0x1a4>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1e58      	subs	r0, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	440b      	add	r3, r1
 8002a64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a72:	e00f      	b.n	8002a94 <HAL_I2C_Init+0x1c4>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	0099      	lsls	r1, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	6809      	ldr	r1, [r1, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ac2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6911      	ldr	r1, [r2, #16]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68d2      	ldr	r2, [r2, #12]
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	000186a0 	.word	0x000186a0
 8002b30:	001e847f 	.word	0x001e847f
 8002b34:	003d08ff 	.word	0x003d08ff
 8002b38:	431bde83 	.word	0x431bde83
 8002b3c:	10624dd3 	.word	0x10624dd3

08002b40 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e128      	b.n	8002da4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a90      	ldr	r2, [pc, #576]	; (8002dac <HAL_I2S_Init+0x26c>)
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7fe f9ed 	bl	8000f4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b88:	f023 030f 	bic.w	r3, r3, #15
 8002b8c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2202      	movs	r2, #2
 8002b94:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d060      	beq.n	8002c60 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002ba6:	2310      	movs	r3, #16
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e001      	b.n	8002bb0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d802      	bhi.n	8002bbe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f002 fb26 	bl	8005210 <HAL_RCCEx_GetPeriphCLKFreq>
 8002bc4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bce:	d125      	bne.n	8002c1c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	461a      	mov	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	3305      	adds	r3, #5
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e01f      	b.n	8002c3a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	3305      	adds	r3, #5
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	e00e      	b.n	8002c3a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	3305      	adds	r3, #5
 8002c38:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4a5c      	ldr	r2, [pc, #368]	; (8002db0 <HAL_I2S_Init+0x270>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	08db      	lsrs	r3, r3, #3
 8002c44:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	e003      	b.n	8002c68 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002c60:	2302      	movs	r3, #2
 8002c62:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d902      	bls.n	8002c74 <HAL_I2S_Init+0x134>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	2bff      	cmp	r3, #255	; 0xff
 8002c72:	d907      	bls.n	8002c84 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	f043 0210 	orr.w	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e08f      	b.n	8002da4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	ea42 0103 	orr.w	r1, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ca2:	f023 030f 	bic.w	r3, r3, #15
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6851      	ldr	r1, [r2, #4]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6892      	ldr	r2, [r2, #8]
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68d2      	ldr	r2, [r2, #12]
 8002cb4:	4311      	orrs	r1, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6992      	ldr	r2, [r2, #24]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d161      	bne.n	8002d94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <HAL_I2S_Init+0x274>)
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a37      	ldr	r2, [pc, #220]	; (8002db8 <HAL_I2S_Init+0x278>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d101      	bne.n	8002ce4 <HAL_I2S_Init+0x1a4>
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_I2S_Init+0x27c>)
 8002ce2:	e001      	b.n	8002ce8 <HAL_I2S_Init+0x1a8>
 8002ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	4932      	ldr	r1, [pc, #200]	; (8002db8 <HAL_I2S_Init+0x278>)
 8002cf0:	428a      	cmp	r2, r1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_I2S_Init+0x1b8>
 8002cf4:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <HAL_I2S_Init+0x27c>)
 8002cf6:	e001      	b.n	8002cfc <HAL_I2S_Init+0x1bc>
 8002cf8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002cfc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d00:	f023 030f 	bic.w	r3, r3, #15
 8002d04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2b      	ldr	r2, [pc, #172]	; (8002db8 <HAL_I2S_Init+0x278>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_I2S_Init+0x1d4>
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_I2S_Init+0x27c>)
 8002d12:	e001      	b.n	8002d18 <HAL_I2S_Init+0x1d8>
 8002d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d18:	2202      	movs	r2, #2
 8002d1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a25      	ldr	r2, [pc, #148]	; (8002db8 <HAL_I2S_Init+0x278>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_I2S_Init+0x1ea>
 8002d26:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_I2S_Init+0x27c>)
 8002d28:	e001      	b.n	8002d2e <HAL_I2S_Init+0x1ee>
 8002d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3a:	d003      	beq.n	8002d44 <HAL_I2S_Init+0x204>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e001      	b.n	8002d50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	b299      	uxth	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002d66:	4303      	orrs	r3, r0
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <HAL_I2S_Init+0x278>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d101      	bne.n	8002d8c <HAL_I2S_Init+0x24c>
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_I2S_Init+0x27c>)
 8002d8a:	e001      	b.n	8002d90 <HAL_I2S_Init+0x250>
 8002d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d90:	897a      	ldrh	r2, [r7, #10]
 8002d92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	08002eb7 	.word	0x08002eb7
 8002db0:	cccccccd 	.word	0xcccccccd
 8002db4:	08002fcd 	.word	0x08002fcd
 8002db8:	40003800 	.word	0x40003800
 8002dbc:	40003400 	.word	0x40003400

08002dc0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10e      	bne.n	8002e50 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ffb8 	bl	8002dc0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	1c9a      	adds	r2, r3, #2
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10e      	bne.n	8002eae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ff93 	bl	8002dd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d13a      	bne.n	8002f48 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d109      	bne.n	8002ef0 <I2S_IRQHandler+0x3a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d102      	bne.n	8002ef0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ffb4 	bl	8002e58 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d126      	bne.n	8002f48 <I2S_IRQHandler+0x92>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d11f      	bne.n	8002f48 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f043 0202 	orr.w	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ff50 	bl	8002de8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d136      	bne.n	8002fc2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d109      	bne.n	8002f72 <I2S_IRQHandler+0xbc>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d102      	bne.n	8002f72 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff45 	bl	8002dfc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d122      	bne.n	8002fc2 <I2S_IRQHandler+0x10c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d11b      	bne.n	8002fc2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f98:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff13 	bl	8002de8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4aa2      	ldr	r2, [pc, #648]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002fe6:	4ba2      	ldr	r3, [pc, #648]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fe8:	e001      	b.n	8002fee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002fea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a9b      	ldr	r2, [pc, #620]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003004:	4b9a      	ldr	r3, [pc, #616]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003006:	e001      	b.n	800300c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d004      	beq.n	8003024 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 8099 	bne.w	8003156 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f925 	bl	8003288 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d107      	bne.n	8003058 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9c8 	bl	80033e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d13a      	bne.n	80030d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d035      	beq.n	80030d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a7e      	ldr	r2, [pc, #504]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003076:	4b7e      	ldr	r3, [pc, #504]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003078:	e001      	b.n	800307e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800307a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4979      	ldr	r1, [pc, #484]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003086:	428b      	cmp	r3, r1
 8003088:	d101      	bne.n	800308e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800308a:	4b79      	ldr	r3, [pc, #484]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800308c:	e001      	b.n	8003092 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800308e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003092:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003096:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fe88 	bl	8002de8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b08      	cmp	r3, #8
 80030e0:	f040 80be 	bne.w	8003260 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80b8 	beq.w	8003260 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a59      	ldr	r2, [pc, #356]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800310a:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800310c:	e001      	b.n	8003112 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800310e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4954      	ldr	r1, [pc, #336]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800311a:	428b      	cmp	r3, r1
 800311c:	d101      	bne.n	8003122 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800311e:	4b54      	ldr	r3, [pc, #336]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003120:	e001      	b.n	8003126 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003126:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800312a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f043 0204 	orr.w	r2, r3, #4
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff fe4a 	bl	8002de8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003154:	e084      	b.n	8003260 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d107      	bne.n	8003170 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8be 	bl	80032ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f8fd 	bl	8003384 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d12f      	bne.n	80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02a      	beq.n	80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031ac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2e      	ldr	r2, [pc, #184]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d101      	bne.n	80031bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031ba:	e001      	b.n	80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80031bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4929      	ldr	r1, [pc, #164]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031c8:	428b      	cmp	r3, r1
 80031ca:	d101      	bne.n	80031d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80031cc:	4b28      	ldr	r3, [pc, #160]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031ce:	e001      	b.n	80031d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80031d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f043 0202 	orr.w	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fdfa 	bl	8002de8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d131      	bne.n	8003262 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d02c      	beq.n	8003262 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a17      	ldr	r2, [pc, #92]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003214:	e001      	b.n	800321a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4912      	ldr	r1, [pc, #72]	; (800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003222:	428b      	cmp	r3, r1
 8003224:	d101      	bne.n	800322a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003228:	e001      	b.n	800322e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800322a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800322e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003232:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003242:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f043 0204 	orr.w	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fdc5 	bl	8002de8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800325e:	e000      	b.n	8003262 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003260:	bf00      	nop
}
 8003262:	bf00      	nop
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40003800 	.word	0x40003800
 8003270:	40003400 	.word	0x40003400

08003274 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	1c99      	adds	r1, r3, #2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6251      	str	r1, [r2, #36]	; 0x24
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d113      	bne.n	80032e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d106      	bne.n	80032e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ffc9 	bl	8003274 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c99      	adds	r1, r3, #2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6251      	str	r1, [r2, #36]	; 0x24
 80032fe:	8819      	ldrh	r1, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <I2SEx_TxISR_I2SExt+0x90>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <I2SEx_TxISR_I2SExt+0x22>
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <I2SEx_TxISR_I2SExt+0x94>)
 800330c:	e001      	b.n	8003312 <I2SEx_TxISR_I2SExt+0x26>
 800330e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003312:	460a      	mov	r2, r1
 8003314:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d121      	bne.n	8003372 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <I2SEx_TxISR_I2SExt+0x90>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <I2SEx_TxISR_I2SExt+0x50>
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <I2SEx_TxISR_I2SExt+0x94>)
 800333a:	e001      	b.n	8003340 <I2SEx_TxISR_I2SExt+0x54>
 800333c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	490d      	ldr	r1, [pc, #52]	; (800337c <I2SEx_TxISR_I2SExt+0x90>)
 8003348:	428b      	cmp	r3, r1
 800334a:	d101      	bne.n	8003350 <I2SEx_TxISR_I2SExt+0x64>
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <I2SEx_TxISR_I2SExt+0x94>)
 800334e:	e001      	b.n	8003354 <I2SEx_TxISR_I2SExt+0x68>
 8003350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003354:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003358:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff81 	bl	8003274 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40003800 	.word	0x40003800
 8003380:	40003400 	.word	0x40003400

08003384 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68d8      	ldr	r0, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	1c99      	adds	r1, r3, #2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800339c:	b282      	uxth	r2, r0
 800339e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d113      	bne.n	80033e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ff4a 	bl	8003274 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <I2SEx_RxISR_I2SExt+0x90>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <I2SEx_RxISR_I2SExt+0x16>
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <I2SEx_RxISR_I2SExt+0x94>)
 80033fc:	e001      	b.n	8003402 <I2SEx_RxISR_I2SExt+0x1a>
 80033fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003402:	68d8      	ldr	r0, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	1c99      	adds	r1, r3, #2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800340e:	b282      	uxth	r2, r0
 8003410:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d121      	bne.n	800346e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <I2SEx_RxISR_I2SExt+0x90>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <I2SEx_RxISR_I2SExt+0x50>
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <I2SEx_RxISR_I2SExt+0x94>)
 8003436:	e001      	b.n	800343c <I2SEx_RxISR_I2SExt+0x54>
 8003438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	490d      	ldr	r1, [pc, #52]	; (8003478 <I2SEx_RxISR_I2SExt+0x90>)
 8003444:	428b      	cmp	r3, r1
 8003446:	d101      	bne.n	800344c <I2SEx_RxISR_I2SExt+0x64>
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <I2SEx_RxISR_I2SExt+0x94>)
 800344a:	e001      	b.n	8003450 <I2SEx_RxISR_I2SExt+0x68>
 800344c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003450:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003454:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d106      	bne.n	800346e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff03 	bl	8003274 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40003800 	.word	0x40003800
 800347c:	40003400 	.word	0x40003400

08003480 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003482:	b08f      	sub	sp, #60	; 0x3c
 8003484:	af0a      	add	r7, sp, #40	; 0x28
 8003486:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e10f      	b.n	80036b2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f005 fc5d 	bl	8008d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2203      	movs	r2, #3
 80034b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 fc3c 	bl	8005d4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	687e      	ldr	r6, [r7, #4]
 80034de:	466d      	mov	r5, sp
 80034e0:	f106 0410 	add.w	r4, r6, #16
 80034e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80034f4:	1d33      	adds	r3, r6, #4
 80034f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f8:	6838      	ldr	r0, [r7, #0]
 80034fa:	f002 fb13 	bl	8005b24 <USB_CoreInit>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0d0      	b.n	80036b2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f002 fc2a 	bl	8005d70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e04a      	b.n	80035b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	333d      	adds	r3, #61	; 0x3d
 8003532:	2201      	movs	r2, #1
 8003534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	333c      	adds	r3, #60	; 0x3c
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	b298      	uxth	r0, r3
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3342      	adds	r3, #66	; 0x42
 800355e:	4602      	mov	r2, r0
 8003560:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	333f      	adds	r3, #63	; 0x3f
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	3344      	adds	r3, #68	; 0x44
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3348      	adds	r3, #72	; 0x48
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3350      	adds	r3, #80	; 0x50
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	3301      	adds	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3af      	bcc.n	8003522 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	e044      	b.n	8003652 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	3301      	adds	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d3b5      	bcc.n	80035c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	687e      	ldr	r6, [r7, #4]
 8003664:	466d      	mov	r5, sp
 8003666:	f106 0410 	add.w	r4, r6, #16
 800366a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003676:	e885 0003 	stmia.w	r5, {r0, r1}
 800367a:	1d33      	adds	r3, r6, #4
 800367c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800367e:	6838      	ldr	r0, [r7, #0]
 8003680:	f002 fba0 	bl	8005dc4 <USB_DevInit>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e00d      	b.n	80036b2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 fbdf 	bl	8006e6e <USB_DevDisconnect>

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_PCD_Start+0x1c>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e020      	b.n	8003718 <HAL_PCD_Start+0x5e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d109      	bne.n	80036fa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d005      	beq.n	80036fa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f003 fb9d 	bl	8006e3e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f002 fb0f 	bl	8005d2c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b08d      	sub	sp, #52	; 0x34
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f003 fc44 	bl	8006fc4 <USB_GetMode>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 839d 	bne.w	8003e7e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f003 fba8 	bl	8006e9e <USB_ReadInterrupts>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8393 	beq.w	8003e7c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f003 fb9f 	bl	8006e9e <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b02      	cmp	r3, #2
 8003768:	d107      	bne.n	800377a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f002 0202 	and.w	r2, r2, #2
 8003778:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f003 fb8d 	bl	8006e9e <USB_ReadInterrupts>
 8003784:	4603      	mov	r3, r0
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b10      	cmp	r3, #16
 800378c:	d161      	bne.n	8003852 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0210 	bic.w	r2, r2, #16
 800379c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f003 020f 	and.w	r2, r3, #15
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	3304      	adds	r3, #4
 80037bc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	0c5b      	lsrs	r3, r3, #17
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d124      	bne.n	8003814 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d035      	beq.n	8003842 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	6a38      	ldr	r0, [r7, #32]
 80037ea:	f003 fa05 	bl	8006bf8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037fa:	441a      	add	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800380c:	441a      	add	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	619a      	str	r2, [r3, #24]
 8003812:	e016      	b.n	8003842 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	0c5b      	lsrs	r3, r3, #17
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	2b06      	cmp	r3, #6
 800381e:	d110      	bne.n	8003842 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003826:	2208      	movs	r2, #8
 8003828:	4619      	mov	r1, r3
 800382a:	6a38      	ldr	r0, [r7, #32]
 800382c:	f003 f9e4 	bl	8006bf8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800383c:	441a      	add	r2, r3
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699a      	ldr	r2, [r3, #24]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0210 	orr.w	r2, r2, #16
 8003850:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f003 fb21 	bl	8006e9e <USB_ReadInterrupts>
 800385c:	4603      	mov	r3, r0
 800385e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003862:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003866:	d16e      	bne.n	8003946 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f003 fb27 	bl	8006ec4 <USB_ReadDevAllOutEpInterrupt>
 8003876:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003878:	e062      	b.n	8003940 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d057      	beq.n	8003934 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fb4c 	bl	8006f2c <USB_ReadDevOutEPInterrupt>
 8003894:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00c      	beq.n	80038ba <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	2301      	movs	r3, #1
 80038b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fdb1 	bl	800441c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00c      	beq.n	80038de <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d0:	461a      	mov	r2, r3
 80038d2:	2308      	movs	r3, #8
 80038d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 feab 	bl	8004634 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	2310      	movs	r3, #16
 80038f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	461a      	mov	r2, r3
 8003912:	2320      	movs	r3, #32
 8003914:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	461a      	mov	r2, r3
 800392e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003932:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	3301      	adds	r3, #1
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d199      	bne.n	800387a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f003 faa7 	bl	8006e9e <USB_ReadInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800395a:	f040 80c0 	bne.w	8003ade <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f003 fac8 	bl	8006ef8 <USB_ReadDevAllInEpInterrupt>
 8003968:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800396e:	e0b2      	b.n	8003ad6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80a7 	beq.w	8003aca <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f003 faee 	bl	8006f68 <USB_ReadDevInEPInterrupt>
 800398c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d057      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	2201      	movs	r2, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69f9      	ldr	r1, [r7, #28]
 80039b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039b8:	4013      	ands	r3, r2
 80039ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	461a      	mov	r2, r3
 80039ca:	2301      	movs	r3, #1
 80039cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d132      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	3348      	adds	r3, #72	; 0x48
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4403      	add	r3, r0
 80039f6:	3344      	adds	r3, #68	; 0x44
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4419      	add	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4403      	add	r3, r0
 8003a0a:	3348      	adds	r3, #72	; 0x48
 8003a0c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d113      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x31c>
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	3350      	adds	r3, #80	; 0x50
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d108      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a34:	461a      	mov	r2, r3
 8003a36:	2101      	movs	r1, #1
 8003a38:	f003 faf6 	bl	8007028 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f005 fa21 	bl	8008e8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2308      	movs	r3, #8
 8003a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a96:	461a      	mov	r2, r3
 8003a98:	2340      	movs	r3, #64	; 0x40
 8003a9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fc1b 	bl	8004300 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	3301      	adds	r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	085b      	lsrs	r3, r3, #1
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f47f af49 	bne.w	8003970 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 f9db 	bl	8006e9e <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003af2:	d122      	bne.n	8003b3a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d108      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fe27 	bl	8004770 <HAL_PCDEx_LPM_Callback>
 8003b22:	e002      	b.n	8003b2a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f005 fa27 	bl	8008f78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f003 f9ad 	bl	8006e9e <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4e:	d112      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d102      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f005 f9e3 	bl	8008f2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b74:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 f98f 	bl	8006e9e <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	f040 80c7 	bne.w	8003d1c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2110      	movs	r1, #16
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f002 fa6f 	bl	800608c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb2:	e056      	b.n	8003c62 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bc6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003be6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	461a      	mov	r2, r3
 8003c16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4c:	0151      	lsls	r1, r2, #5
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	440a      	add	r2, r1
 8003c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	3301      	adds	r3, #1
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d3a3      	bcc.n	8003bb4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c7a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c7e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d016      	beq.n	8003cb6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c98:	f043 030b 	orr.w	r3, r3, #11
 8003c9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cae:	f043 030b 	orr.w	r3, r3, #11
 8003cb2:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb4:	e015      	b.n	8003ce2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cc8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ccc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cdc:	f043 030b 	orr.w	r3, r3, #11
 8003ce0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cf4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d06:	461a      	mov	r2, r3
 8003d08:	f003 f98e 	bl	8007028 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 f8bc 	bl	8006e9e <USB_ReadInterrupts>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d30:	d124      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f003 f952 	bl	8006fe0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f002 fa04 	bl	800614e <USB_GetDevSpeed>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681c      	ldr	r4, [r3, #0]
 8003d52:	f001 f947 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8003d56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4620      	mov	r0, r4
 8003d62:	f001 ff41 	bl	8005be8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f005 f8b7 	bl	8008eda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f003 f88c 	bl	8006e9e <USB_ReadInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d10a      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f005 f894 	bl	8008ebe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f002 0208 	and.w	r2, r2, #8
 8003da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 f877 	bl	8006e9e <USB_ReadInterrupts>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dba:	d10f      	bne.n	8003ddc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f005 f8f6 	bl	8008fb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f003 f85c 	bl	8006e9e <USB_ReadInterrupts>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003df0:	d10f      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f005 f8c9 	bl	8008f94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 f841 	bl	8006e9e <USB_ReadInterrupts>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e26:	d10a      	bne.n	8003e3e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f005 f8d7 	bl	8008fdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f003 f82b 	bl	8006e9e <USB_ReadInterrupts>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d115      	bne.n	8003e7e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f005 f8c7 	bl	8008ff8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	e000      	b.n	8003e7e <HAL_PCD_IRQHandler+0x75e>
      return;
 8003e7c:	bf00      	nop
    }
  }
}
 8003e7e:	3734      	adds	r7, #52	; 0x34
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd90      	pop	{r4, r7, pc}

08003e84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_PCD_SetAddress+0x1a>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e013      	b.n	8003ec6 <HAL_PCD_SetAddress+0x42>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f002 ff9b 	bl	8006df2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	4611      	mov	r1, r2
 8003eda:	461a      	mov	r2, r3
 8003edc:	4603      	mov	r3, r0
 8003ede:	70fb      	strb	r3, [r7, #3]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	803b      	strh	r3, [r7, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da0f      	bge.n	8003f14 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	3338      	adds	r3, #56	; 0x38
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	3304      	adds	r3, #4
 8003f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	705a      	strb	r2, [r3, #1]
 8003f12:	e00f      	b.n	8003f34 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f003 020f 	and.w	r2, r3, #15
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f40:	883a      	ldrh	r2, [r7, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	78ba      	ldrb	r2, [r7, #2]
 8003f4a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f5e:	78bb      	ldrb	r3, [r7, #2]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d102      	bne.n	8003f6a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_PCD_EP_Open+0xaa>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e00e      	b.n	8003f96 <HAL_PCD_EP_Open+0xc8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f002 f906 	bl	8006198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003f94:	7afb      	ldrb	r3, [r7, #11]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	da0f      	bge.n	8003fd2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	f003 020f 	and.w	r2, r3, #15
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	3338      	adds	r3, #56	; 0x38
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	705a      	strb	r2, [r3, #1]
 8003fd0:	e00f      	b.n	8003ff2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	f003 020f 	and.w	r2, r3, #15
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3304      	adds	r3, #4
 8003fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_PCD_EP_Close+0x6e>
 8004008:	2302      	movs	r3, #2
 800400a:	e00e      	b.n	800402a <HAL_PCD_EP_Close+0x8c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68f9      	ldr	r1, [r7, #12]
 800401a:	4618      	mov	r0, r3
 800401c:	f002 f944 	bl	80062a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	460b      	mov	r3, r1
 8004040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	f003 020f 	and.w	r2, r3, #15
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	3304      	adds	r3, #4
 800405a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2200      	movs	r2, #0
 800406c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2200      	movs	r2, #0
 8004072:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004074:	7afb      	ldrb	r3, [r7, #11]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	b2da      	uxtb	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d102      	bne.n	800408e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800408e:	7afb      	ldrb	r3, [r7, #11]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	f002 fc1f 	bl	80068e8 <USB_EP0StartXfer>
 80040aa:	e008      	b.n	80040be <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	6979      	ldr	r1, [r7, #20]
 80040ba:	f002 f9d1 	bl	8006460 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	f003 020f 	and.w	r2, r3, #15
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	460b      	mov	r3, r1
 8004106:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004108:	7afb      	ldrb	r3, [r7, #11]
 800410a:	f003 020f 	and.w	r2, r3, #15
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	3338      	adds	r3, #56	; 0x38
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2201      	movs	r2, #1
 8004136:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004138:	7afb      	ldrb	r3, [r7, #11]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	b2da      	uxtb	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d102      	bne.n	8004152 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004152:	7afb      	ldrb	r3, [r7, #11]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	f002 fbbd 	bl	80068e8 <USB_EP0StartXfer>
 800416e:	e008      	b.n	8004182 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	f002 f96f 	bl	8006460 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d901      	bls.n	80041aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e050      	b.n	800424c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	da0f      	bge.n	80041d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	3338      	adds	r3, #56	; 0x38
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	3304      	adds	r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	705a      	strb	r2, [r3, #1]
 80041d0:	e00d      	b.n	80041ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4413      	add	r3, r2
 80041e4:	3304      	adds	r3, #4
 80041e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_PCD_EP_SetStall+0x82>
 800420a:	2302      	movs	r3, #2
 800420c:	e01e      	b.n	800424c <HAL_PCD_EP_SetStall+0xc0>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	4618      	mov	r0, r3
 800421e:	f002 fd14 	bl	8006c4a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	b2d9      	uxtb	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800423c:	461a      	mov	r2, r3
 800423e:	f002 fef3 	bl	8007028 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d901      	bls.n	8004272 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e042      	b.n	80042f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da0f      	bge.n	800429a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	f003 020f 	and.w	r2, r3, #15
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	3338      	adds	r3, #56	; 0x38
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	3304      	adds	r3, #4
 8004290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	705a      	strb	r2, [r3, #1]
 8004298:	e00f      	b.n	80042ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f003 020f 	and.w	r2, r3, #15
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	3304      	adds	r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_PCD_EP_ClrStall+0x86>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e00e      	b.n	80042f8 <HAL_PCD_EP_ClrStall+0xa4>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f002 fd1c 	bl	8006d26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af02      	add	r7, sp, #8
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	3338      	adds	r3, #56	; 0x38
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	d901      	bls.n	8004338 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e06c      	b.n	8004412 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	429a      	cmp	r2, r3
 800434c:	d902      	bls.n	8004354 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	3303      	adds	r3, #3
 8004358:	089b      	lsrs	r3, r3, #2
 800435a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800435c:	e02b      	b.n	80043b6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	429a      	cmp	r2, r3
 8004372:	d902      	bls.n	800437a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3303      	adds	r3, #3
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	68d9      	ldr	r1, [r3, #12]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004392:	b2db      	uxtb	r3, r3
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	4603      	mov	r3, r0
 8004398:	6978      	ldr	r0, [r7, #20]
 800439a:	f002 fbf8 	bl	8006b8e <USB_WritePacket>

    ep->xfer_buff  += len;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	441a      	add	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	441a      	add	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d809      	bhi.n	80043e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d203      	bcs.n	80043e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1be      	bne.n	800435e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d811      	bhi.n	8004410 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	2201      	movs	r2, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	43db      	mvns	r3, r3
 8004406:	6939      	ldr	r1, [r7, #16]
 8004408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800440c:	4013      	ands	r3, r2
 800440e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3720      	adds	r7, #32
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	333c      	adds	r3, #60	; 0x3c
 8004434:	3304      	adds	r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b01      	cmp	r3, #1
 8004450:	f040 80a0 	bne.w	8004594 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d015      	beq.n	800448a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a72      	ldr	r2, [pc, #456]	; (800462c <PCD_EP_OutXfrComplete_int+0x210>)
 8004462:	4293      	cmp	r3, r2
 8004464:	f240 80dd 	bls.w	8004622 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80d7 	beq.w	8004622 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	461a      	mov	r2, r3
 8004482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004486:	6093      	str	r3, [r2, #8]
 8004488:	e0cb      	b.n	8004622 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a0:	461a      	mov	r2, r3
 80044a2:	2320      	movs	r3, #32
 80044a4:	6093      	str	r3, [r2, #8]
 80044a6:	e0bc      	b.n	8004622 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f040 80b7 	bne.w	8004622 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4a5d      	ldr	r2, [pc, #372]	; (800462c <PCD_EP_OutXfrComplete_int+0x210>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d90f      	bls.n	80044dc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	461a      	mov	r2, r3
 80044d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d8:	6093      	str	r3, [r2, #8]
 80044da:	e0a2      	b.n	8004622 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044ee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	0159      	lsls	r1, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	440b      	add	r3, r1
 80044f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004502:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4403      	add	r3, r0
 8004512:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004516:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800452a:	6819      	ldr	r1, [r3, #0]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4403      	add	r3, r0
 800453a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4419      	add	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4403      	add	r3, r0
 8004550:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004554:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d114      	bne.n	8004586 <PCD_EP_OutXfrComplete_int+0x16a>
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d108      	bne.n	8004586 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800457e:	461a      	mov	r2, r3
 8004580:	2101      	movs	r1, #1
 8004582:	f002 fd51 	bl	8007028 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f004 fc61 	bl	8008e54 <HAL_PCD_DataOutStageCallback>
 8004592:	e046      	b.n	8004622 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a26      	ldr	r2, [pc, #152]	; (8004630 <PCD_EP_OutXfrComplete_int+0x214>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d124      	bne.n	80045e6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	461a      	mov	r2, r3
 80045b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b8:	6093      	str	r3, [r2, #8]
 80045ba:	e032      	b.n	8004622 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d2:	461a      	mov	r2, r3
 80045d4:	2320      	movs	r3, #32
 80045d6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f004 fc38 	bl	8008e54 <HAL_PCD_DataOutStageCallback>
 80045e4:	e01d      	b.n	8004622 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d114      	bne.n	8004616 <PCD_EP_OutXfrComplete_int+0x1fa>
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d108      	bne.n	8004616 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800460e:	461a      	mov	r2, r3
 8004610:	2100      	movs	r1, #0
 8004612:	f002 fd09 	bl	8007028 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f004 fc19 	bl	8008e54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	4f54300a 	.word	0x4f54300a
 8004630:	4f54310a 	.word	0x4f54310a

08004634 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	333c      	adds	r3, #60	; 0x3c
 800464c:	3304      	adds	r3, #4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a15      	ldr	r2, [pc, #84]	; (80046bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d90e      	bls.n	8004688 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	461a      	mov	r2, r3
 8004682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004686:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f004 fbd1 	bl	8008e30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d90c      	bls.n	80046b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d108      	bne.n	80046b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046a8:	461a      	mov	r2, r3
 80046aa:	2101      	movs	r1, #1
 80046ac:	f002 fcbc 	bl	8007028 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	4f54300a 	.word	0x4f54300a

080046c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
 80046cc:	4613      	mov	r3, r2
 80046ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d107      	bne.n	80046ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046de:	883b      	ldrh	r3, [r7, #0]
 80046e0:	0419      	lsls	r1, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
 80046ec:	e028      	b.n	8004740 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4413      	add	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046fc:	2300      	movs	r3, #0
 80046fe:	73fb      	strb	r3, [r7, #15]
 8004700:	e00d      	b.n	800471e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	3340      	adds	r3, #64	; 0x40
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4413      	add	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	3301      	adds	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	3b01      	subs	r3, #1
 8004724:	429a      	cmp	r2, r3
 8004726:	d3ec      	bcc.n	8004702 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004728:	883b      	ldrh	r3, [r7, #0]
 800472a:	0418      	lsls	r0, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	3b01      	subs	r3, #1
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	4302      	orrs	r2, r0
 8004738:	3340      	adds	r3, #64	; 0x40
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	887a      	ldrh	r2, [r7, #2]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e25b      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d075      	beq.n	8004892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047a6:	4ba3      	ldr	r3, [pc, #652]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d00c      	beq.n	80047cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b2:	4ba0      	ldr	r3, [pc, #640]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d112      	bne.n	80047e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047be:	4b9d      	ldr	r3, [pc, #628]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ca:	d10b      	bne.n	80047e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	4b99      	ldr	r3, [pc, #612]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05b      	beq.n	8004890 <HAL_RCC_OscConfig+0x108>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d157      	bne.n	8004890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e236      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d106      	bne.n	80047fc <HAL_RCC_OscConfig+0x74>
 80047ee:	4b91      	ldr	r3, [pc, #580]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a90      	ldr	r2, [pc, #576]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e01d      	b.n	8004838 <HAL_RCC_OscConfig+0xb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x98>
 8004806:	4b8b      	ldr	r3, [pc, #556]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a8a      	ldr	r2, [pc, #552]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b88      	ldr	r3, [pc, #544]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a87      	ldr	r2, [pc, #540]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0xb0>
 8004820:	4b84      	ldr	r3, [pc, #528]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a83      	ldr	r2, [pc, #524]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b81      	ldr	r3, [pc, #516]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a80      	ldr	r2, [pc, #512]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fc fdf0 	bl	8001424 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004848:	f7fc fdec 	bl	8001424 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e1fb      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0xc0>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fc fddc 	bl	8001424 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004870:	f7fc fdd8 	bl	8001424 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e1e7      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0xe8>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d063      	beq.n	8004966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800489e:	4b65      	ldr	r3, [pc, #404]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048aa:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b5f      	ldr	r3, [pc, #380]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c2:	4b5c      	ldr	r3, [pc, #368]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x152>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e1bb      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b56      	ldr	r3, [pc, #344]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4952      	ldr	r1, [pc, #328]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	e03a      	b.n	8004966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f8:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <HAL_RCC_OscConfig+0x2b0>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fc fd91 	bl	8001424 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004906:	f7fc fd8d 	bl	8001424 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e19c      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	4b46      	ldr	r3, [pc, #280]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4940      	ldr	r1, [pc, #256]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <HAL_RCC_OscConfig+0x2b0>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fc fd70 	bl	8001424 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004948:	f7fc fd6c 	bl	8001424 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e17b      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d030      	beq.n	80049d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497a:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <HAL_RCC_OscConfig+0x2b4>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fc fd50 	bl	8001424 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004988:	f7fc fd4c 	bl	8001424 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e15b      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x200>
 80049a6:	e015      	b.n	80049d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_RCC_OscConfig+0x2b4>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ae:	f7fc fd39 	bl	8001424 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b6:	f7fc fd35 	bl	8001424 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e144      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a0 	beq.w	8004b22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_OscConfig+0x2b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d121      	bne.n	8004a62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <HAL_RCC_OscConfig+0x2b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <HAL_RCC_OscConfig+0x2b8>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2a:	f7fc fcfb 	bl	8001424 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	e011      	b.n	8004a56 <HAL_RCC_OscConfig+0x2ce>
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800
 8004a38:	42470000 	.word	0x42470000
 8004a3c:	42470e80 	.word	0x42470e80
 8004a40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a44:	f7fc fcee 	bl	8001424 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e0fd      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a56:	4b81      	ldr	r3, [pc, #516]	; (8004c5c <HAL_RCC_OscConfig+0x4d4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d106      	bne.n	8004a78 <HAL_RCC_OscConfig+0x2f0>
 8004a6a:	4b7d      	ldr	r3, [pc, #500]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	4a7c      	ldr	r2, [pc, #496]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	6713      	str	r3, [r2, #112]	; 0x70
 8004a76:	e01c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x32a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x312>
 8004a80:	4b77      	ldr	r3, [pc, #476]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	4a76      	ldr	r2, [pc, #472]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004a86:	f043 0304 	orr.w	r3, r3, #4
 8004a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8c:	4b74      	ldr	r3, [pc, #464]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a73      	ldr	r2, [pc, #460]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	e00b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x32a>
 8004a9a:	4b71      	ldr	r3, [pc, #452]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a70      	ldr	r2, [pc, #448]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa6:	4b6e      	ldr	r3, [pc, #440]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a6d      	ldr	r2, [pc, #436]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d015      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aba:	f7fc fcb3 	bl	8001424 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	f7fc fcaf 	bl	8001424 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e0bc      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	4b61      	ldr	r3, [pc, #388]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ee      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x33a>
 8004ae4:	e014      	b.n	8004b10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae6:	f7fc fc9d 	bl	8001424 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	e00a      	b.n	8004b04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aee:	f7fc fc99 	bl	8001424 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e0a6      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	4b56      	ldr	r3, [pc, #344]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1ee      	bne.n	8004aee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d105      	bne.n	8004b22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b16:	4b52      	ldr	r3, [pc, #328]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	4a51      	ldr	r2, [pc, #324]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8092 	beq.w	8004c50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b2c:	4b4c      	ldr	r3, [pc, #304]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d05c      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d141      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b40:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <HAL_RCC_OscConfig+0x4dc>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b46:	f7fc fc6d 	bl	8001424 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4e:	f7fc fc69 	bl	8001424 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e078      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b60:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	019b      	lsls	r3, r3, #6
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	3b01      	subs	r3, #1
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	4933      	ldr	r1, [pc, #204]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b96:	4b33      	ldr	r3, [pc, #204]	; (8004c64 <HAL_RCC_OscConfig+0x4dc>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fc fc42 	bl	8001424 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fc fc3e 	bl	8001424 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e04d      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb6:	4b2a      	ldr	r3, [pc, #168]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x41c>
 8004bc2:	e045      	b.n	8004c50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc4:	4b27      	ldr	r3, [pc, #156]	; (8004c64 <HAL_RCC_OscConfig+0x4dc>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bca:	f7fc fc2b 	bl	8001424 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fc fc27 	bl	8001424 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e036      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be4:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x44a>
 8004bf0:	e02e      	b.n	8004c50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e029      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bfe:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <HAL_RCC_OscConfig+0x4d8>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d11c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d115      	bne.n	8004c4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c26:	4013      	ands	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10d      	bne.n	8004c4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40007000 	.word	0x40007000
 8004c60:	40023800 	.word	0x40023800
 8004c64:	42470060 	.word	0x42470060

08004c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0cc      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b68      	ldr	r3, [pc, #416]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d90c      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b65      	ldr	r3, [pc, #404]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b63      	ldr	r3, [pc, #396]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0b8      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a58      	ldr	r2, [pc, #352]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd4:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	494d      	ldr	r1, [pc, #308]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d044      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d119      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d107      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d26:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e06f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d36:	4b3b      	ldr	r3, [pc, #236]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e067      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d46:	4b37      	ldr	r3, [pc, #220]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 0203 	bic.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4934      	ldr	r1, [pc, #208]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d58:	f7fc fb64 	bl	8001424 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d60:	f7fc fb60 	bl	8001424 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e04f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 020c 	and.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1eb      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d20c      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e032      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4916      	ldr	r1, [pc, #88]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	490e      	ldr	r1, [pc, #56]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dee:	f000 f821 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004df2:	4601      	mov	r1, r0
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	5cd3      	ldrb	r3, [r2, r3]
 8004e02:	fa21 f303 	lsr.w	r3, r1, r3
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc fac4 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023c00 	.word	0x40023c00
 8004e24:	40023800 	.word	0x40023800
 8004e28:	080095e8 	.word	0x080095e8
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000004 	.word	0x20000004

08004e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	2300      	movs	r3, #0
 8004e44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e4a:	4b63      	ldr	r3, [pc, #396]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d007      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x32>
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d008      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x38>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 80b4 	bne.w	8004fc8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e60:	4b5e      	ldr	r3, [pc, #376]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e62:	60bb      	str	r3, [r7, #8]
       break;
 8004e64:	e0b3      	b.n	8004fce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e66:	4b5e      	ldr	r3, [pc, #376]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004e68:	60bb      	str	r3, [r7, #8]
      break;
 8004e6a:	e0b0      	b.n	8004fce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e6c:	4b5a      	ldr	r3, [pc, #360]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e76:	4b58      	ldr	r3, [pc, #352]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d04a      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e82:	4b55      	ldr	r3, [pc, #340]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	099b      	lsrs	r3, r3, #6
 8004e88:	f04f 0400 	mov.w	r4, #0
 8004e8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	ea03 0501 	and.w	r5, r3, r1
 8004e98:	ea04 0602 	and.w	r6, r4, r2
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	f04f 0400 	mov.w	r4, #0
 8004ea8:	0154      	lsls	r4, r2, #5
 8004eaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004eae:	014b      	lsls	r3, r1, #5
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	1b49      	subs	r1, r1, r5
 8004eb6:	eb62 0206 	sbc.w	r2, r2, r6
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	f04f 0400 	mov.w	r4, #0
 8004ec2:	0194      	lsls	r4, r2, #6
 8004ec4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ec8:	018b      	lsls	r3, r1, #6
 8004eca:	1a5b      	subs	r3, r3, r1
 8004ecc:	eb64 0402 	sbc.w	r4, r4, r2
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	00e2      	lsls	r2, r4, #3
 8004eda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ede:	00d9      	lsls	r1, r3, #3
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4614      	mov	r4, r2
 8004ee4:	195b      	adds	r3, r3, r5
 8004ee6:	eb44 0406 	adc.w	r4, r4, r6
 8004eea:	f04f 0100 	mov.w	r1, #0
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	0262      	lsls	r2, r4, #9
 8004ef4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ef8:	0259      	lsls	r1, r3, #9
 8004efa:	460b      	mov	r3, r1
 8004efc:	4614      	mov	r4, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	4621      	mov	r1, r4
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f04f 0400 	mov.w	r4, #0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4623      	mov	r3, r4
 8004f0c:	f7fb f95c 	bl	80001c8 <__aeabi_uldivmod>
 8004f10:	4603      	mov	r3, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e049      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f18:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	099b      	lsrs	r3, r3, #6
 8004f1e:	f04f 0400 	mov.w	r4, #0
 8004f22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	ea03 0501 	and.w	r5, r3, r1
 8004f2e:	ea04 0602 	and.w	r6, r4, r2
 8004f32:	4629      	mov	r1, r5
 8004f34:	4632      	mov	r2, r6
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	f04f 0400 	mov.w	r4, #0
 8004f3e:	0154      	lsls	r4, r2, #5
 8004f40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f44:	014b      	lsls	r3, r1, #5
 8004f46:	4619      	mov	r1, r3
 8004f48:	4622      	mov	r2, r4
 8004f4a:	1b49      	subs	r1, r1, r5
 8004f4c:	eb62 0206 	sbc.w	r2, r2, r6
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	f04f 0400 	mov.w	r4, #0
 8004f58:	0194      	lsls	r4, r2, #6
 8004f5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f5e:	018b      	lsls	r3, r1, #6
 8004f60:	1a5b      	subs	r3, r3, r1
 8004f62:	eb64 0402 	sbc.w	r4, r4, r2
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	00e2      	lsls	r2, r4, #3
 8004f70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f74:	00d9      	lsls	r1, r3, #3
 8004f76:	460b      	mov	r3, r1
 8004f78:	4614      	mov	r4, r2
 8004f7a:	195b      	adds	r3, r3, r5
 8004f7c:	eb44 0406 	adc.w	r4, r4, r6
 8004f80:	f04f 0100 	mov.w	r1, #0
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	02a2      	lsls	r2, r4, #10
 8004f8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f8e:	0299      	lsls	r1, r3, #10
 8004f90:	460b      	mov	r3, r1
 8004f92:	4614      	mov	r4, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	4621      	mov	r1, r4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f04f 0400 	mov.w	r4, #0
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	f7fb f911 	bl	80001c8 <__aeabi_uldivmod>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fac:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	0c1b      	lsrs	r3, r3, #16
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	60bb      	str	r3, [r7, #8]
      break;
 8004fc6:	e002      	b.n	8004fce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc8:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004fca:	60bb      	str	r3, [r7, #8]
      break;
 8004fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fce:	68bb      	ldr	r3, [r7, #8]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	007a1200 	.word	0x007a1200

08004fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000000 	.word	0x20000000

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005000:	f7ff fff0 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005004:	4601      	mov	r1, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0a9b      	lsrs	r3, r3, #10
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4a03      	ldr	r2, [pc, #12]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005012:	5cd3      	ldrb	r3, [r2, r3]
 8005014:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	080095f8 	.word	0x080095f8

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005028:	f7ff ffdc 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 800502c:	4601      	mov	r1, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	0b5b      	lsrs	r3, r3, #13
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4a03      	ldr	r2, [pc, #12]	; (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503a:	5cd3      	ldrb	r3, [r2, r3]
 800503c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40023800 	.word	0x40023800
 8005048:	080095f8 	.word	0x080095f8

0800504c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d105      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005070:	2b00      	cmp	r3, #0
 8005072:	d035      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005074:	4b62      	ldr	r3, [pc, #392]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800507a:	f7fc f9d3 	bl	8001424 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005082:	f7fc f9cf 	bl	8001424 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e0b0      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005094:	4b5b      	ldr	r3, [pc, #364]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	019a      	lsls	r2, r3, #6
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	071b      	lsls	r3, r3, #28
 80050ac:	4955      	ldr	r1, [pc, #340]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050b4:	4b52      	ldr	r3, [pc, #328]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ba:	f7fc f9b3 	bl	8001424 <HAL_GetTick>
 80050be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050c2:	f7fc f9af 	bl	8001424 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e090      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050d4:	4b4b      	ldr	r3, [pc, #300]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8083 	beq.w	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	4b44      	ldr	r3, [pc, #272]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	4a43      	ldr	r2, [pc, #268]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6413      	str	r3, [r2, #64]	; 0x40
 80050fe:	4b41      	ldr	r3, [pc, #260]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800510a:	4b3f      	ldr	r3, [pc, #252]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a3e      	ldr	r2, [pc, #248]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005116:	f7fc f985 	bl	8001424 <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800511c:	e008      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800511e:	f7fc f981 	bl	8001424 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e062      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005130:	4b35      	ldr	r3, [pc, #212]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800513c:	4b31      	ldr	r3, [pc, #196]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005144:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02f      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	429a      	cmp	r2, r3
 8005158:	d028      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800515a:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005164:	4b29      	ldr	r3, [pc, #164]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800516a:	4b28      	ldr	r3, [pc, #160]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005170:	4a24      	ldr	r2, [pc, #144]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005176:	4b23      	ldr	r3, [pc, #140]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d114      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005182:	f7fc f94f 	bl	8001424 <HAL_GetTick>
 8005186:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005188:	e00a      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800518a:	f7fc f94b 	bl	8001424 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	f241 3288 	movw	r2, #5000	; 0x1388
 8005198:	4293      	cmp	r3, r2
 800519a:	d901      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e02a      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a0:	4b18      	ldr	r3, [pc, #96]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0ee      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b8:	d10d      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ce:	490d      	ldr	r1, [pc, #52]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	608b      	str	r3, [r1, #8]
 80051d4:	e005      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051e0:	6093      	str	r3, [r2, #8]
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ee:	4905      	ldr	r1, [pc, #20]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	42470068 	.word	0x42470068
 8005204:	40023800 	.word	0x40023800
 8005208:	40007000 	.word	0x40007000
 800520c:	42470e40 	.word	0x42470e40

08005210 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d13d      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800522e:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005236:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800523e:	2b01      	cmp	r3, #1
 8005240:	d12f      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005242:	4b1e      	ldr	r3, [pc, #120]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005244:	617b      	str	r3, [r7, #20]
          break;
 8005246:	e02f      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005248:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005254:	d108      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005256:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800525e:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	e007      	b.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005268:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005270:	4a14      	ldr	r2, [pc, #80]	; (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800527a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527e:	099b      	lsrs	r3, r3, #6
 8005280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800528e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005292:	0f1b      	lsrs	r3, r3, #28
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	617b      	str	r3, [r7, #20]
          break;
 80052a0:	e002      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
          break;
 80052a6:	bf00      	nop
        }
      }
      break;
 80052a8:	bf00      	nop
    }
  }
  return frequency;
 80052aa:	697b      	ldr	r3, [r7, #20]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40023800 	.word	0x40023800
 80052bc:	00bb8000 	.word	0x00bb8000
 80052c0:	007a1200 	.word	0x007a1200
 80052c4:	00f42400 	.word	0x00f42400

080052c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e056      	b.n	8005388 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fb fe91 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	ea42 0103 	orr.w	r1, r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	f003 0104 	and.w	r1, r3, #4
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005376:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e03f      	b.n	8005422 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fb fe78 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2224      	movs	r2, #36	; 0x24
 80053c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f829 	bl	800542c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800546e:	f023 030c 	bic.w	r3, r3, #12
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	68f9      	ldr	r1, [r7, #12]
 8005478:	430b      	orrs	r3, r1
 800547a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549a:	f040 818b 	bne.w	80057b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4ac1      	ldr	r2, [pc, #772]	; (80057a8 <UART_SetConfig+0x37c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d005      	beq.n	80054b4 <UART_SetConfig+0x88>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4abf      	ldr	r2, [pc, #764]	; (80057ac <UART_SetConfig+0x380>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	f040 80bd 	bne.w	800562e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b4:	f7ff fdb6 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 80054b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	461d      	mov	r5, r3
 80054be:	f04f 0600 	mov.w	r6, #0
 80054c2:	46a8      	mov	r8, r5
 80054c4:	46b1      	mov	r9, r6
 80054c6:	eb18 0308 	adds.w	r3, r8, r8
 80054ca:	eb49 0409 	adc.w	r4, r9, r9
 80054ce:	4698      	mov	r8, r3
 80054d0:	46a1      	mov	r9, r4
 80054d2:	eb18 0805 	adds.w	r8, r8, r5
 80054d6:	eb49 0906 	adc.w	r9, r9, r6
 80054da:	f04f 0100 	mov.w	r1, #0
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054ee:	4688      	mov	r8, r1
 80054f0:	4691      	mov	r9, r2
 80054f2:	eb18 0005 	adds.w	r0, r8, r5
 80054f6:	eb49 0106 	adc.w	r1, r9, r6
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	461d      	mov	r5, r3
 8005500:	f04f 0600 	mov.w	r6, #0
 8005504:	196b      	adds	r3, r5, r5
 8005506:	eb46 0406 	adc.w	r4, r6, r6
 800550a:	461a      	mov	r2, r3
 800550c:	4623      	mov	r3, r4
 800550e:	f7fa fe5b 	bl	80001c8 <__aeabi_uldivmod>
 8005512:	4603      	mov	r3, r0
 8005514:	460c      	mov	r4, r1
 8005516:	461a      	mov	r2, r3
 8005518:	4ba5      	ldr	r3, [pc, #660]	; (80057b0 <UART_SetConfig+0x384>)
 800551a:	fba3 2302 	umull	r2, r3, r3, r2
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	461d      	mov	r5, r3
 8005528:	f04f 0600 	mov.w	r6, #0
 800552c:	46a9      	mov	r9, r5
 800552e:	46b2      	mov	sl, r6
 8005530:	eb19 0309 	adds.w	r3, r9, r9
 8005534:	eb4a 040a 	adc.w	r4, sl, sl
 8005538:	4699      	mov	r9, r3
 800553a:	46a2      	mov	sl, r4
 800553c:	eb19 0905 	adds.w	r9, r9, r5
 8005540:	eb4a 0a06 	adc.w	sl, sl, r6
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005550:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005554:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005558:	4689      	mov	r9, r1
 800555a:	4692      	mov	sl, r2
 800555c:	eb19 0005 	adds.w	r0, r9, r5
 8005560:	eb4a 0106 	adc.w	r1, sl, r6
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	461d      	mov	r5, r3
 800556a:	f04f 0600 	mov.w	r6, #0
 800556e:	196b      	adds	r3, r5, r5
 8005570:	eb46 0406 	adc.w	r4, r6, r6
 8005574:	461a      	mov	r2, r3
 8005576:	4623      	mov	r3, r4
 8005578:	f7fa fe26 	bl	80001c8 <__aeabi_uldivmod>
 800557c:	4603      	mov	r3, r0
 800557e:	460c      	mov	r4, r1
 8005580:	461a      	mov	r2, r3
 8005582:	4b8b      	ldr	r3, [pc, #556]	; (80057b0 <UART_SetConfig+0x384>)
 8005584:	fba3 1302 	umull	r1, r3, r3, r2
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	2164      	movs	r1, #100	; 0x64
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	3332      	adds	r3, #50	; 0x32
 8005596:	4a86      	ldr	r2, [pc, #536]	; (80057b0 <UART_SetConfig+0x384>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055a4:	4498      	add	r8, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	461d      	mov	r5, r3
 80055aa:	f04f 0600 	mov.w	r6, #0
 80055ae:	46a9      	mov	r9, r5
 80055b0:	46b2      	mov	sl, r6
 80055b2:	eb19 0309 	adds.w	r3, r9, r9
 80055b6:	eb4a 040a 	adc.w	r4, sl, sl
 80055ba:	4699      	mov	r9, r3
 80055bc:	46a2      	mov	sl, r4
 80055be:	eb19 0905 	adds.w	r9, r9, r5
 80055c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055da:	4689      	mov	r9, r1
 80055dc:	4692      	mov	sl, r2
 80055de:	eb19 0005 	adds.w	r0, r9, r5
 80055e2:	eb4a 0106 	adc.w	r1, sl, r6
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	461d      	mov	r5, r3
 80055ec:	f04f 0600 	mov.w	r6, #0
 80055f0:	196b      	adds	r3, r5, r5
 80055f2:	eb46 0406 	adc.w	r4, r6, r6
 80055f6:	461a      	mov	r2, r3
 80055f8:	4623      	mov	r3, r4
 80055fa:	f7fa fde5 	bl	80001c8 <__aeabi_uldivmod>
 80055fe:	4603      	mov	r3, r0
 8005600:	460c      	mov	r4, r1
 8005602:	461a      	mov	r2, r3
 8005604:	4b6a      	ldr	r3, [pc, #424]	; (80057b0 <UART_SetConfig+0x384>)
 8005606:	fba3 1302 	umull	r1, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2164      	movs	r1, #100	; 0x64
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	3332      	adds	r3, #50	; 0x32
 8005618:	4a65      	ldr	r2, [pc, #404]	; (80057b0 <UART_SetConfig+0x384>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	f003 0207 	and.w	r2, r3, #7
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4442      	add	r2, r8
 800562a:	609a      	str	r2, [r3, #8]
 800562c:	e26f      	b.n	8005b0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800562e:	f7ff fce5 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005632:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	461d      	mov	r5, r3
 8005638:	f04f 0600 	mov.w	r6, #0
 800563c:	46a8      	mov	r8, r5
 800563e:	46b1      	mov	r9, r6
 8005640:	eb18 0308 	adds.w	r3, r8, r8
 8005644:	eb49 0409 	adc.w	r4, r9, r9
 8005648:	4698      	mov	r8, r3
 800564a:	46a1      	mov	r9, r4
 800564c:	eb18 0805 	adds.w	r8, r8, r5
 8005650:	eb49 0906 	adc.w	r9, r9, r6
 8005654:	f04f 0100 	mov.w	r1, #0
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005660:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005664:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005668:	4688      	mov	r8, r1
 800566a:	4691      	mov	r9, r2
 800566c:	eb18 0005 	adds.w	r0, r8, r5
 8005670:	eb49 0106 	adc.w	r1, r9, r6
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	461d      	mov	r5, r3
 800567a:	f04f 0600 	mov.w	r6, #0
 800567e:	196b      	adds	r3, r5, r5
 8005680:	eb46 0406 	adc.w	r4, r6, r6
 8005684:	461a      	mov	r2, r3
 8005686:	4623      	mov	r3, r4
 8005688:	f7fa fd9e 	bl	80001c8 <__aeabi_uldivmod>
 800568c:	4603      	mov	r3, r0
 800568e:	460c      	mov	r4, r1
 8005690:	461a      	mov	r2, r3
 8005692:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <UART_SetConfig+0x384>)
 8005694:	fba3 2302 	umull	r2, r3, r3, r2
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	461d      	mov	r5, r3
 80056a2:	f04f 0600 	mov.w	r6, #0
 80056a6:	46a9      	mov	r9, r5
 80056a8:	46b2      	mov	sl, r6
 80056aa:	eb19 0309 	adds.w	r3, r9, r9
 80056ae:	eb4a 040a 	adc.w	r4, sl, sl
 80056b2:	4699      	mov	r9, r3
 80056b4:	46a2      	mov	sl, r4
 80056b6:	eb19 0905 	adds.w	r9, r9, r5
 80056ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80056be:	f04f 0100 	mov.w	r1, #0
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056d2:	4689      	mov	r9, r1
 80056d4:	4692      	mov	sl, r2
 80056d6:	eb19 0005 	adds.w	r0, r9, r5
 80056da:	eb4a 0106 	adc.w	r1, sl, r6
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	461d      	mov	r5, r3
 80056e4:	f04f 0600 	mov.w	r6, #0
 80056e8:	196b      	adds	r3, r5, r5
 80056ea:	eb46 0406 	adc.w	r4, r6, r6
 80056ee:	461a      	mov	r2, r3
 80056f0:	4623      	mov	r3, r4
 80056f2:	f7fa fd69 	bl	80001c8 <__aeabi_uldivmod>
 80056f6:	4603      	mov	r3, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	461a      	mov	r2, r3
 80056fc:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <UART_SetConfig+0x384>)
 80056fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	2164      	movs	r1, #100	; 0x64
 8005706:	fb01 f303 	mul.w	r3, r1, r3
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	3332      	adds	r3, #50	; 0x32
 8005710:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <UART_SetConfig+0x384>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800571e:	4498      	add	r8, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	461d      	mov	r5, r3
 8005724:	f04f 0600 	mov.w	r6, #0
 8005728:	46a9      	mov	r9, r5
 800572a:	46b2      	mov	sl, r6
 800572c:	eb19 0309 	adds.w	r3, r9, r9
 8005730:	eb4a 040a 	adc.w	r4, sl, sl
 8005734:	4699      	mov	r9, r3
 8005736:	46a2      	mov	sl, r4
 8005738:	eb19 0905 	adds.w	r9, r9, r5
 800573c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800574c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005754:	4689      	mov	r9, r1
 8005756:	4692      	mov	sl, r2
 8005758:	eb19 0005 	adds.w	r0, r9, r5
 800575c:	eb4a 0106 	adc.w	r1, sl, r6
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	461d      	mov	r5, r3
 8005766:	f04f 0600 	mov.w	r6, #0
 800576a:	196b      	adds	r3, r5, r5
 800576c:	eb46 0406 	adc.w	r4, r6, r6
 8005770:	461a      	mov	r2, r3
 8005772:	4623      	mov	r3, r4
 8005774:	f7fa fd28 	bl	80001c8 <__aeabi_uldivmod>
 8005778:	4603      	mov	r3, r0
 800577a:	460c      	mov	r4, r1
 800577c:	461a      	mov	r2, r3
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <UART_SetConfig+0x384>)
 8005780:	fba3 1302 	umull	r1, r3, r3, r2
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	2164      	movs	r1, #100	; 0x64
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	3332      	adds	r3, #50	; 0x32
 8005792:	4a07      	ldr	r2, [pc, #28]	; (80057b0 <UART_SetConfig+0x384>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	f003 0207 	and.w	r2, r3, #7
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4442      	add	r2, r8
 80057a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80057a6:	e1b2      	b.n	8005b0e <UART_SetConfig+0x6e2>
 80057a8:	40011000 	.word	0x40011000
 80057ac:	40011400 	.word	0x40011400
 80057b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4ad7      	ldr	r2, [pc, #860]	; (8005b18 <UART_SetConfig+0x6ec>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d005      	beq.n	80057ca <UART_SetConfig+0x39e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4ad6      	ldr	r2, [pc, #856]	; (8005b1c <UART_SetConfig+0x6f0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	f040 80d1 	bne.w	800596c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80057ca:	f7ff fc2b 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 80057ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	469a      	mov	sl, r3
 80057d4:	f04f 0b00 	mov.w	fp, #0
 80057d8:	46d0      	mov	r8, sl
 80057da:	46d9      	mov	r9, fp
 80057dc:	eb18 0308 	adds.w	r3, r8, r8
 80057e0:	eb49 0409 	adc.w	r4, r9, r9
 80057e4:	4698      	mov	r8, r3
 80057e6:	46a1      	mov	r9, r4
 80057e8:	eb18 080a 	adds.w	r8, r8, sl
 80057ec:	eb49 090b 	adc.w	r9, r9, fp
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005800:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005804:	4688      	mov	r8, r1
 8005806:	4691      	mov	r9, r2
 8005808:	eb1a 0508 	adds.w	r5, sl, r8
 800580c:	eb4b 0609 	adc.w	r6, fp, r9
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	4619      	mov	r1, r3
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	f04f 0400 	mov.w	r4, #0
 8005822:	0094      	lsls	r4, r2, #2
 8005824:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005828:	008b      	lsls	r3, r1, #2
 800582a:	461a      	mov	r2, r3
 800582c:	4623      	mov	r3, r4
 800582e:	4628      	mov	r0, r5
 8005830:	4631      	mov	r1, r6
 8005832:	f7fa fcc9 	bl	80001c8 <__aeabi_uldivmod>
 8005836:	4603      	mov	r3, r0
 8005838:	460c      	mov	r4, r1
 800583a:	461a      	mov	r2, r3
 800583c:	4bb8      	ldr	r3, [pc, #736]	; (8005b20 <UART_SetConfig+0x6f4>)
 800583e:	fba3 2302 	umull	r2, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	469b      	mov	fp, r3
 800584c:	f04f 0c00 	mov.w	ip, #0
 8005850:	46d9      	mov	r9, fp
 8005852:	46e2      	mov	sl, ip
 8005854:	eb19 0309 	adds.w	r3, r9, r9
 8005858:	eb4a 040a 	adc.w	r4, sl, sl
 800585c:	4699      	mov	r9, r3
 800585e:	46a2      	mov	sl, r4
 8005860:	eb19 090b 	adds.w	r9, r9, fp
 8005864:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005868:	f04f 0100 	mov.w	r1, #0
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005874:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005878:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800587c:	4689      	mov	r9, r1
 800587e:	4692      	mov	sl, r2
 8005880:	eb1b 0509 	adds.w	r5, fp, r9
 8005884:	eb4c 060a 	adc.w	r6, ip, sl
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4619      	mov	r1, r3
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	f04f 0400 	mov.w	r4, #0
 800589a:	0094      	lsls	r4, r2, #2
 800589c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058a0:	008b      	lsls	r3, r1, #2
 80058a2:	461a      	mov	r2, r3
 80058a4:	4623      	mov	r3, r4
 80058a6:	4628      	mov	r0, r5
 80058a8:	4631      	mov	r1, r6
 80058aa:	f7fa fc8d 	bl	80001c8 <__aeabi_uldivmod>
 80058ae:	4603      	mov	r3, r0
 80058b0:	460c      	mov	r4, r1
 80058b2:	461a      	mov	r2, r3
 80058b4:	4b9a      	ldr	r3, [pc, #616]	; (8005b20 <UART_SetConfig+0x6f4>)
 80058b6:	fba3 1302 	umull	r1, r3, r3, r2
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	2164      	movs	r1, #100	; 0x64
 80058be:	fb01 f303 	mul.w	r3, r1, r3
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	3332      	adds	r3, #50	; 0x32
 80058c8:	4a95      	ldr	r2, [pc, #596]	; (8005b20 <UART_SetConfig+0x6f4>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058d4:	4498      	add	r8, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	469b      	mov	fp, r3
 80058da:	f04f 0c00 	mov.w	ip, #0
 80058de:	46d9      	mov	r9, fp
 80058e0:	46e2      	mov	sl, ip
 80058e2:	eb19 0309 	adds.w	r3, r9, r9
 80058e6:	eb4a 040a 	adc.w	r4, sl, sl
 80058ea:	4699      	mov	r9, r3
 80058ec:	46a2      	mov	sl, r4
 80058ee:	eb19 090b 	adds.w	r9, r9, fp
 80058f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058f6:	f04f 0100 	mov.w	r1, #0
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005902:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005906:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800590a:	4689      	mov	r9, r1
 800590c:	4692      	mov	sl, r2
 800590e:	eb1b 0509 	adds.w	r5, fp, r9
 8005912:	eb4c 060a 	adc.w	r6, ip, sl
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4619      	mov	r1, r3
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	f04f 0400 	mov.w	r4, #0
 8005928:	0094      	lsls	r4, r2, #2
 800592a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800592e:	008b      	lsls	r3, r1, #2
 8005930:	461a      	mov	r2, r3
 8005932:	4623      	mov	r3, r4
 8005934:	4628      	mov	r0, r5
 8005936:	4631      	mov	r1, r6
 8005938:	f7fa fc46 	bl	80001c8 <__aeabi_uldivmod>
 800593c:	4603      	mov	r3, r0
 800593e:	460c      	mov	r4, r1
 8005940:	461a      	mov	r2, r3
 8005942:	4b77      	ldr	r3, [pc, #476]	; (8005b20 <UART_SetConfig+0x6f4>)
 8005944:	fba3 1302 	umull	r1, r3, r3, r2
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	2164      	movs	r1, #100	; 0x64
 800594c:	fb01 f303 	mul.w	r3, r1, r3
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	3332      	adds	r3, #50	; 0x32
 8005956:	4a72      	ldr	r2, [pc, #456]	; (8005b20 <UART_SetConfig+0x6f4>)
 8005958:	fba2 2303 	umull	r2, r3, r2, r3
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	f003 020f 	and.w	r2, r3, #15
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4442      	add	r2, r8
 8005968:	609a      	str	r2, [r3, #8]
 800596a:	e0d0      	b.n	8005b0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800596c:	f7ff fb46 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005970:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	469a      	mov	sl, r3
 8005976:	f04f 0b00 	mov.w	fp, #0
 800597a:	46d0      	mov	r8, sl
 800597c:	46d9      	mov	r9, fp
 800597e:	eb18 0308 	adds.w	r3, r8, r8
 8005982:	eb49 0409 	adc.w	r4, r9, r9
 8005986:	4698      	mov	r8, r3
 8005988:	46a1      	mov	r9, r4
 800598a:	eb18 080a 	adds.w	r8, r8, sl
 800598e:	eb49 090b 	adc.w	r9, r9, fp
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800599e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059a6:	4688      	mov	r8, r1
 80059a8:	4691      	mov	r9, r2
 80059aa:	eb1a 0508 	adds.w	r5, sl, r8
 80059ae:	eb4b 0609 	adc.w	r6, fp, r9
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	4619      	mov	r1, r3
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	0094      	lsls	r4, r2, #2
 80059c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059ca:	008b      	lsls	r3, r1, #2
 80059cc:	461a      	mov	r2, r3
 80059ce:	4623      	mov	r3, r4
 80059d0:	4628      	mov	r0, r5
 80059d2:	4631      	mov	r1, r6
 80059d4:	f7fa fbf8 	bl	80001c8 <__aeabi_uldivmod>
 80059d8:	4603      	mov	r3, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	461a      	mov	r2, r3
 80059de:	4b50      	ldr	r3, [pc, #320]	; (8005b20 <UART_SetConfig+0x6f4>)
 80059e0:	fba3 2302 	umull	r2, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	469b      	mov	fp, r3
 80059ee:	f04f 0c00 	mov.w	ip, #0
 80059f2:	46d9      	mov	r9, fp
 80059f4:	46e2      	mov	sl, ip
 80059f6:	eb19 0309 	adds.w	r3, r9, r9
 80059fa:	eb4a 040a 	adc.w	r4, sl, sl
 80059fe:	4699      	mov	r9, r3
 8005a00:	46a2      	mov	sl, r4
 8005a02:	eb19 090b 	adds.w	r9, r9, fp
 8005a06:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a0a:	f04f 0100 	mov.w	r1, #0
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a1e:	4689      	mov	r9, r1
 8005a20:	4692      	mov	sl, r2
 8005a22:	eb1b 0509 	adds.w	r5, fp, r9
 8005a26:	eb4c 060a 	adc.w	r6, ip, sl
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	0094      	lsls	r4, r2, #2
 8005a3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a42:	008b      	lsls	r3, r1, #2
 8005a44:	461a      	mov	r2, r3
 8005a46:	4623      	mov	r3, r4
 8005a48:	4628      	mov	r0, r5
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	f7fa fbbc 	bl	80001c8 <__aeabi_uldivmod>
 8005a50:	4603      	mov	r3, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	461a      	mov	r2, r3
 8005a56:	4b32      	ldr	r3, [pc, #200]	; (8005b20 <UART_SetConfig+0x6f4>)
 8005a58:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	2164      	movs	r1, #100	; 0x64
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	3332      	adds	r3, #50	; 0x32
 8005a6a:	4a2d      	ldr	r2, [pc, #180]	; (8005b20 <UART_SetConfig+0x6f4>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a76:	4498      	add	r8, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	469b      	mov	fp, r3
 8005a7c:	f04f 0c00 	mov.w	ip, #0
 8005a80:	46d9      	mov	r9, fp
 8005a82:	46e2      	mov	sl, ip
 8005a84:	eb19 0309 	adds.w	r3, r9, r9
 8005a88:	eb4a 040a 	adc.w	r4, sl, sl
 8005a8c:	4699      	mov	r9, r3
 8005a8e:	46a2      	mov	sl, r4
 8005a90:	eb19 090b 	adds.w	r9, r9, fp
 8005a94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a98:	f04f 0100 	mov.w	r1, #0
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005aa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aac:	4689      	mov	r9, r1
 8005aae:	4692      	mov	sl, r2
 8005ab0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ab4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4619      	mov	r1, r3
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	f04f 0400 	mov.w	r4, #0
 8005aca:	0094      	lsls	r4, r2, #2
 8005acc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ad0:	008b      	lsls	r3, r1, #2
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4623      	mov	r3, r4
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	4631      	mov	r1, r6
 8005ada:	f7fa fb75 	bl	80001c8 <__aeabi_uldivmod>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <UART_SetConfig+0x6f4>)
 8005ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	2164      	movs	r1, #100	; 0x64
 8005aee:	fb01 f303 	mul.w	r3, r1, r3
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	3332      	adds	r3, #50	; 0x32
 8005af8:	4a09      	ldr	r2, [pc, #36]	; (8005b20 <UART_SetConfig+0x6f4>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	f003 020f 	and.w	r2, r3, #15
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4442      	add	r2, r8
 8005b0a:	609a      	str	r2, [r3, #8]
}
 8005b0c:	e7ff      	b.n	8005b0e <UART_SetConfig+0x6e2>
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	40011000 	.word	0x40011000
 8005b1c:	40011400 	.word	0x40011400
 8005b20:	51eb851f 	.word	0x51eb851f

08005b24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b24:	b084      	sub	sp, #16
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	f107 001c 	add.w	r0, r7, #28
 8005b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d122      	bne.n	8005b82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fab4 	bl	80070e4 <USB_CoreReset>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]
 8005b80:	e01a      	b.n	8005bb8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 faa8 	bl	80070e4 <USB_CoreReset>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8005baa:	e005      	b.n	8005bb8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d10b      	bne.n	8005bd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f043 0206 	orr.w	r2, r3, #6
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be2:	b004      	add	sp, #16
 8005be4:	4770      	bx	lr
	...

08005be8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d165      	bne.n	8005cc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4a41      	ldr	r2, [pc, #260]	; (8005d04 <USB_SetTurnaroundTime+0x11c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d906      	bls.n	8005c12 <USB_SetTurnaroundTime+0x2a>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4a40      	ldr	r2, [pc, #256]	; (8005d08 <USB_SetTurnaroundTime+0x120>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d802      	bhi.n	8005c12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c0c:	230f      	movs	r3, #15
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e062      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4a3c      	ldr	r2, [pc, #240]	; (8005d08 <USB_SetTurnaroundTime+0x120>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d906      	bls.n	8005c28 <USB_SetTurnaroundTime+0x40>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4a3b      	ldr	r2, [pc, #236]	; (8005d0c <USB_SetTurnaroundTime+0x124>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d802      	bhi.n	8005c28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c22:	230e      	movs	r3, #14
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	e057      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4a38      	ldr	r2, [pc, #224]	; (8005d0c <USB_SetTurnaroundTime+0x124>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d906      	bls.n	8005c3e <USB_SetTurnaroundTime+0x56>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4a37      	ldr	r2, [pc, #220]	; (8005d10 <USB_SetTurnaroundTime+0x128>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d802      	bhi.n	8005c3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c38:	230d      	movs	r3, #13
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e04c      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4a33      	ldr	r2, [pc, #204]	; (8005d10 <USB_SetTurnaroundTime+0x128>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d906      	bls.n	8005c54 <USB_SetTurnaroundTime+0x6c>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4a32      	ldr	r2, [pc, #200]	; (8005d14 <USB_SetTurnaroundTime+0x12c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d802      	bhi.n	8005c54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c4e:	230c      	movs	r3, #12
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e041      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4a2f      	ldr	r2, [pc, #188]	; (8005d14 <USB_SetTurnaroundTime+0x12c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d906      	bls.n	8005c6a <USB_SetTurnaroundTime+0x82>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4a2e      	ldr	r2, [pc, #184]	; (8005d18 <USB_SetTurnaroundTime+0x130>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d802      	bhi.n	8005c6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c64:	230b      	movs	r3, #11
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e036      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4a2a      	ldr	r2, [pc, #168]	; (8005d18 <USB_SetTurnaroundTime+0x130>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d906      	bls.n	8005c80 <USB_SetTurnaroundTime+0x98>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <USB_SetTurnaroundTime+0x134>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d802      	bhi.n	8005c80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c7a:	230a      	movs	r3, #10
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	e02b      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <USB_SetTurnaroundTime+0x134>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d906      	bls.n	8005c96 <USB_SetTurnaroundTime+0xae>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <USB_SetTurnaroundTime+0x138>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d802      	bhi.n	8005c96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c90:	2309      	movs	r3, #9
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e020      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4a21      	ldr	r2, [pc, #132]	; (8005d20 <USB_SetTurnaroundTime+0x138>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d906      	bls.n	8005cac <USB_SetTurnaroundTime+0xc4>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4a20      	ldr	r2, [pc, #128]	; (8005d24 <USB_SetTurnaroundTime+0x13c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d802      	bhi.n	8005cac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e015      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4a1d      	ldr	r2, [pc, #116]	; (8005d24 <USB_SetTurnaroundTime+0x13c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d906      	bls.n	8005cc2 <USB_SetTurnaroundTime+0xda>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <USB_SetTurnaroundTime+0x140>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d802      	bhi.n	8005cc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005cbc:	2307      	movs	r3, #7
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e00a      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005cc2:	2306      	movs	r3, #6
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	e007      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d102      	bne.n	8005cd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cce:	2309      	movs	r3, #9
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e001      	b.n	8005cd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005cd4:	2309      	movs	r3, #9
 8005cd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	029b      	lsls	r3, r3, #10
 8005cec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	00d8acbf 	.word	0x00d8acbf
 8005d08:	00e4e1bf 	.word	0x00e4e1bf
 8005d0c:	00f423ff 	.word	0x00f423ff
 8005d10:	0106737f 	.word	0x0106737f
 8005d14:	011a499f 	.word	0x011a499f
 8005d18:	01312cff 	.word	0x01312cff
 8005d1c:	014ca43f 	.word	0x014ca43f
 8005d20:	016e35ff 	.word	0x016e35ff
 8005d24:	01a6ab1f 	.word	0x01a6ab1f
 8005d28:	01e847ff 	.word	0x01e847ff

08005d2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f043 0201 	orr.w	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f023 0201 	bic.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d106      	bne.n	8005d9c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e00b      	b.n	8005db4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60da      	str	r2, [r3, #12]
 8005dae:	e001      	b.n	8005db4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e003      	b.n	8005dbc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005db4:	2032      	movs	r0, #50	; 0x32
 8005db6:	f7fb fb41 	bl	800143c <HAL_Delay>

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b086      	sub	sp, #24
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	e009      	b.n	8005df8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	3340      	adds	r3, #64	; 0x40
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	2200      	movs	r2, #0
 8005df0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3301      	adds	r3, #1
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b0e      	cmp	r3, #14
 8005dfc:	d9f2      	bls.n	8005de4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11c      	bne.n	8005e3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e12:	f043 0302 	orr.w	r3, r3, #2
 8005e16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e3c:	e00b      	b.n	8005e56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e68:	4619      	mov	r1, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	461a      	mov	r2, r3
 8005e72:	680b      	ldr	r3, [r1, #0]
 8005e74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d10c      	bne.n	8005e96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e82:	2100      	movs	r1, #0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f949 	bl	800611c <USB_SetDevSpeed>
 8005e8a:	e008      	b.n	8005e9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f944 	bl	800611c <USB_SetDevSpeed>
 8005e94:	e003      	b.n	8005e9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e96:	2103      	movs	r1, #3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f93f 	bl	800611c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e9e:	2110      	movs	r1, #16
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f8f3 	bl	800608c <USB_FlushTxFifo>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f911 	bl	80060d8 <USB_FlushRxFifo>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	613b      	str	r3, [r7, #16]
 8005ee8:	e043      	b.n	8005f72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f00:	d118      	bne.n	8005f34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	461a      	mov	r2, r3
 8005f16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	e013      	b.n	8005f46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e008      	b.n	8005f46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f40:	461a      	mov	r2, r3
 8005f42:	2300      	movs	r3, #0
 8005f44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f52:	461a      	mov	r2, r3
 8005f54:	2300      	movs	r3, #0
 8005f56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	461a      	mov	r2, r3
 8005f66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d3b7      	bcc.n	8005eea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	e043      	b.n	8006008 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f96:	d118      	bne.n	8005fca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005faa:	461a      	mov	r2, r3
 8005fac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e013      	b.n	8005fdc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	e008      	b.n	8005fdc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006000:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	3301      	adds	r3, #1
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d3b7      	bcc.n	8005f80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006022:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006030:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	2b00      	cmp	r3, #0
 8006036:	d105      	bne.n	8006044 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f043 0210 	orr.w	r2, r3, #16
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <USB_DevInit+0x2c4>)
 800604a:	4313      	orrs	r3, r2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f043 0208 	orr.w	r2, r3, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d107      	bne.n	8006078 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006070:	f043 0304 	orr.w	r3, r3, #4
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr
 8006088:	803c3800 	.word	0x803c3800

0800608c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	019b      	lsls	r3, r3, #6
 800609e:	f043 0220 	orr.w	r2, r3, #32
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3301      	adds	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <USB_FlushTxFifo+0x48>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d901      	bls.n	80060b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e006      	b.n	80060c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d0f0      	beq.n	80060a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	00030d40 	.word	0x00030d40

080060d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2210      	movs	r2, #16
 80060e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3301      	adds	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4a09      	ldr	r2, [pc, #36]	; (8006118 <USB_FlushRxFifo+0x40>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d901      	bls.n	80060fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e006      	b.n	800610a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b10      	cmp	r3, #16
 8006106:	d0f0      	beq.n	80060ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	00030d40 	.word	0x00030d40

0800611c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	68f9      	ldr	r1, [r7, #12]
 8006138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800613c:	4313      	orrs	r3, r2
 800613e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800614e:	b480      	push	{r7}
 8006150:	b087      	sub	sp, #28
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0306 	and.w	r3, r3, #6
 8006166:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800616e:	2300      	movs	r3, #0
 8006170:	75fb      	strb	r3, [r7, #23]
 8006172:	e00a      	b.n	800618a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d002      	beq.n	8006180 <USB_GetDevSpeed+0x32>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b06      	cmp	r3, #6
 800617e:	d102      	bne.n	8006186 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006180:	2302      	movs	r3, #2
 8006182:	75fb      	strb	r3, [r7, #23]
 8006184:	e001      	b.n	800618a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006186:	230f      	movs	r3, #15
 8006188:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
}
 800618c:	4618      	mov	r0, r3
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d13a      	bne.n	800622a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d155      	bne.n	8006298 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	78db      	ldrb	r3, [r3, #3]
 8006206:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006208:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	059b      	lsls	r3, r3, #22
 800620e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006210:	4313      	orrs	r3, r2
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e036      	b.n	8006298 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006230:	69da      	ldr	r2, [r3, #28]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006248:	4313      	orrs	r3, r2
 800624a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d11a      	bne.n	8006298 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	78db      	ldrb	r3, [r3, #3]
 800627c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800627e:	430b      	orrs	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006296:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d161      	bne.n	8006388 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062da:	d11f      	bne.n	800631c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800631a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	2101      	movs	r1, #1
 800632e:	fa01 f303 	lsl.w	r3, r1, r3
 8006332:	b29b      	uxth	r3, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	68f9      	ldr	r1, [r7, #12]
 8006338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800633c:	4013      	ands	r3, r2
 800633e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	2101      	movs	r1, #1
 8006352:	fa01 f303 	lsl.w	r3, r1, r3
 8006356:	b29b      	uxth	r3, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	68f9      	ldr	r1, [r7, #12]
 800635c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006360:	4013      	ands	r3, r2
 8006362:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	0159      	lsls	r1, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	440b      	add	r3, r1
 800637a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637e:	4619      	mov	r1, r3
 8006380:	4b35      	ldr	r3, [pc, #212]	; (8006458 <USB_DeactivateEndpoint+0x1b0>)
 8006382:	4013      	ands	r3, r2
 8006384:	600b      	str	r3, [r1, #0]
 8006386:	e060      	b.n	800644a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800639a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800639e:	d11f      	bne.n	80063e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	2101      	movs	r1, #1
 80063f2:	fa01 f303 	lsl.w	r3, r1, r3
 80063f6:	041b      	lsls	r3, r3, #16
 80063f8:	43db      	mvns	r3, r3
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006400:	4013      	ands	r3, r2
 8006402:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	2101      	movs	r1, #1
 8006416:	fa01 f303 	lsl.w	r3, r1, r3
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	43db      	mvns	r3, r3
 800641e:	68f9      	ldr	r1, [r7, #12]
 8006420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006424:	4013      	ands	r3, r2
 8006426:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	0159      	lsls	r1, r3, #5
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	440b      	add	r3, r1
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	4619      	mov	r1, r3
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <USB_DeactivateEndpoint+0x1b4>)
 8006446:	4013      	ands	r3, r2
 8006448:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	ec337800 	.word	0xec337800
 800645c:	eff37800 	.word	0xeff37800

08006460 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	; 0x28
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b01      	cmp	r3, #1
 800647e:	f040 815c 	bne.w	800673a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d132      	bne.n	80064f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e8:	0cdb      	lsrs	r3, r3, #19
 80064ea:	04db      	lsls	r3, r3, #19
 80064ec:	6113      	str	r3, [r2, #16]
 80064ee:	e074      	b.n	80065da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650a:	0cdb      	lsrs	r3, r3, #19
 800650c:	04db      	lsls	r3, r3, #19
 800650e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800652e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006532:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6959      	ldr	r1, [r3, #20]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	440b      	add	r3, r1
 800654c:	1e59      	subs	r1, r3, #1
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	fbb1 f3f3 	udiv	r3, r1, r3
 8006556:	04d9      	lsls	r1, r3, #19
 8006558:	4b9d      	ldr	r3, [pc, #628]	; (80067d0 <USB_EPStartXfer+0x370>)
 800655a:	400b      	ands	r3, r1
 800655c:	69b9      	ldr	r1, [r7, #24]
 800655e:	0148      	lsls	r0, r1, #5
 8006560:	69f9      	ldr	r1, [r7, #28]
 8006562:	4401      	add	r1, r0
 8006564:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006568:	4313      	orrs	r3, r2
 800656a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006582:	69b9      	ldr	r1, [r7, #24]
 8006584:	0148      	lsls	r0, r1, #5
 8006586:	69f9      	ldr	r1, [r7, #28]
 8006588:	4401      	add	r1, r0
 800658a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800658e:	4313      	orrs	r3, r2
 8006590:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	78db      	ldrb	r3, [r3, #3]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d11f      	bne.n	80065da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80065b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	0151      	lsls	r1, r2, #5
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	440a      	add	r2, r1
 80065d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d14b      	bne.n	8006678 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	461a      	mov	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	78db      	ldrb	r3, [r3, #3]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d128      	bne.n	8006656 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006610:	2b00      	cmp	r3, #0
 8006612:	d110      	bne.n	8006636 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e00f      	b.n	8006656 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006654:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	69fa      	ldr	r2, [r7, #28]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006670:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e12f      	b.n	80068d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	440a      	add	r2, r1
 800668e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006696:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	78db      	ldrb	r3, [r3, #3]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d015      	beq.n	80066cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8117 	beq.w	80068d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	2101      	movs	r1, #1
 80066bc:	fa01 f303 	lsl.w	r3, r1, r3
 80066c0:	69f9      	ldr	r1, [r7, #28]
 80066c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066c6:	4313      	orrs	r3, r2
 80066c8:	634b      	str	r3, [r1, #52]	; 0x34
 80066ca:	e105      	b.n	80068d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d110      	bne.n	80066fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	e00f      	b.n	800671e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	68d9      	ldr	r1, [r3, #12]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	781a      	ldrb	r2, [r3, #0]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	b298      	uxth	r0, r3
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4603      	mov	r3, r0
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 fa2b 	bl	8006b8e <USB_WritePacket>
 8006738:	e0ce      	b.n	80068d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006754:	0cdb      	lsrs	r3, r3, #19
 8006756:	04db      	lsls	r3, r3, #19
 8006758:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006774:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006778:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800677c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d126      	bne.n	80067d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800679c:	69b9      	ldr	r1, [r7, #24]
 800679e:	0148      	lsls	r0, r1, #5
 80067a0:	69f9      	ldr	r1, [r7, #28]
 80067a2:	4401      	add	r1, r0
 80067a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067a8:	4313      	orrs	r3, r2
 80067aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ca:	6113      	str	r3, [r2, #16]
 80067cc:	e036      	b.n	800683c <USB_EPStartXfer+0x3dc>
 80067ce:	bf00      	nop
 80067d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	695a      	ldr	r2, [r3, #20]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	4413      	add	r3, r2
 80067de:	1e5a      	subs	r2, r3, #1
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	8afb      	ldrh	r3, [r7, #22]
 80067fa:	04d9      	lsls	r1, r3, #19
 80067fc:	4b39      	ldr	r3, [pc, #228]	; (80068e4 <USB_EPStartXfer+0x484>)
 80067fe:	400b      	ands	r3, r1
 8006800:	69b9      	ldr	r1, [r7, #24]
 8006802:	0148      	lsls	r0, r1, #5
 8006804:	69f9      	ldr	r1, [r7, #28]
 8006806:	4401      	add	r1, r0
 8006808:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800680c:	4313      	orrs	r3, r2
 800680e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681c:	691a      	ldr	r2, [r3, #16]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	8af9      	ldrh	r1, [r7, #22]
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800682c:	69b9      	ldr	r1, [r7, #24]
 800682e:	0148      	lsls	r0, r1, #5
 8006830:	69f9      	ldr	r1, [r7, #28]
 8006832:	4401      	add	r1, r0
 8006834:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006838:	4313      	orrs	r3, r2
 800683a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d10d      	bne.n	800685e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d009      	beq.n	800685e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	68d9      	ldr	r1, [r3, #12]
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	460a      	mov	r2, r1
 800685c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	78db      	ldrb	r3, [r3, #3]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d128      	bne.n	80068b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006872:	2b00      	cmp	r3, #0
 8006874:	d110      	bne.n	8006898 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	440a      	add	r2, r1
 800688c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006890:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e00f      	b.n	80068b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	1ff80000 	.word	0x1ff80000

080068e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	f040 80cd 	bne.w	8006aa4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d132      	bne.n	8006978 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006930:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006934:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006970:	0cdb      	lsrs	r3, r3, #19
 8006972:	04db      	lsls	r3, r3, #19
 8006974:	6113      	str	r3, [r2, #16]
 8006976:	e04e      	b.n	8006a16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	440a      	add	r2, r1
 800698e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006992:	0cdb      	lsrs	r3, r3, #19
 8006994:	04db      	lsls	r3, r3, #19
 8006996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	695a      	ldr	r2, [r3, #20]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d903      	bls.n	80069d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a06:	6939      	ldr	r1, [r7, #16]
 8006a08:	0148      	lsls	r0, r1, #5
 8006a0a:	6979      	ldr	r1, [r7, #20]
 8006a0c:	4401      	add	r1, r0
 8006a0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a12:	4313      	orrs	r3, r2
 8006a14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d11e      	bne.n	8006a5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a30:	461a      	mov	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	e092      	b.n	8006b80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	0151      	lsls	r1, r2, #5
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	440a      	add	r2, r1
 8006a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d07e      	beq.n	8006b80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	2101      	movs	r1, #1
 8006a94:	fa01 f303 	lsl.w	r3, r1, r3
 8006a98:	6979      	ldr	r1, [r7, #20]
 8006a9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	634b      	str	r3, [r1, #52]	; 0x34
 8006aa2:	e06d      	b.n	8006b80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006abe:	0cdb      	lsrs	r3, r3, #19
 8006ac0:	04db      	lsls	r3, r3, #19
 8006ac2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	0151      	lsls	r1, r2, #5
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	440a      	add	r2, r1
 8006ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ade:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ae2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ae6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b2e:	6939      	ldr	r1, [r7, #16]
 8006b30:	0148      	lsls	r0, r1, #5
 8006b32:	6979      	ldr	r1, [r7, #20]
 8006b34:	4401      	add	r1, r0
 8006b36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d10d      	bne.n	8006b60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	68d9      	ldr	r1, [r3, #12]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b089      	sub	sp, #36	; 0x24
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	4611      	mov	r1, r2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	71fb      	strb	r3, [r7, #7]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006bac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11a      	bne.n	8006bea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bb4:	88bb      	ldrh	r3, [r7, #4]
 8006bb6:	3303      	adds	r3, #3
 8006bb8:	089b      	lsrs	r3, r3, #2
 8006bba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	e00f      	b.n	8006be2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	031a      	lsls	r2, r3, #12
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bce:	461a      	mov	r2, r3
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	3301      	adds	r3, #1
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d3eb      	bcc.n	8006bc2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3724      	adds	r7, #36	; 0x24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b089      	sub	sp, #36	; 0x24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c0e:	88fb      	ldrh	r3, [r7, #6]
 8006c10:	3303      	adds	r3, #3
 8006c12:	089b      	lsrs	r3, r3, #2
 8006c14:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	e00b      	b.n	8006c34 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	3301      	adds	r3, #1
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d3ef      	bcc.n	8006c1c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006c3c:	69fb      	ldr	r3, [r7, #28]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3724      	adds	r7, #36	; 0x24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d12c      	bne.n	8006cc0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	db12      	blt.n	8006c9e <USB_EPSetStall+0x54>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00f      	beq.n	8006c9e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c9c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	e02b      	b.n	8006d18 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	db12      	blt.n	8006cf8 <USB_EPSetStall+0xae>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00f      	beq.n	8006cf8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cf6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d128      	bne.n	8006d94 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	78db      	ldrb	r3, [r3, #3]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d003      	beq.n	8006d72 <USB_EPClearStall+0x4c>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	78db      	ldrb	r3, [r3, #3]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d138      	bne.n	8006de4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	e027      	b.n	8006de4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006db2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	78db      	ldrb	r3, [r3, #3]
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d003      	beq.n	8006dc4 <USB_EPClearStall+0x9e>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	78db      	ldrb	r3, [r3, #3]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d10f      	bne.n	8006de4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e14:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e58:	f023 0302 	bic.w	r3, r3, #2
 8006e5c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006e5e:	2003      	movs	r0, #3
 8006e60:	f7fa faec 	bl	800143c <HAL_Delay>

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e88:	f043 0302 	orr.w	r3, r3, #2
 8006e8c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006e8e:	2003      	movs	r0, #3
 8006e90:	f7fa fad4 	bl	800143c <HAL_Delay>

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	0c1b      	lsrs	r3, r3, #16
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	b29b      	uxth	r3, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	4013      	ands	r3, r2
 8006f58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	fa22 f303 	lsr.w	r3, r2, r3
 8006f98:	01db      	lsls	r3, r3, #7
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ffe:	f023 0307 	bic.w	r3, r3, #7
 8007002:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007016:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	460b      	mov	r3, r1
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	333c      	adds	r3, #60	; 0x3c
 800703e:	3304      	adds	r3, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4a26      	ldr	r2, [pc, #152]	; (80070e0 <USB_EP0_OutStart+0xb8>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d90a      	bls.n	8007062 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800705c:	d101      	bne.n	8007062 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	e037      	b.n	80070d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007068:	461a      	mov	r2, r3
 800706a:	2300      	movs	r3, #0
 800706c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007090:	f043 0318 	orr.w	r3, r3, #24
 8007094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d10f      	bne.n	80070d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80070ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	4f54300a 	.word	0x4f54300a

080070e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a13      	ldr	r2, [pc, #76]	; (8007148 <USB_CoreReset+0x64>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d901      	bls.n	8007102 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e01b      	b.n	800713a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	daf2      	bge.n	80070f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f043 0201 	orr.w	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3301      	adds	r3, #1
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <USB_CoreReset+0x64>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d901      	bls.n	800712c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e006      	b.n	800713a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b01      	cmp	r3, #1
 8007136:	d0f0      	beq.n	800711a <USB_CoreReset+0x36>

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	00030d40 	.word	0x00030d40

0800714c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007158:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800715c:	f002 f93a 	bl	80093d4 <malloc>
 8007160:	4603      	mov	r3, r0
 8007162:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d105      	bne.n	8007176 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007172:	2302      	movs	r3, #2
 8007174:	e066      	b.n	8007244 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	7c1b      	ldrb	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d119      	bne.n	80071ba <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800718a:	2202      	movs	r2, #2
 800718c:	2181      	movs	r1, #129	; 0x81
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 ffa7 	bl	80090e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800719a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800719e:	2202      	movs	r2, #2
 80071a0:	2101      	movs	r1, #1
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 ff9d 	bl	80090e2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2210      	movs	r2, #16
 80071b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80071b8:	e016      	b.n	80071e8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071ba:	2340      	movs	r3, #64	; 0x40
 80071bc:	2202      	movs	r2, #2
 80071be:	2181      	movs	r1, #129	; 0x81
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 ff8e 	bl	80090e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071cc:	2340      	movs	r3, #64	; 0x40
 80071ce:	2202      	movs	r2, #2
 80071d0:	2101      	movs	r1, #1
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 ff85 	bl	80090e2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2210      	movs	r2, #16
 80071e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071e8:	2308      	movs	r3, #8
 80071ea:	2203      	movs	r2, #3
 80071ec:	2182      	movs	r1, #130	; 0x82
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 ff77 	bl	80090e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7c1b      	ldrb	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007228:	2101      	movs	r1, #1
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f002 f848 	bl	80092c0 <USBD_LL_PrepareReceive>
 8007230:	e007      	b.n	8007242 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007238:	2340      	movs	r3, #64	; 0x40
 800723a:	2101      	movs	r1, #1
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f002 f83f 	bl	80092c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800725c:	2181      	movs	r1, #129	; 0x81
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 ff65 	bl	800912e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800726a:	2101      	movs	r1, #1
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 ff5e 	bl	800912e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800727a:	2182      	movs	r1, #130	; 0x82
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 ff56 	bl	800912e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00e      	beq.n	80072ba <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ac:	4618      	mov	r0, r3
 80072ae:	f002 f899 	bl	80093e4 <free>
    pdev->pClassData = NULL;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072d4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d03a      	beq.n	8007364 <USBD_CDC_Setup+0xa0>
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	f040 8097 	bne.w	8007422 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	88db      	ldrh	r3, [r3, #6]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d029      	beq.n	8007350 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	b25b      	sxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	da11      	bge.n	800732a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007312:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	88d2      	ldrh	r2, [r2, #6]
 8007318:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800731a:	6939      	ldr	r1, [r7, #16]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	88db      	ldrh	r3, [r3, #6]
 8007320:	461a      	mov	r2, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 fa9d 	bl	8008862 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007328:	e082      	b.n	8007430 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	785a      	ldrb	r2, [r3, #1]
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	88db      	ldrh	r3, [r3, #6]
 8007338:	b2da      	uxtb	r2, r3
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007340:	6939      	ldr	r1, [r7, #16]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	88db      	ldrh	r3, [r3, #6]
 8007346:	461a      	mov	r2, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 fab6 	bl	80088ba <USBD_CtlPrepareRx>
    break;
 800734e:	e06f      	b.n	8007430 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	7850      	ldrb	r0, [r2, #1]
 800735c:	2200      	movs	r2, #0
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	4798      	blx	r3
    break;
 8007362:	e065      	b.n	8007430 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	785b      	ldrb	r3, [r3, #1]
 8007368:	2b0b      	cmp	r3, #11
 800736a:	d84f      	bhi.n	800740c <USBD_CDC_Setup+0x148>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <USBD_CDC_Setup+0xb0>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	080073a5 	.word	0x080073a5
 8007378:	0800741b 	.word	0x0800741b
 800737c:	0800740d 	.word	0x0800740d
 8007380:	0800740d 	.word	0x0800740d
 8007384:	0800740d 	.word	0x0800740d
 8007388:	0800740d 	.word	0x0800740d
 800738c:	0800740d 	.word	0x0800740d
 8007390:	0800740d 	.word	0x0800740d
 8007394:	0800740d 	.word	0x0800740d
 8007398:	0800740d 	.word	0x0800740d
 800739c:	080073cd 	.word	0x080073cd
 80073a0:	080073f5 	.word	0x080073f5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d107      	bne.n	80073be <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073ae:	f107 030c 	add.w	r3, r7, #12
 80073b2:	2202      	movs	r2, #2
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 fa53 	bl	8008862 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80073bc:	e030      	b.n	8007420 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 f9dd 	bl	8008780 <USBD_CtlError>
        ret = USBD_FAIL;
 80073c6:	2303      	movs	r3, #3
 80073c8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ca:	e029      	b.n	8007420 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d107      	bne.n	80073e6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073d6:	f107 030f 	add.w	r3, r7, #15
 80073da:	2201      	movs	r2, #1
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 fa3f 	bl	8008862 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80073e4:	e01c      	b.n	8007420 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 f9c9 	bl	8008780 <USBD_CtlError>
        ret = USBD_FAIL;
 80073ee:	2303      	movs	r3, #3
 80073f0:	75fb      	strb	r3, [r7, #23]
      break;
 80073f2:	e015      	b.n	8007420 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d00f      	beq.n	800741e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f9bd 	bl	8008780 <USBD_CtlError>
        ret = USBD_FAIL;
 8007406:	2303      	movs	r3, #3
 8007408:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800740a:	e008      	b.n	800741e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f9b6 	bl	8008780 <USBD_CtlError>
      ret = USBD_FAIL;
 8007414:	2303      	movs	r3, #3
 8007416:	75fb      	strb	r3, [r7, #23]
      break;
 8007418:	e002      	b.n	8007420 <USBD_CDC_Setup+0x15c>
      break;
 800741a:	bf00      	nop
 800741c:	e008      	b.n	8007430 <USBD_CDC_Setup+0x16c>
      break;
 800741e:	bf00      	nop
    }
    break;
 8007420:	e006      	b.n	8007430 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f9ab 	bl	8008780 <USBD_CtlError>
    ret = USBD_FAIL;
 800742a:	2303      	movs	r3, #3
 800742c:	75fb      	strb	r3, [r7, #23]
    break;
 800742e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop

0800743c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800744e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800745a:	2303      	movs	r3, #3
 800745c:	e049      	b.n	80074f2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007464:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	3318      	adds	r3, #24
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d029      	beq.n	80074d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	3318      	adds	r3, #24
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	78f9      	ldrb	r1, [r7, #3]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	460b      	mov	r3, r1
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	1a5b      	subs	r3, r3, r1
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4403      	add	r3, r0
 800749c:	3344      	adds	r3, #68	; 0x44
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80074a4:	fb03 f301 	mul.w	r3, r3, r1
 80074a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d110      	bne.n	80074d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80074ae:	78fa      	ldrb	r2, [r7, #3]
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	440b      	add	r3, r1
 80074bc:	3318      	adds	r3, #24
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074c2:	78f9      	ldrb	r1, [r7, #3]
 80074c4:	2300      	movs	r3, #0
 80074c6:	2200      	movs	r2, #0
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fed8 	bl	800927e <USBD_LL_Transmit>
 80074ce:	e00f      	b.n	80074f0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800750c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	e015      	b.n	8007548 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 feee 	bl	8009302 <USBD_LL_GetRxDataSize>
 8007526:	4602      	mov	r2, r0
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007542:	4611      	mov	r1, r2
 8007544:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800755e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d015      	beq.n	8007596 <USBD_CDC_EP0_RxReady+0x46>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007570:	2bff      	cmp	r3, #255	; 0xff
 8007572:	d010      	beq.n	8007596 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007582:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800758a:	b292      	uxth	r2, r2
 800758c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	22ff      	movs	r2, #255	; 0xff
 8007592:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2243      	movs	r2, #67	; 0x43
 80075ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80075ae:	4b03      	ldr	r3, [pc, #12]	; (80075bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	20000094 	.word	0x20000094

080075c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2243      	movs	r2, #67	; 0x43
 80075cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80075ce:	4b03      	ldr	r3, [pc, #12]	; (80075dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	20000050 	.word	0x20000050

080075e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2243      	movs	r2, #67	; 0x43
 80075ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80075ee:	4b03      	ldr	r3, [pc, #12]	; (80075fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	200000d8 	.word	0x200000d8

08007600 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	220a      	movs	r2, #10
 800760c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	2000000c 	.word	0x2000000c

08007620 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007630:	2303      	movs	r3, #3
 8007632:	e004      	b.n	800763e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800764a:	b480      	push	{r7}
 800764c:	b087      	sub	sp, #28
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800765c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800768c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e01a      	b.n	80076fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d114      	bne.n	80076fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076ee:	2181      	movs	r1, #129	; 0x81
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fdc4 	bl	800927e <USBD_LL_Transmit>

    ret = USBD_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007712:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800771e:	2303      	movs	r3, #3
 8007720:	e016      	b.n	8007750 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	7c1b      	ldrb	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007734:	2101      	movs	r1, #1
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 fdc2 	bl	80092c0 <USBD_LL_PrepareReceive>
 800773c:	e007      	b.n	800774e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007744:	2340      	movs	r3, #64	; 0x40
 8007746:	2101      	movs	r1, #1
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 fdb9 	bl	80092c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800776c:	2303      	movs	r3, #3
 800776e:	e025      	b.n	80077bc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	79fa      	ldrb	r2, [r7, #7]
 80077ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f001 fc2f 	bl	8009014 <USBD_LL_Init>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80077d8:	2303      	movs	r3, #3
 80077da:	e010      	b.n	80077fe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f107 020e 	add.w	r2, r7, #14
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	4602      	mov	r2, r0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 fc4c 	bl	80090ac <USBD_LL_Start>
 8007814:	4603      	mov	r3, r0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	4611      	mov	r1, r2
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	4611      	mov	r1, r2
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
  }

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 ff2c 	bl	800870c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078c2:	461a      	mov	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d00e      	beq.n	80078f6 <USBD_LL_SetupStage+0x5a>
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d302      	bcc.n	80078e2 <USBD_LL_SetupStage+0x46>
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d014      	beq.n	800790a <USBD_LL_SetupStage+0x6e>
 80078e0:	e01d      	b.n	800791e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa18 	bl	8007d20 <USBD_StdDevReq>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]
      break;
 80078f4:	e020      	b.n	8007938 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa7c 	bl	8007dfc <USBD_StdItfReq>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]
      break;
 8007908:	e016      	b.n	8007938 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fab8 	bl	8007e88 <USBD_StdEPReq>
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]
      break;
 800791c:	e00c      	b.n	8007938 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007924:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007928:	b2db      	uxtb	r3, r3
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 fc1d 	bl	800916c <USBD_LL_StallEP>
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
      break;
 8007936:	bf00      	nop
  }

  return ret;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b086      	sub	sp, #24
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	460b      	mov	r3, r1
 800794c:	607a      	str	r2, [r7, #4]
 800794e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007950:	7afb      	ldrb	r3, [r7, #11]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d137      	bne.n	80079c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800795c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007964:	2b03      	cmp	r3, #3
 8007966:	d14a      	bne.n	80079fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	429a      	cmp	r2, r3
 8007972:	d913      	bls.n	800799c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	1ad2      	subs	r2, r2, r3
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	4293      	cmp	r3, r2
 800798c:	bf28      	it	cs
 800798e:	4613      	movcs	r3, r2
 8007990:	461a      	mov	r2, r3
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 ffad 	bl	80088f4 <USBD_CtlContinueRx>
 800799a:	e030      	b.n	80079fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00a      	beq.n	80079be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d105      	bne.n	80079be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 ffa9 	bl	8008916 <USBD_CtlSendStatus>
 80079c4:	e01b      	b.n	80079fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d013      	beq.n	80079fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d10e      	bne.n	80079fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	7afa      	ldrb	r2, [r7, #11]
 80079e6:	4611      	mov	r1, r2
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	4798      	blx	r3
 80079ec:	4603      	mov	r3, r0
 80079ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	e002      	b.n	8007a00 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e000      	b.n	8007a00 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	460b      	mov	r3, r1
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a16:	7afb      	ldrb	r3, [r7, #11]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d16a      	bne.n	8007af2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3314      	adds	r3, #20
 8007a20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d155      	bne.n	8007ad8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d914      	bls.n	8007a62 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	1ad2      	subs	r2, r2, r3
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 ff22 	bl	8008898 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a54:	2300      	movs	r3, #0
 8007a56:	2200      	movs	r2, #0
 8007a58:	2100      	movs	r1, #0
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f001 fc30 	bl	80092c0 <USBD_LL_PrepareReceive>
 8007a60:	e03a      	b.n	8007ad8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d11c      	bne.n	8007aa8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d316      	bcc.n	8007aa8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d20f      	bcs.n	8007aa8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 ff03 	bl	8008898 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f001 fc0d 	bl	80092c0 <USBD_LL_PrepareReceive>
 8007aa6:	e017      	b.n	8007ad8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d105      	bne.n	8007aca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aca:	2180      	movs	r1, #128	; 0x80
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f001 fb4d 	bl	800916c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 ff32 	bl	800893c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d123      	bne.n	8007b2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff fe9b 	bl	800781e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007af0:	e01b      	b.n	8007b2a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d013      	beq.n	8007b26 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d10e      	bne.n	8007b26 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	7afa      	ldrb	r2, [r7, #11]
 8007b12:	4611      	mov	r1, r2
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	4798      	blx	r3
 8007b18:	4603      	mov	r3, r0
 8007b1a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	e002      	b.n	8007b2c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e000      	b.n	8007b2c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6852      	ldr	r2, [r2, #4]
 8007b70:	b2d2      	uxtb	r2, r2
 8007b72:	4611      	mov	r1, r2
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b78:	2340      	movs	r3, #64	; 0x40
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 faaf 	bl	80090e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2240      	movs	r2, #64	; 0x40
 8007b90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b94:	2340      	movs	r3, #64	; 0x40
 8007b96:	2200      	movs	r2, #0
 8007b98:	2180      	movs	r1, #128	; 0x80
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 faa1 	bl	80090e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2240      	movs	r2, #64	; 0x40
 8007baa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	78fa      	ldrb	r2, [r7, #3]
 8007bc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2204      	movs	r2, #4
 8007bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d105      	bne.n	8007c1e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d10b      	bne.n	8007c56 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d009      	beq.n	8007cd8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	6852      	ldr	r2, [r2, #4]
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
  }

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b087      	sub	sp, #28
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d00:	8a3b      	ldrh	r3, [r7, #16]
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	b21a      	sxth	r2, r3
 8007d06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	b21b      	sxth	r3, r3
 8007d0e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d10:	89fb      	ldrh	r3, [r7, #14]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	d004      	beq.n	8007d44 <USBD_StdDevReq+0x24>
 8007d3a:	2b40      	cmp	r3, #64	; 0x40
 8007d3c:	d002      	beq.n	8007d44 <USBD_StdDevReq+0x24>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <USBD_StdDevReq+0x38>
 8007d42:	e050      	b.n	8007de6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	73fb      	strb	r3, [r7, #15]
    break;
 8007d56:	e04b      	b.n	8007df0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	d83c      	bhi.n	8007dda <USBD_StdDevReq+0xba>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <USBD_StdDevReq+0x48>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007dd1 	.word	0x08007dd1
 8007d70:	08007ddb 	.word	0x08007ddb
 8007d74:	08007dc7 	.word	0x08007dc7
 8007d78:	08007ddb 	.word	0x08007ddb
 8007d7c:	08007d9b 	.word	0x08007d9b
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007ddb 	.word	0x08007ddb
 8007d88:	08007db3 	.word	0x08007db3
 8007d8c:	08007da5 	.word	0x08007da5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f9ce 	bl	8008134 <USBD_GetDescriptor>
      break;
 8007d98:	e024      	b.n	8007de4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fb33 	bl	8008408 <USBD_SetAddress>
      break;
 8007da2:	e01f      	b.n	8007de4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fb70 	bl	800848c <USBD_SetConfig>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
      break;
 8007db0:	e018      	b.n	8007de4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fc0d 	bl	80085d4 <USBD_GetConfig>
      break;
 8007dba:	e013      	b.n	8007de4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fc3c 	bl	800863c <USBD_GetStatus>
      break;
 8007dc4:	e00e      	b.n	8007de4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fc6a 	bl	80086a2 <USBD_SetFeature>
      break;
 8007dce:	e009      	b.n	8007de4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fc79 	bl	80086ca <USBD_ClrFeature>
      break;
 8007dd8:	e004      	b.n	8007de4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fccf 	bl	8008780 <USBD_CtlError>
      break;
 8007de2:	bf00      	nop
    }
    break;
 8007de4:	e004      	b.n	8007df0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fcc9 	bl	8008780 <USBD_CtlError>
    break;
 8007dee:	bf00      	nop
  }

  return ret;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d003      	beq.n	8007e1e <USBD_StdItfReq+0x22>
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d001      	beq.n	8007e1e <USBD_StdItfReq+0x22>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d12a      	bne.n	8007e74 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e24:	3b01      	subs	r3, #1
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d81d      	bhi.n	8007e66 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	889b      	ldrh	r3, [r3, #4]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d813      	bhi.n	8007e5c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	88db      	ldrh	r3, [r3, #6]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d110      	bne.n	8007e70 <USBD_StdItfReq+0x74>
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10d      	bne.n	8007e70 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fd5e 	bl	8008916 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007e5a:	e009      	b.n	8007e70 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fc8e 	bl	8008780 <USBD_CtlError>
      break;
 8007e64:	e004      	b.n	8007e70 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fc89 	bl	8008780 <USBD_CtlError>
      break;
 8007e6e:	e000      	b.n	8007e72 <USBD_StdItfReq+0x76>
      break;
 8007e70:	bf00      	nop
    }
    break;
 8007e72:	e004      	b.n	8007e7e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fc82 	bl	8008780 <USBD_CtlError>
    break;
 8007e7c:	bf00      	nop
  }

  return ret;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	889b      	ldrh	r3, [r3, #4]
 8007e9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d004      	beq.n	8007eb2 <USBD_StdEPReq+0x2a>
 8007ea8:	2b40      	cmp	r3, #64	; 0x40
 8007eaa:	d002      	beq.n	8007eb2 <USBD_StdEPReq+0x2a>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <USBD_StdEPReq+0x3e>
 8007eb0:	e135      	b.n	800811e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec4:	e130      	b.n	8008128 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	785b      	ldrb	r3, [r3, #1]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d03e      	beq.n	8007f4c <USBD_StdEPReq+0xc4>
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d002      	beq.n	8007ed8 <USBD_StdEPReq+0x50>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d077      	beq.n	8007fc6 <USBD_StdEPReq+0x13e>
 8007ed6:	e11c      	b.n	8008112 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d002      	beq.n	8007ee8 <USBD_StdEPReq+0x60>
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d015      	beq.n	8007f12 <USBD_StdEPReq+0x8a>
 8007ee6:	e02b      	b.n	8007f40 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <USBD_StdEPReq+0x80>
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	2b80      	cmp	r3, #128	; 0x80
 8007ef2:	d009      	beq.n	8007f08 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f937 	bl	800916c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007efe:	2180      	movs	r1, #128	; 0x80
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 f933 	bl	800916c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007f06:	e020      	b.n	8007f4a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fc38 	bl	8008780 <USBD_CtlError>
        break;
 8007f10:	e01b      	b.n	8007f4a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	885b      	ldrh	r3, [r3, #2]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10e      	bne.n	8007f38 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <USBD_StdEPReq+0xb0>
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	2b80      	cmp	r3, #128	; 0x80
 8007f24:	d008      	beq.n	8007f38 <USBD_StdEPReq+0xb0>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	88db      	ldrh	r3, [r3, #6]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 f91a 	bl	800916c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fcec 	bl	8008916 <USBD_CtlSendStatus>

        break;
 8007f3e:	e004      	b.n	8007f4a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fc1c 	bl	8008780 <USBD_CtlError>
        break;
 8007f48:	bf00      	nop
      }
      break;
 8007f4a:	e0e7      	b.n	800811c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d002      	beq.n	8007f5c <USBD_StdEPReq+0xd4>
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d015      	beq.n	8007f86 <USBD_StdEPReq+0xfe>
 8007f5a:	e02d      	b.n	8007fb8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00c      	beq.n	8007f7c <USBD_StdEPReq+0xf4>
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b80      	cmp	r3, #128	; 0x80
 8007f66:	d009      	beq.n	8007f7c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 f8fd 	bl	800916c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f72:	2180      	movs	r1, #128	; 0x80
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 f8f9 	bl	800916c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007f7a:	e023      	b.n	8007fc4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fbfe 	bl	8008780 <USBD_CtlError>
        break;
 8007f84:	e01e      	b.n	8007fc4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	885b      	ldrh	r3, [r3, #2]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d119      	bne.n	8007fc2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d004      	beq.n	8007fa2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f904 	bl	80091aa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fcb7 	bl	8008916 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
        }
        break;
 8007fb6:	e004      	b.n	8007fc2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fbe0 	bl	8008780 <USBD_CtlError>
        break;
 8007fc0:	e000      	b.n	8007fc4 <USBD_StdEPReq+0x13c>
        break;
 8007fc2:	bf00      	nop
      }
      break;
 8007fc4:	e0aa      	b.n	800811c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d002      	beq.n	8007fd6 <USBD_StdEPReq+0x14e>
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d032      	beq.n	800803a <USBD_StdEPReq+0x1b2>
 8007fd4:	e097      	b.n	8008106 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d007      	beq.n	8007fec <USBD_StdEPReq+0x164>
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b80      	cmp	r3, #128	; 0x80
 8007fe0:	d004      	beq.n	8007fec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fbcb 	bl	8008780 <USBD_CtlError>
          break;
 8007fea:	e091      	b.n	8008110 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	da0b      	bge.n	800800c <USBD_StdEPReq+0x184>
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	3310      	adds	r3, #16
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	4413      	add	r3, r2
 8008008:	3304      	adds	r3, #4
 800800a:	e00b      	b.n	8008024 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4413      	add	r3, r2
 8008022:	3304      	adds	r3, #4
 8008024:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2202      	movs	r2, #2
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fc15 	bl	8008862 <USBD_CtlSendData>
        break;
 8008038:	e06a      	b.n	8008110 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800803a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800803e:	2b00      	cmp	r3, #0
 8008040:	da11      	bge.n	8008066 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	f003 020f 	and.w	r2, r3, #15
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	3324      	adds	r3, #36	; 0x24
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d117      	bne.n	800808c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fb8e 	bl	8008780 <USBD_CtlError>
            break;
 8008064:	e054      	b.n	8008110 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	f003 020f 	and.w	r2, r3, #15
 800806c:	6879      	ldr	r1, [r7, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	440b      	add	r3, r1
 8008078:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d104      	bne.n	800808c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fb7b 	bl	8008780 <USBD_CtlError>
            break;
 800808a:	e041      	b.n	8008110 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800808c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008090:	2b00      	cmp	r3, #0
 8008092:	da0b      	bge.n	80080ac <USBD_StdEPReq+0x224>
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	3310      	adds	r3, #16
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	4413      	add	r3, r2
 80080a8:	3304      	adds	r3, #4
 80080aa:	e00b      	b.n	80080c4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	4413      	add	r3, r2
 80080c2:	3304      	adds	r3, #4
 80080c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <USBD_StdEPReq+0x24a>
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b80      	cmp	r3, #128	; 0x80
 80080d0:	d103      	bne.n	80080da <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	e00e      	b.n	80080f8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 f882 	bl	80091e8 <USBD_LL_IsStallEP>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2201      	movs	r2, #1
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	e002      	b.n	80080f8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2202      	movs	r2, #2
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fbaf 	bl	8008862 <USBD_CtlSendData>
          break;
 8008104:	e004      	b.n	8008110 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fb39 	bl	8008780 <USBD_CtlError>
        break;
 800810e:	bf00      	nop
      }
      break;
 8008110:	e004      	b.n	800811c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fb33 	bl	8008780 <USBD_CtlError>
      break;
 800811a:	bf00      	nop
    }
    break;
 800811c:	e004      	b.n	8008128 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fb2d 	bl	8008780 <USBD_CtlError>
    break;
 8008126:	bf00      	nop
  }

  return ret;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	885b      	ldrh	r3, [r3, #2]
 800814e:	0a1b      	lsrs	r3, r3, #8
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	2b06      	cmp	r3, #6
 8008156:	f200 8128 	bhi.w	80083aa <USBD_GetDescriptor+0x276>
 800815a:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <USBD_GetDescriptor+0x2c>)
 800815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008160:	0800817d 	.word	0x0800817d
 8008164:	08008195 	.word	0x08008195
 8008168:	080081d5 	.word	0x080081d5
 800816c:	080083ab 	.word	0x080083ab
 8008170:	080083ab 	.word	0x080083ab
 8008174:	0800834b 	.word	0x0800834b
 8008178:	08008377 	.word	0x08008377
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	7c12      	ldrb	r2, [r2, #16]
 8008188:	f107 0108 	add.w	r1, r7, #8
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	60f8      	str	r0, [r7, #12]
    break;
 8008192:	e112      	b.n	80083ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	7c1b      	ldrb	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10d      	bne.n	80081b8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a4:	f107 0208 	add.w	r2, r7, #8
 80081a8:	4610      	mov	r0, r2
 80081aa:	4798      	blx	r3
 80081ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3301      	adds	r3, #1
 80081b2:	2202      	movs	r2, #2
 80081b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80081b6:	e100      	b.n	80083ba <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	f107 0208 	add.w	r2, r7, #8
 80081c4:	4610      	mov	r0, r2
 80081c6:	4798      	blx	r3
 80081c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3301      	adds	r3, #1
 80081ce:	2202      	movs	r2, #2
 80081d0:	701a      	strb	r2, [r3, #0]
    break;
 80081d2:	e0f2      	b.n	80083ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	885b      	ldrh	r3, [r3, #2]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b05      	cmp	r3, #5
 80081dc:	f200 80ac 	bhi.w	8008338 <USBD_GetDescriptor+0x204>
 80081e0:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <USBD_GetDescriptor+0xb4>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	08008201 	.word	0x08008201
 80081ec:	08008235 	.word	0x08008235
 80081f0:	08008269 	.word	0x08008269
 80081f4:	0800829d 	.word	0x0800829d
 80081f8:	080082d1 	.word	0x080082d1
 80081fc:	08008305 	.word	0x08008305
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	7c12      	ldrb	r2, [r2, #16]
 8008218:	f107 0108 	add.w	r1, r7, #8
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008222:	e091      	b.n	8008348 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 faaa 	bl	8008780 <USBD_CtlError>
        err++;
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	3301      	adds	r3, #1
 8008230:	72fb      	strb	r3, [r7, #11]
      break;
 8008232:	e089      	b.n	8008348 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	7c12      	ldrb	r2, [r2, #16]
 800824c:	f107 0108 	add.w	r1, r7, #8
 8008250:	4610      	mov	r0, r2
 8008252:	4798      	blx	r3
 8008254:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008256:	e077      	b.n	8008348 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa90 	bl	8008780 <USBD_CtlError>
        err++;
 8008260:	7afb      	ldrb	r3, [r7, #11]
 8008262:	3301      	adds	r3, #1
 8008264:	72fb      	strb	r3, [r7, #11]
      break;
 8008266:	e06f      	b.n	8008348 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	7c12      	ldrb	r2, [r2, #16]
 8008280:	f107 0108 	add.w	r1, r7, #8
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
 8008288:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800828a:	e05d      	b.n	8008348 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa76 	bl	8008780 <USBD_CtlError>
        err++;
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	3301      	adds	r3, #1
 8008298:	72fb      	strb	r3, [r7, #11]
      break;
 800829a:	e055      	b.n	8008348 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	7c12      	ldrb	r2, [r2, #16]
 80082b4:	f107 0108 	add.w	r1, r7, #8
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
 80082bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082be:	e043      	b.n	8008348 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa5c 	bl	8008780 <USBD_CtlError>
        err++;
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	3301      	adds	r3, #1
 80082cc:	72fb      	strb	r3, [r7, #11]
      break;
 80082ce:	e03b      	b.n	8008348 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	7c12      	ldrb	r2, [r2, #16]
 80082e8:	f107 0108 	add.w	r1, r7, #8
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
 80082f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082f2:	e029      	b.n	8008348 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fa42 	bl	8008780 <USBD_CtlError>
        err++;
 80082fc:	7afb      	ldrb	r3, [r7, #11]
 80082fe:	3301      	adds	r3, #1
 8008300:	72fb      	strb	r3, [r7, #11]
      break;
 8008302:	e021      	b.n	8008348 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	7c12      	ldrb	r2, [r2, #16]
 800831c:	f107 0108 	add.w	r1, r7, #8
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
 8008324:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008326:	e00f      	b.n	8008348 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa28 	bl	8008780 <USBD_CtlError>
        err++;
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	3301      	adds	r3, #1
 8008334:	72fb      	strb	r3, [r7, #11]
      break;
 8008336:	e007      	b.n	8008348 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa20 	bl	8008780 <USBD_CtlError>
      err++;
 8008340:	7afb      	ldrb	r3, [r7, #11]
 8008342:	3301      	adds	r3, #1
 8008344:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008346:	bf00      	nop
    }
    break;
 8008348:	e037      	b.n	80083ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	7c1b      	ldrb	r3, [r3, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d109      	bne.n	8008366 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835a:	f107 0208 	add.w	r2, r7, #8
 800835e:	4610      	mov	r0, r2
 8008360:	4798      	blx	r3
 8008362:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008364:	e029      	b.n	80083ba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fa09 	bl	8008780 <USBD_CtlError>
      err++;
 800836e:	7afb      	ldrb	r3, [r7, #11]
 8008370:	3301      	adds	r3, #1
 8008372:	72fb      	strb	r3, [r7, #11]
    break;
 8008374:	e021      	b.n	80083ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7c1b      	ldrb	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10d      	bne.n	800839a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008386:	f107 0208 	add.w	r2, r7, #8
 800838a:	4610      	mov	r0, r2
 800838c:	4798      	blx	r3
 800838e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3301      	adds	r3, #1
 8008394:	2207      	movs	r2, #7
 8008396:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008398:	e00f      	b.n	80083ba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f9ef 	bl	8008780 <USBD_CtlError>
      err++;
 80083a2:	7afb      	ldrb	r3, [r7, #11]
 80083a4:	3301      	adds	r3, #1
 80083a6:	72fb      	strb	r3, [r7, #11]
    break;
 80083a8:	e007      	b.n	80083ba <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f9e7 	bl	8008780 <USBD_CtlError>
    err++;
 80083b2:	7afb      	ldrb	r3, [r7, #11]
 80083b4:	3301      	adds	r3, #1
 80083b6:	72fb      	strb	r3, [r7, #11]
    break;
 80083b8:	bf00      	nop
  }

  if (err != 0U)
 80083ba:	7afb      	ldrb	r3, [r7, #11]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d11e      	bne.n	80083fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	88db      	ldrh	r3, [r3, #6]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d016      	beq.n	80083f6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80083c8:	893b      	ldrh	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00e      	beq.n	80083ec <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	88da      	ldrh	r2, [r3, #6]
 80083d2:	893b      	ldrh	r3, [r7, #8]
 80083d4:	4293      	cmp	r3, r2
 80083d6:	bf28      	it	cs
 80083d8:	4613      	movcs	r3, r2
 80083da:	b29b      	uxth	r3, r3
 80083dc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80083de:	893b      	ldrh	r3, [r7, #8]
 80083e0:	461a      	mov	r2, r3
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa3c 	bl	8008862 <USBD_CtlSendData>
 80083ea:	e009      	b.n	8008400 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f9c6 	bl	8008780 <USBD_CtlError>
 80083f4:	e004      	b.n	8008400 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa8d 	bl	8008916 <USBD_CtlSendStatus>
 80083fc:	e000      	b.n	8008400 <USBD_GetDescriptor+0x2cc>
    return;
 80083fe:	bf00      	nop
    }
  }
}
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop

08008408 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	889b      	ldrh	r3, [r3, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d130      	bne.n	800847c <USBD_SetAddress+0x74>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	88db      	ldrh	r3, [r3, #6]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d12c      	bne.n	800847c <USBD_SetAddress+0x74>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	885b      	ldrh	r3, [r3, #2]
 8008426:	2b7f      	cmp	r3, #127	; 0x7f
 8008428:	d828      	bhi.n	800847c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	885b      	ldrh	r3, [r3, #2]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008434:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843c:	2b03      	cmp	r3, #3
 800843e:	d104      	bne.n	800844a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f99c 	bl	8008780 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008448:	e01c      	b.n	8008484 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	7bfa      	ldrb	r2, [r7, #15]
 800844e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fef2 	bl	8009240 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa5a 	bl	8008916 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d004      	beq.n	8008472 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008470:	e008      	b.n	8008484 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847a:	e003      	b.n	8008484 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f97e 	bl	8008780 <USBD_CtlError>
  }
}
 8008484:	bf00      	nop
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	4b4b      	ldr	r3, [pc, #300]	; (80085d0 <USBD_SetConfig+0x144>)
 80084a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084a4:	4b4a      	ldr	r3, [pc, #296]	; (80085d0 <USBD_SetConfig+0x144>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d905      	bls.n	80084b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f966 	bl	8008780 <USBD_CtlError>
    return USBD_FAIL;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e087      	b.n	80085c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d002      	beq.n	80084c8 <USBD_SetConfig+0x3c>
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d025      	beq.n	8008512 <USBD_SetConfig+0x86>
 80084c6:	e071      	b.n	80085ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80084c8:	4b41      	ldr	r3, [pc, #260]	; (80085d0 <USBD_SetConfig+0x144>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01c      	beq.n	800850a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80084d0:	4b3f      	ldr	r3, [pc, #252]	; (80085d0 <USBD_SetConfig+0x144>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80084da:	4b3d      	ldr	r3, [pc, #244]	; (80085d0 <USBD_SetConfig+0x144>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff f9a7 	bl	8007834 <USBD_SetClassConfig>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f944 	bl	8008780 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80084f8:	e065      	b.n	80085c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa0b 	bl	8008916 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2203      	movs	r2, #3
 8008504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008508:	e05d      	b.n	80085c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa03 	bl	8008916 <USBD_CtlSendStatus>
    break;
 8008510:	e059      	b.n	80085c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008512:	4b2f      	ldr	r3, [pc, #188]	; (80085d0 <USBD_SetConfig+0x144>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d112      	bne.n	8008540 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2202      	movs	r2, #2
 800851e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008522:	4b2b      	ldr	r3, [pc, #172]	; (80085d0 <USBD_SetConfig+0x144>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800852c:	4b28      	ldr	r3, [pc, #160]	; (80085d0 <USBD_SetConfig+0x144>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff f99a 	bl	800786c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f9ec 	bl	8008916 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800853e:	e042      	b.n	80085c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008540:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <USBD_SetConfig+0x144>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	429a      	cmp	r2, r3
 800854c:	d02a      	beq.n	80085a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff f988 	bl	800786c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800855c:	4b1c      	ldr	r3, [pc, #112]	; (80085d0 <USBD_SetConfig+0x144>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008566:	4b1a      	ldr	r3, [pc, #104]	; (80085d0 <USBD_SetConfig+0x144>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff f961 	bl	8007834 <USBD_SetClassConfig>
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00f      	beq.n	800859c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f8fe 	bl	8008780 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff f96d 	bl	800786c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800859a:	e014      	b.n	80085c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f9ba 	bl	8008916 <USBD_CtlSendStatus>
    break;
 80085a2:	e010      	b.n	80085c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f9b6 	bl	8008916 <USBD_CtlSendStatus>
    break;
 80085aa:	e00c      	b.n	80085c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8e6 	bl	8008780 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085b4:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <USBD_SetConfig+0x144>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7ff f956 	bl	800786c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80085c0:	2303      	movs	r3, #3
 80085c2:	73fb      	strb	r3, [r7, #15]
    break;
 80085c4:	bf00      	nop
  }

  return ret;
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20000204 	.word	0x20000204

080085d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	88db      	ldrh	r3, [r3, #6]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d004      	beq.n	80085f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f8c9 	bl	8008780 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80085ee:	e021      	b.n	8008634 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	db17      	blt.n	800862a <USBD_GetConfig+0x56>
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	dd02      	ble.n	8008604 <USBD_GetConfig+0x30>
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d00b      	beq.n	800861a <USBD_GetConfig+0x46>
 8008602:	e012      	b.n	800862a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3308      	adds	r3, #8
 800860e:	2201      	movs	r2, #1
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f925 	bl	8008862 <USBD_CtlSendData>
      break;
 8008618:	e00c      	b.n	8008634 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3304      	adds	r3, #4
 800861e:	2201      	movs	r2, #1
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f91d 	bl	8008862 <USBD_CtlSendData>
      break;
 8008628:	e004      	b.n	8008634 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f8a7 	bl	8008780 <USBD_CtlError>
      break;
 8008632:	bf00      	nop
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864c:	3b01      	subs	r3, #1
 800864e:	2b02      	cmp	r3, #2
 8008650:	d81e      	bhi.n	8008690 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	88db      	ldrh	r3, [r3, #6]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d004      	beq.n	8008664 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f88f 	bl	8008780 <USBD_CtlError>
      break;
 8008662:	e01a      	b.n	800869a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f043 0202 	orr.w	r2, r3, #2
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	330c      	adds	r3, #12
 8008684:	2202      	movs	r2, #2
 8008686:	4619      	mov	r1, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f8ea 	bl	8008862 <USBD_CtlSendData>
    break;
 800868e:	e004      	b.n	800869a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f874 	bl	8008780 <USBD_CtlError>
    break;
 8008698:	bf00      	nop
  }
}
 800869a:	bf00      	nop
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	885b      	ldrh	r3, [r3, #2]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d106      	bne.n	80086c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f92a 	bl	8008916 <USBD_CtlSendStatus>
  }
}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086da:	3b01      	subs	r3, #1
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d80b      	bhi.n	80086f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	885b      	ldrh	r3, [r3, #2]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d10c      	bne.n	8008702 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f910 	bl	8008916 <USBD_CtlSendStatus>
      }
      break;
 80086f6:	e004      	b.n	8008702 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f840 	bl	8008780 <USBD_CtlError>
      break;
 8008700:	e000      	b.n	8008704 <USBD_ClrFeature+0x3a>
      break;
 8008702:	bf00      	nop
  }
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	781a      	ldrb	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3301      	adds	r3, #1
 8008726:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	781a      	ldrb	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3301      	adds	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7ff fad3 	bl	8007ce2 <SWAPBYTE>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff fac6 	bl	8007ce2 <SWAPBYTE>
 8008756:	4603      	mov	r3, r0
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3301      	adds	r3, #1
 8008762:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff fab9 	bl	8007ce2 <SWAPBYTE>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	80da      	strh	r2, [r3, #6]
}
 8008778:	bf00      	nop
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800878a:	2180      	movs	r1, #128	; 0x80
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fced 	bl	800916c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008792:	2100      	movs	r1, #0
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fce9 	bl	800916c <USBD_LL_StallEP>
}
 800879a:	bf00      	nop
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b086      	sub	sp, #24
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d036      	beq.n	8008826 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80087bc:	6938      	ldr	r0, [r7, #16]
 80087be:	f000 f836 	bl	800882e <USBD_GetLen>
 80087c2:	4603      	mov	r3, r0
 80087c4:	3301      	adds	r3, #1
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	4413      	add	r3, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	7812      	ldrb	r2, [r2, #0]
 80087da:	701a      	strb	r2, [r3, #0]
  idx++;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	3301      	adds	r3, #1
 80087e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	4413      	add	r3, r2
 80087e8:	2203      	movs	r2, #3
 80087ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	3301      	adds	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80087f2:	e013      	b.n	800881c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	4413      	add	r3, r2
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	7812      	ldrb	r2, [r2, #0]
 80087fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	3301      	adds	r3, #1
 8008804:	613b      	str	r3, [r7, #16]
    idx++;
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	3301      	adds	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	4413      	add	r3, r2
 8008812:	2200      	movs	r2, #0
 8008814:	701a      	strb	r2, [r3, #0]
    idx++;
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	3301      	adds	r3, #1
 800881a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e7      	bne.n	80087f4 <USBD_GetString+0x52>
 8008824:	e000      	b.n	8008828 <USBD_GetString+0x86>
    return;
 8008826:	bf00      	nop
  }
}
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800882e:	b480      	push	{r7}
 8008830:	b085      	sub	sp, #20
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800883e:	e005      	b.n	800884c <USBD_GetLen+0x1e>
  {
    len++;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	3301      	adds	r3, #1
 8008844:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	3301      	adds	r3, #1
 800884a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f5      	bne.n	8008840 <USBD_GetLen+0x12>
  }

  return len;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2202      	movs	r2, #2
 8008872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	2100      	movs	r1, #0
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 fcf8 	bl	800927e <USBD_LL_Transmit>

  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	2100      	movs	r1, #0
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 fce7 	bl	800927e <USBD_LL_Transmit>

  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2203      	movs	r2, #3
 80088ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	2100      	movs	r1, #0
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fceb 	bl	80092c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	2100      	movs	r1, #0
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fcda 	bl	80092c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2204      	movs	r2, #4
 8008922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008926:	2300      	movs	r3, #0
 8008928:	2200      	movs	r2, #0
 800892a:	2100      	movs	r1, #0
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fca6 	bl	800927e <USBD_LL_Transmit>

  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2205      	movs	r2, #5
 8008948:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800894c:	2300      	movs	r3, #0
 800894e:	2200      	movs	r2, #0
 8008950:	2100      	movs	r1, #0
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fcb4 	bl	80092c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008968:	2200      	movs	r2, #0
 800896a:	4912      	ldr	r1, [pc, #72]	; (80089b4 <MX_USB_DEVICE_Init+0x50>)
 800896c:	4812      	ldr	r0, [pc, #72]	; (80089b8 <MX_USB_DEVICE_Init+0x54>)
 800896e:	f7fe fef3 	bl	8007758 <USBD_Init>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008978:	f7f8 f9c0 	bl	8000cfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800897c:	490f      	ldr	r1, [pc, #60]	; (80089bc <MX_USB_DEVICE_Init+0x58>)
 800897e:	480e      	ldr	r0, [pc, #56]	; (80089b8 <MX_USB_DEVICE_Init+0x54>)
 8008980:	f7fe ff20 	bl	80077c4 <USBD_RegisterClass>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800898a:	f7f8 f9b7 	bl	8000cfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800898e:	490c      	ldr	r1, [pc, #48]	; (80089c0 <MX_USB_DEVICE_Init+0x5c>)
 8008990:	4809      	ldr	r0, [pc, #36]	; (80089b8 <MX_USB_DEVICE_Init+0x54>)
 8008992:	f7fe fe45 	bl	8007620 <USBD_CDC_RegisterInterface>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800899c:	f7f8 f9ae 	bl	8000cfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089a0:	4805      	ldr	r0, [pc, #20]	; (80089b8 <MX_USB_DEVICE_Init+0x54>)
 80089a2:	f7fe ff30 	bl	8007806 <USBD_Start>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089ac:	f7f8 f9a6 	bl	8000cfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089b0:	bf00      	nop
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20000130 	.word	0x20000130
 80089b8:	20000498 	.word	0x20000498
 80089bc:	20000018 	.word	0x20000018
 80089c0:	2000011c 	.word	0x2000011c

080089c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089c8:	2200      	movs	r2, #0
 80089ca:	4905      	ldr	r1, [pc, #20]	; (80089e0 <CDC_Init_FS+0x1c>)
 80089cc:	4805      	ldr	r0, [pc, #20]	; (80089e4 <CDC_Init_FS+0x20>)
 80089ce:	f7fe fe3c 	bl	800764a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089d2:	4905      	ldr	r1, [pc, #20]	; (80089e8 <CDC_Init_FS+0x24>)
 80089d4:	4803      	ldr	r0, [pc, #12]	; (80089e4 <CDC_Init_FS+0x20>)
 80089d6:	f7fe fe51 	bl	800767c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80089da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80089dc:	4618      	mov	r0, r3
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	20000f68 	.word	0x20000f68
 80089e4:	20000498 	.word	0x20000498
 80089e8:	20000768 	.word	0x20000768

080089ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	6039      	str	r1, [r7, #0]
 8008a06:	71fb      	strb	r3, [r7, #7]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	2b23      	cmp	r3, #35	; 0x23
 8008a10:	d84a      	bhi.n	8008aa8 <CDC_Control_FS+0xac>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <CDC_Control_FS+0x1c>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008aa9 	.word	0x08008aa9
 8008a1c:	08008aa9 	.word	0x08008aa9
 8008a20:	08008aa9 	.word	0x08008aa9
 8008a24:	08008aa9 	.word	0x08008aa9
 8008a28:	08008aa9 	.word	0x08008aa9
 8008a2c:	08008aa9 	.word	0x08008aa9
 8008a30:	08008aa9 	.word	0x08008aa9
 8008a34:	08008aa9 	.word	0x08008aa9
 8008a38:	08008aa9 	.word	0x08008aa9
 8008a3c:	08008aa9 	.word	0x08008aa9
 8008a40:	08008aa9 	.word	0x08008aa9
 8008a44:	08008aa9 	.word	0x08008aa9
 8008a48:	08008aa9 	.word	0x08008aa9
 8008a4c:	08008aa9 	.word	0x08008aa9
 8008a50:	08008aa9 	.word	0x08008aa9
 8008a54:	08008aa9 	.word	0x08008aa9
 8008a58:	08008aa9 	.word	0x08008aa9
 8008a5c:	08008aa9 	.word	0x08008aa9
 8008a60:	08008aa9 	.word	0x08008aa9
 8008a64:	08008aa9 	.word	0x08008aa9
 8008a68:	08008aa9 	.word	0x08008aa9
 8008a6c:	08008aa9 	.word	0x08008aa9
 8008a70:	08008aa9 	.word	0x08008aa9
 8008a74:	08008aa9 	.word	0x08008aa9
 8008a78:	08008aa9 	.word	0x08008aa9
 8008a7c:	08008aa9 	.word	0x08008aa9
 8008a80:	08008aa9 	.word	0x08008aa9
 8008a84:	08008aa9 	.word	0x08008aa9
 8008a88:	08008aa9 	.word	0x08008aa9
 8008a8c:	08008aa9 	.word	0x08008aa9
 8008a90:	08008aa9 	.word	0x08008aa9
 8008a94:	08008aa9 	.word	0x08008aa9
 8008a98:	08008aa9 	.word	0x08008aa9
 8008a9c:	08008aa9 	.word	0x08008aa9
 8008aa0:	08008aa9 	.word	0x08008aa9
 8008aa4:	08008aa9 	.word	0x08008aa9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008aa8:	bf00      	nop
  }

  return (USBD_OK);
 8008aaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	4805      	ldr	r0, [pc, #20]	; (8008adc <CDC_Receive_FS+0x24>)
 8008ac6:	f7fe fdd9 	bl	800767c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008aca:	4804      	ldr	r0, [pc, #16]	; (8008adc <CDC_Receive_FS+0x24>)
 8008acc:	f7fe fe1a 	bl	8007704 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ad0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20000498 	.word	0x20000498

08008ae0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008af0:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <CDC_Transmit_FS+0x48>)
 8008af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008af6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e00b      	b.n	8008b1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b06:	887b      	ldrh	r3, [r7, #2]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4806      	ldr	r0, [pc, #24]	; (8008b28 <CDC_Transmit_FS+0x48>)
 8008b0e:	f7fe fd9c 	bl	800764a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b12:	4805      	ldr	r0, [pc, #20]	; (8008b28 <CDC_Transmit_FS+0x48>)
 8008b14:	f7fe fdc6 	bl	80076a4 <USBD_CDC_TransmitPacket>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000498 	.word	0x20000498

08008b2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4613      	mov	r3, r2
 8008b38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	371c      	adds	r7, #28
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
	...

08008b50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	2212      	movs	r2, #18
 8008b60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b62:	4b03      	ldr	r3, [pc, #12]	; (8008b70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	2000014c 	.word	0x2000014c

08008b74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2204      	movs	r2, #4
 8008b84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b86:	4b03      	ldr	r3, [pc, #12]	; (8008b94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	20000160 	.word	0x20000160

08008b98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d105      	bne.n	8008bb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	4907      	ldr	r1, [pc, #28]	; (8008bcc <USBD_FS_ProductStrDescriptor+0x34>)
 8008bae:	4808      	ldr	r0, [pc, #32]	; (8008bd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bb0:	f7ff fdf7 	bl	80087a2 <USBD_GetString>
 8008bb4:	e004      	b.n	8008bc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	4904      	ldr	r1, [pc, #16]	; (8008bcc <USBD_FS_ProductStrDescriptor+0x34>)
 8008bba:	4805      	ldr	r0, [pc, #20]	; (8008bd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bbc:	f7ff fdf1 	bl	80087a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bc0:	4b02      	ldr	r3, [pc, #8]	; (8008bcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20001768 	.word	0x20001768
 8008bd0:	080095a0 	.word	0x080095a0

08008bd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	6039      	str	r1, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	4904      	ldr	r1, [pc, #16]	; (8008bf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008be4:	4804      	ldr	r0, [pc, #16]	; (8008bf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008be6:	f7ff fddc 	bl	80087a2 <USBD_GetString>
  return USBD_StrDesc;
 8008bea:	4b02      	ldr	r3, [pc, #8]	; (8008bf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20001768 	.word	0x20001768
 8008bf8:	080095b8 	.word	0x080095b8

08008bfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	6039      	str	r1, [r7, #0]
 8008c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	221a      	movs	r2, #26
 8008c0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c0e:	f000 f843 	bl	8008c98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c12:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20000164 	.word	0x20000164

08008c20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d105      	bne.n	8008c3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	4907      	ldr	r1, [pc, #28]	; (8008c54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c36:	4808      	ldr	r0, [pc, #32]	; (8008c58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c38:	f7ff fdb3 	bl	80087a2 <USBD_GetString>
 8008c3c:	e004      	b.n	8008c48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	4904      	ldr	r1, [pc, #16]	; (8008c54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c42:	4805      	ldr	r0, [pc, #20]	; (8008c58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c44:	f7ff fdad 	bl	80087a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20001768 	.word	0x20001768
 8008c58:	080095cc 	.word	0x080095cc

08008c5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4603      	mov	r3, r0
 8008c64:	6039      	str	r1, [r7, #0]
 8008c66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	4907      	ldr	r1, [pc, #28]	; (8008c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c72:	4808      	ldr	r0, [pc, #32]	; (8008c94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c74:	f7ff fd95 	bl	80087a2 <USBD_GetString>
 8008c78:	e004      	b.n	8008c84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	4904      	ldr	r1, [pc, #16]	; (8008c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c7e:	4805      	ldr	r0, [pc, #20]	; (8008c94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c80:	f7ff fd8f 	bl	80087a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c84:	4b02      	ldr	r3, [pc, #8]	; (8008c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20001768 	.word	0x20001768
 8008c94:	080095d8 	.word	0x080095d8

08008c98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c9e:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <Get_SerialNum+0x44>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ca4:	4b0e      	ldr	r3, [pc, #56]	; (8008ce0 <Get_SerialNum+0x48>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008caa:	4b0e      	ldr	r3, [pc, #56]	; (8008ce4 <Get_SerialNum+0x4c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cbe:	2208      	movs	r2, #8
 8008cc0:	4909      	ldr	r1, [pc, #36]	; (8008ce8 <Get_SerialNum+0x50>)
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 f814 	bl	8008cf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008cc8:	2204      	movs	r2, #4
 8008cca:	4908      	ldr	r1, [pc, #32]	; (8008cec <Get_SerialNum+0x54>)
 8008ccc:	68b8      	ldr	r0, [r7, #8]
 8008cce:	f000 f80f 	bl	8008cf0 <IntToUnicode>
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	1fff7a10 	.word	0x1fff7a10
 8008ce0:	1fff7a14 	.word	0x1fff7a14
 8008ce4:	1fff7a18 	.word	0x1fff7a18
 8008ce8:	20000166 	.word	0x20000166
 8008cec:	20000176 	.word	0x20000176

08008cf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d02:	2300      	movs	r3, #0
 8008d04:	75fb      	strb	r3, [r7, #23]
 8008d06:	e027      	b.n	8008d58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	0f1b      	lsrs	r3, r3, #28
 8008d0c:	2b09      	cmp	r3, #9
 8008d0e:	d80b      	bhi.n	8008d28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	0f1b      	lsrs	r3, r3, #28
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	440b      	add	r3, r1
 8008d20:	3230      	adds	r2, #48	; 0x30
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	e00a      	b.n	8008d3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	0f1b      	lsrs	r3, r3, #28
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	4619      	mov	r1, r3
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	440b      	add	r3, r1
 8008d38:	3237      	adds	r2, #55	; 0x37
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	011b      	lsls	r3, r3, #4
 8008d42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	3301      	adds	r3, #1
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	3301      	adds	r3, #1
 8008d56:	75fb      	strb	r3, [r7, #23]
 8008d58:	7dfa      	ldrb	r2, [r7, #23]
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d3d3      	bcc.n	8008d08 <IntToUnicode+0x18>
  }
}
 8008d60:	bf00      	nop
 8008d62:	371c      	adds	r7, #28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d74:	f107 0314 	add.w	r3, r7, #20
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	605a      	str	r2, [r3, #4]
 8008d7e:	609a      	str	r2, [r3, #8]
 8008d80:	60da      	str	r2, [r3, #12]
 8008d82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d8c:	d147      	bne.n	8008e1e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d8e:	2300      	movs	r3, #0
 8008d90:	613b      	str	r3, [r7, #16]
 8008d92:	4b25      	ldr	r3, [pc, #148]	; (8008e28 <HAL_PCD_MspInit+0xbc>)
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	4a24      	ldr	r2, [pc, #144]	; (8008e28 <HAL_PCD_MspInit+0xbc>)
 8008d98:	f043 0301 	orr.w	r3, r3, #1
 8008d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d9e:	4b22      	ldr	r3, [pc, #136]	; (8008e28 <HAL_PCD_MspInit+0xbc>)
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	613b      	str	r3, [r7, #16]
 8008da8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008db8:	f107 0314 	add.w	r3, r7, #20
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	481b      	ldr	r0, [pc, #108]	; (8008e2c <HAL_PCD_MspInit+0xc0>)
 8008dc0:	f7f9 fbd2 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008dc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dda:	f107 0314 	add.w	r3, r7, #20
 8008dde:	4619      	mov	r1, r3
 8008de0:	4812      	ldr	r0, [pc, #72]	; (8008e2c <HAL_PCD_MspInit+0xc0>)
 8008de2:	f7f9 fbc1 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008de6:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <HAL_PCD_MspInit+0xbc>)
 8008de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dea:	4a0f      	ldr	r2, [pc, #60]	; (8008e28 <HAL_PCD_MspInit+0xbc>)
 8008dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df0:	6353      	str	r3, [r2, #52]	; 0x34
 8008df2:	2300      	movs	r3, #0
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <HAL_PCD_MspInit+0xbc>)
 8008df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfa:	4a0b      	ldr	r2, [pc, #44]	; (8008e28 <HAL_PCD_MspInit+0xbc>)
 8008dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e00:	6453      	str	r3, [r2, #68]	; 0x44
 8008e02:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <HAL_PCD_MspInit+0xbc>)
 8008e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2100      	movs	r1, #0
 8008e12:	2043      	movs	r0, #67	; 0x43
 8008e14:	f7f9 f803 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e18:	2043      	movs	r0, #67	; 0x43
 8008e1a:	f7f9 f81c 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e1e:	bf00      	nop
 8008e20:	3728      	adds	r7, #40	; 0x28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	40023800 	.word	0x40023800
 8008e2c:	40020000 	.word	0x40020000

08008e30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f7fe fd28 	bl	800789c <USBD_LL_SetupStage>
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	78fb      	ldrb	r3, [r7, #3]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f7fe fd60 	bl	8007942 <USBD_LL_DataOutStage>
}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	440b      	add	r3, r1
 8008eaa:	3348      	adds	r3, #72	; 0x48
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f7fe fda9 	bl	8007a08 <USBD_LL_DataInStage>
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fe fead 	bl	8007c2c <USBD_LL_SOF>
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]
 8008ef2:	e008      	b.n	8008f06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d102      	bne.n	8008f02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
 8008f00:	e001      	b.n	8008f06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f02:	f7f7 fefb 	bl	8000cfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f0c:	7bfa      	ldrb	r2, [r7, #15]
 8008f0e:	4611      	mov	r1, r2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe fe50 	bl	8007bb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fe fe09 	bl	8007b34 <USBD_LL_Reset>
}
 8008f22:	bf00      	nop
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fe fe4b 	bl	8007bd6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	6812      	ldr	r2, [r2, #0]
 8008f4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f52:	f043 0301 	orr.w	r3, r3, #1
 8008f56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d005      	beq.n	8008f6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f60:	4b04      	ldr	r3, [pc, #16]	; (8008f74 <HAL_PCD_SuspendCallback+0x48>)
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	4a03      	ldr	r2, [pc, #12]	; (8008f74 <HAL_PCD_SuspendCallback+0x48>)
 8008f66:	f043 0306 	orr.w	r3, r3, #6
 8008f6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	e000ed00 	.word	0xe000ed00

08008f78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fe3a 	bl	8007c00 <USBD_LL_Resume>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe fe65 	bl	8007c7a <USBD_LL_IsoOUTIncomplete>
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe fe46 	bl	8007c60 <USBD_LL_IsoINIncomplete>
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe fe52 	bl	8007c94 <USBD_LL_DevConnected>
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fe4f 	bl	8007caa <USBD_LL_DevDisconnected>
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d13c      	bne.n	800909e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009024:	4a20      	ldr	r2, [pc, #128]	; (80090a8 <USBD_LL_Init+0x94>)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a1e      	ldr	r2, [pc, #120]	; (80090a8 <USBD_LL_Init+0x94>)
 8009030:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009034:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <USBD_LL_Init+0x94>)
 8009036:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800903a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800903c:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <USBD_LL_Init+0x94>)
 800903e:	2204      	movs	r2, #4
 8009040:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009042:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <USBD_LL_Init+0x94>)
 8009044:	2202      	movs	r2, #2
 8009046:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009048:	4b17      	ldr	r3, [pc, #92]	; (80090a8 <USBD_LL_Init+0x94>)
 800904a:	2200      	movs	r2, #0
 800904c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800904e:	4b16      	ldr	r3, [pc, #88]	; (80090a8 <USBD_LL_Init+0x94>)
 8009050:	2202      	movs	r2, #2
 8009052:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009054:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <USBD_LL_Init+0x94>)
 8009056:	2200      	movs	r2, #0
 8009058:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800905a:	4b13      	ldr	r3, [pc, #76]	; (80090a8 <USBD_LL_Init+0x94>)
 800905c:	2200      	movs	r2, #0
 800905e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009060:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <USBD_LL_Init+0x94>)
 8009062:	2200      	movs	r2, #0
 8009064:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009066:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <USBD_LL_Init+0x94>)
 8009068:	2201      	movs	r2, #1
 800906a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800906c:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <USBD_LL_Init+0x94>)
 800906e:	2200      	movs	r2, #0
 8009070:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009072:	480d      	ldr	r0, [pc, #52]	; (80090a8 <USBD_LL_Init+0x94>)
 8009074:	f7fa fa04 	bl	8003480 <HAL_PCD_Init>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800907e:	f7f7 fe3d 	bl	8000cfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009082:	2180      	movs	r1, #128	; 0x80
 8009084:	4808      	ldr	r0, [pc, #32]	; (80090a8 <USBD_LL_Init+0x94>)
 8009086:	f7fb fb62 	bl	800474e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800908a:	2240      	movs	r2, #64	; 0x40
 800908c:	2100      	movs	r1, #0
 800908e:	4806      	ldr	r0, [pc, #24]	; (80090a8 <USBD_LL_Init+0x94>)
 8009090:	f7fb fb16 	bl	80046c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009094:	2280      	movs	r2, #128	; 0x80
 8009096:	2101      	movs	r1, #1
 8009098:	4803      	ldr	r0, [pc, #12]	; (80090a8 <USBD_LL_Init+0x94>)
 800909a:	f7fb fb11 	bl	80046c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	20001968 	.word	0x20001968

080090ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fa faf9 	bl	80036ba <HAL_PCD_Start>
 80090c8:	4603      	mov	r3, r0
 80090ca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f92a 	bl	8009328 <USBD_Get_USB_Status>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	4608      	mov	r0, r1
 80090ec:	4611      	mov	r1, r2
 80090ee:	461a      	mov	r2, r3
 80090f0:	4603      	mov	r3, r0
 80090f2:	70fb      	strb	r3, [r7, #3]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70bb      	strb	r3, [r7, #2]
 80090f8:	4613      	mov	r3, r2
 80090fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800910a:	78bb      	ldrb	r3, [r7, #2]
 800910c:	883a      	ldrh	r2, [r7, #0]
 800910e:	78f9      	ldrb	r1, [r7, #3]
 8009110:	f7fa fedd 	bl	8003ece <HAL_PCD_EP_Open>
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f904 	bl	8009328 <USBD_Get_USB_Status>
 8009120:	4603      	mov	r3, r0
 8009122:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009124:	7bbb      	ldrb	r3, [r7, #14]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	460b      	mov	r3, r1
 8009138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009148:	78fa      	ldrb	r2, [r7, #3]
 800914a:	4611      	mov	r1, r2
 800914c:	4618      	mov	r0, r3
 800914e:	f7fa ff26 	bl	8003f9e <HAL_PCD_EP_Close>
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 f8e5 	bl	8009328 <USBD_Get_USB_Status>
 800915e:	4603      	mov	r3, r0
 8009160:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009162:	7bbb      	ldrb	r3, [r7, #14]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009186:	78fa      	ldrb	r2, [r7, #3]
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f7fa fffe 	bl	800418c <HAL_PCD_EP_SetStall>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 f8c6 	bl	8009328 <USBD_Get_USB_Status>
 800919c:	4603      	mov	r3, r0
 800919e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	4611      	mov	r1, r2
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fb f843 	bl	8004254 <HAL_PCD_EP_ClrStall>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 f8a7 	bl	8009328 <USBD_Get_USB_Status>
 80091da:	4603      	mov	r3, r0
 80091dc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80091de:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091fa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80091fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009200:	2b00      	cmp	r3, #0
 8009202:	da0b      	bge.n	800921c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800920a:	68f9      	ldr	r1, [r7, #12]
 800920c:	4613      	mov	r3, r2
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	1a9b      	subs	r3, r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	440b      	add	r3, r1
 8009216:	333e      	adds	r3, #62	; 0x3e
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	e00b      	b.n	8009234 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	4613      	mov	r3, r2
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009232:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800925a:	78fa      	ldrb	r2, [r7, #3]
 800925c:	4611      	mov	r1, r2
 800925e:	4618      	mov	r0, r3
 8009260:	f7fa fe10 	bl	8003e84 <HAL_PCD_SetAddress>
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f85c 	bl	8009328 <USBD_Get_USB_Status>
 8009270:	4603      	mov	r3, r0
 8009272:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009274:	7bbb      	ldrb	r3, [r7, #14]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b086      	sub	sp, #24
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
 800928a:	460b      	mov	r3, r1
 800928c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800929c:	7af9      	ldrb	r1, [r7, #11]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	f7fa ff29 	bl	80040f8 <HAL_PCD_EP_Transmit>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f83b 	bl	8009328 <USBD_Get_USB_Status>
 80092b2:	4603      	mov	r3, r0
 80092b4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80092b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	607a      	str	r2, [r7, #4]
 80092ca:	603b      	str	r3, [r7, #0]
 80092cc:	460b      	mov	r3, r1
 80092ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092de:	7af9      	ldrb	r1, [r7, #11]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	f7fa fea5 	bl	8004032 <HAL_PCD_EP_Receive>
 80092e8:	4603      	mov	r3, r0
 80092ea:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 f81a 	bl	8009328 <USBD_Get_USB_Status>
 80092f4:	4603      	mov	r3, r0
 80092f6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80092f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	460b      	mov	r3, r1
 800930c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	4611      	mov	r1, r2
 8009318:	4618      	mov	r0, r3
 800931a:	f7fa fed5 	bl	80040c8 <HAL_PCD_EP_GetRxCount>
 800931e:	4603      	mov	r3, r0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	2b03      	cmp	r3, #3
 800933a:	d817      	bhi.n	800936c <USBD_Get_USB_Status+0x44>
 800933c:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <USBD_Get_USB_Status+0x1c>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	08009355 	.word	0x08009355
 8009348:	0800935b 	.word	0x0800935b
 800934c:	08009361 	.word	0x08009361
 8009350:	08009367 	.word	0x08009367
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
    break;
 8009358:	e00b      	b.n	8009372 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800935a:	2303      	movs	r3, #3
 800935c:	73fb      	strb	r3, [r7, #15]
    break;
 800935e:	e008      	b.n	8009372 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009360:	2301      	movs	r3, #1
 8009362:	73fb      	strb	r3, [r7, #15]
    break;
 8009364:	e005      	b.n	8009372 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009366:	2303      	movs	r3, #3
 8009368:	73fb      	strb	r3, [r7, #15]
    break;
 800936a:	e002      	b.n	8009372 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800936c:	2303      	movs	r3, #3
 800936e:	73fb      	strb	r3, [r7, #15]
    break;
 8009370:	bf00      	nop
  }
  return usb_status;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <__errno>:
 8009380:	4b01      	ldr	r3, [pc, #4]	; (8009388 <__errno+0x8>)
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	20000180 	.word	0x20000180

0800938c <__libc_init_array>:
 800938c:	b570      	push	{r4, r5, r6, lr}
 800938e:	4e0d      	ldr	r6, [pc, #52]	; (80093c4 <__libc_init_array+0x38>)
 8009390:	4c0d      	ldr	r4, [pc, #52]	; (80093c8 <__libc_init_array+0x3c>)
 8009392:	1ba4      	subs	r4, r4, r6
 8009394:	10a4      	asrs	r4, r4, #2
 8009396:	2500      	movs	r5, #0
 8009398:	42a5      	cmp	r5, r4
 800939a:	d109      	bne.n	80093b0 <__libc_init_array+0x24>
 800939c:	4e0b      	ldr	r6, [pc, #44]	; (80093cc <__libc_init_array+0x40>)
 800939e:	4c0c      	ldr	r4, [pc, #48]	; (80093d0 <__libc_init_array+0x44>)
 80093a0:	f000 f8ea 	bl	8009578 <_init>
 80093a4:	1ba4      	subs	r4, r4, r6
 80093a6:	10a4      	asrs	r4, r4, #2
 80093a8:	2500      	movs	r5, #0
 80093aa:	42a5      	cmp	r5, r4
 80093ac:	d105      	bne.n	80093ba <__libc_init_array+0x2e>
 80093ae:	bd70      	pop	{r4, r5, r6, pc}
 80093b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093b4:	4798      	blx	r3
 80093b6:	3501      	adds	r5, #1
 80093b8:	e7ee      	b.n	8009398 <__libc_init_array+0xc>
 80093ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093be:	4798      	blx	r3
 80093c0:	3501      	adds	r5, #1
 80093c2:	e7f2      	b.n	80093aa <__libc_init_array+0x1e>
 80093c4:	08009610 	.word	0x08009610
 80093c8:	08009610 	.word	0x08009610
 80093cc:	08009610 	.word	0x08009610
 80093d0:	08009614 	.word	0x08009614

080093d4 <malloc>:
 80093d4:	4b02      	ldr	r3, [pc, #8]	; (80093e0 <malloc+0xc>)
 80093d6:	4601      	mov	r1, r0
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	f000 b861 	b.w	80094a0 <_malloc_r>
 80093de:	bf00      	nop
 80093e0:	20000180 	.word	0x20000180

080093e4 <free>:
 80093e4:	4b02      	ldr	r3, [pc, #8]	; (80093f0 <free+0xc>)
 80093e6:	4601      	mov	r1, r0
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f000 b80b 	b.w	8009404 <_free_r>
 80093ee:	bf00      	nop
 80093f0:	20000180 	.word	0x20000180

080093f4 <memset>:
 80093f4:	4402      	add	r2, r0
 80093f6:	4603      	mov	r3, r0
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d100      	bne.n	80093fe <memset+0xa>
 80093fc:	4770      	bx	lr
 80093fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009402:	e7f9      	b.n	80093f8 <memset+0x4>

08009404 <_free_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4605      	mov	r5, r0
 8009408:	2900      	cmp	r1, #0
 800940a:	d045      	beq.n	8009498 <_free_r+0x94>
 800940c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009410:	1f0c      	subs	r4, r1, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	bfb8      	it	lt
 8009416:	18e4      	addlt	r4, r4, r3
 8009418:	f000 f8ac 	bl	8009574 <__malloc_lock>
 800941c:	4a1f      	ldr	r2, [pc, #124]	; (800949c <_free_r+0x98>)
 800941e:	6813      	ldr	r3, [r2, #0]
 8009420:	4610      	mov	r0, r2
 8009422:	b933      	cbnz	r3, 8009432 <_free_r+0x2e>
 8009424:	6063      	str	r3, [r4, #4]
 8009426:	6014      	str	r4, [r2, #0]
 8009428:	4628      	mov	r0, r5
 800942a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800942e:	f000 b8a2 	b.w	8009576 <__malloc_unlock>
 8009432:	42a3      	cmp	r3, r4
 8009434:	d90c      	bls.n	8009450 <_free_r+0x4c>
 8009436:	6821      	ldr	r1, [r4, #0]
 8009438:	1862      	adds	r2, r4, r1
 800943a:	4293      	cmp	r3, r2
 800943c:	bf04      	itt	eq
 800943e:	681a      	ldreq	r2, [r3, #0]
 8009440:	685b      	ldreq	r3, [r3, #4]
 8009442:	6063      	str	r3, [r4, #4]
 8009444:	bf04      	itt	eq
 8009446:	1852      	addeq	r2, r2, r1
 8009448:	6022      	streq	r2, [r4, #0]
 800944a:	6004      	str	r4, [r0, #0]
 800944c:	e7ec      	b.n	8009428 <_free_r+0x24>
 800944e:	4613      	mov	r3, r2
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	b10a      	cbz	r2, 8009458 <_free_r+0x54>
 8009454:	42a2      	cmp	r2, r4
 8009456:	d9fa      	bls.n	800944e <_free_r+0x4a>
 8009458:	6819      	ldr	r1, [r3, #0]
 800945a:	1858      	adds	r0, r3, r1
 800945c:	42a0      	cmp	r0, r4
 800945e:	d10b      	bne.n	8009478 <_free_r+0x74>
 8009460:	6820      	ldr	r0, [r4, #0]
 8009462:	4401      	add	r1, r0
 8009464:	1858      	adds	r0, r3, r1
 8009466:	4282      	cmp	r2, r0
 8009468:	6019      	str	r1, [r3, #0]
 800946a:	d1dd      	bne.n	8009428 <_free_r+0x24>
 800946c:	6810      	ldr	r0, [r2, #0]
 800946e:	6852      	ldr	r2, [r2, #4]
 8009470:	605a      	str	r2, [r3, #4]
 8009472:	4401      	add	r1, r0
 8009474:	6019      	str	r1, [r3, #0]
 8009476:	e7d7      	b.n	8009428 <_free_r+0x24>
 8009478:	d902      	bls.n	8009480 <_free_r+0x7c>
 800947a:	230c      	movs	r3, #12
 800947c:	602b      	str	r3, [r5, #0]
 800947e:	e7d3      	b.n	8009428 <_free_r+0x24>
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	1821      	adds	r1, r4, r0
 8009484:	428a      	cmp	r2, r1
 8009486:	bf04      	itt	eq
 8009488:	6811      	ldreq	r1, [r2, #0]
 800948a:	6852      	ldreq	r2, [r2, #4]
 800948c:	6062      	str	r2, [r4, #4]
 800948e:	bf04      	itt	eq
 8009490:	1809      	addeq	r1, r1, r0
 8009492:	6021      	streq	r1, [r4, #0]
 8009494:	605c      	str	r4, [r3, #4]
 8009496:	e7c7      	b.n	8009428 <_free_r+0x24>
 8009498:	bd38      	pop	{r3, r4, r5, pc}
 800949a:	bf00      	nop
 800949c:	20000208 	.word	0x20000208

080094a0 <_malloc_r>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	1ccd      	adds	r5, r1, #3
 80094a4:	f025 0503 	bic.w	r5, r5, #3
 80094a8:	3508      	adds	r5, #8
 80094aa:	2d0c      	cmp	r5, #12
 80094ac:	bf38      	it	cc
 80094ae:	250c      	movcc	r5, #12
 80094b0:	2d00      	cmp	r5, #0
 80094b2:	4606      	mov	r6, r0
 80094b4:	db01      	blt.n	80094ba <_malloc_r+0x1a>
 80094b6:	42a9      	cmp	r1, r5
 80094b8:	d903      	bls.n	80094c2 <_malloc_r+0x22>
 80094ba:	230c      	movs	r3, #12
 80094bc:	6033      	str	r3, [r6, #0]
 80094be:	2000      	movs	r0, #0
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
 80094c2:	f000 f857 	bl	8009574 <__malloc_lock>
 80094c6:	4a21      	ldr	r2, [pc, #132]	; (800954c <_malloc_r+0xac>)
 80094c8:	6814      	ldr	r4, [r2, #0]
 80094ca:	4621      	mov	r1, r4
 80094cc:	b991      	cbnz	r1, 80094f4 <_malloc_r+0x54>
 80094ce:	4c20      	ldr	r4, [pc, #128]	; (8009550 <_malloc_r+0xb0>)
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	b91b      	cbnz	r3, 80094dc <_malloc_r+0x3c>
 80094d4:	4630      	mov	r0, r6
 80094d6:	f000 f83d 	bl	8009554 <_sbrk_r>
 80094da:	6020      	str	r0, [r4, #0]
 80094dc:	4629      	mov	r1, r5
 80094de:	4630      	mov	r0, r6
 80094e0:	f000 f838 	bl	8009554 <_sbrk_r>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d124      	bne.n	8009532 <_malloc_r+0x92>
 80094e8:	230c      	movs	r3, #12
 80094ea:	6033      	str	r3, [r6, #0]
 80094ec:	4630      	mov	r0, r6
 80094ee:	f000 f842 	bl	8009576 <__malloc_unlock>
 80094f2:	e7e4      	b.n	80094be <_malloc_r+0x1e>
 80094f4:	680b      	ldr	r3, [r1, #0]
 80094f6:	1b5b      	subs	r3, r3, r5
 80094f8:	d418      	bmi.n	800952c <_malloc_r+0x8c>
 80094fa:	2b0b      	cmp	r3, #11
 80094fc:	d90f      	bls.n	800951e <_malloc_r+0x7e>
 80094fe:	600b      	str	r3, [r1, #0]
 8009500:	50cd      	str	r5, [r1, r3]
 8009502:	18cc      	adds	r4, r1, r3
 8009504:	4630      	mov	r0, r6
 8009506:	f000 f836 	bl	8009576 <__malloc_unlock>
 800950a:	f104 000b 	add.w	r0, r4, #11
 800950e:	1d23      	adds	r3, r4, #4
 8009510:	f020 0007 	bic.w	r0, r0, #7
 8009514:	1ac3      	subs	r3, r0, r3
 8009516:	d0d3      	beq.n	80094c0 <_malloc_r+0x20>
 8009518:	425a      	negs	r2, r3
 800951a:	50e2      	str	r2, [r4, r3]
 800951c:	e7d0      	b.n	80094c0 <_malloc_r+0x20>
 800951e:	428c      	cmp	r4, r1
 8009520:	684b      	ldr	r3, [r1, #4]
 8009522:	bf16      	itet	ne
 8009524:	6063      	strne	r3, [r4, #4]
 8009526:	6013      	streq	r3, [r2, #0]
 8009528:	460c      	movne	r4, r1
 800952a:	e7eb      	b.n	8009504 <_malloc_r+0x64>
 800952c:	460c      	mov	r4, r1
 800952e:	6849      	ldr	r1, [r1, #4]
 8009530:	e7cc      	b.n	80094cc <_malloc_r+0x2c>
 8009532:	1cc4      	adds	r4, r0, #3
 8009534:	f024 0403 	bic.w	r4, r4, #3
 8009538:	42a0      	cmp	r0, r4
 800953a:	d005      	beq.n	8009548 <_malloc_r+0xa8>
 800953c:	1a21      	subs	r1, r4, r0
 800953e:	4630      	mov	r0, r6
 8009540:	f000 f808 	bl	8009554 <_sbrk_r>
 8009544:	3001      	adds	r0, #1
 8009546:	d0cf      	beq.n	80094e8 <_malloc_r+0x48>
 8009548:	6025      	str	r5, [r4, #0]
 800954a:	e7db      	b.n	8009504 <_malloc_r+0x64>
 800954c:	20000208 	.word	0x20000208
 8009550:	2000020c 	.word	0x2000020c

08009554 <_sbrk_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4c06      	ldr	r4, [pc, #24]	; (8009570 <_sbrk_r+0x1c>)
 8009558:	2300      	movs	r3, #0
 800955a:	4605      	mov	r5, r0
 800955c:	4608      	mov	r0, r1
 800955e:	6023      	str	r3, [r4, #0]
 8009560:	f7f7 fe8e 	bl	8001280 <_sbrk>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_sbrk_r+0x1a>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	b103      	cbz	r3, 800956e <_sbrk_r+0x1a>
 800956c:	602b      	str	r3, [r5, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	20001d70 	.word	0x20001d70

08009574 <__malloc_lock>:
 8009574:	4770      	bx	lr

08009576 <__malloc_unlock>:
 8009576:	4770      	bx	lr

08009578 <_init>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr

08009584 <_fini>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	bf00      	nop
 8009588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958a:	bc08      	pop	{r3}
 800958c:	469e      	mov	lr, r3
 800958e:	4770      	bx	lr
